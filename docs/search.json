[
  {
    "objectID": "sessions/tasks/tidyr.html",
    "href": "sessions/tasks/tidyr.html",
    "title": "",
    "section": "",
    "text": "Before you start, make sure to load the tidyverse package.\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "sessions/tasks/tidyr.html#get-started",
    "href": "sessions/tasks/tidyr.html#get-started",
    "title": "",
    "section": "",
    "text": "Before you start, make sure to load the tidyverse package.\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "sessions/tasks/tidyr.html#lets-tidy-some-data-sets",
    "href": "sessions/tasks/tidyr.html#lets-tidy-some-data-sets",
    "title": "",
    "section": "2 Let’s tidy some data sets",
    "text": "2 Let’s tidy some data sets\nFirst, complete both tasks before you move to the extras.\n1. relig_incom\nHave a look at the relig_income data set that is included in tidyverse package. The data set contains the results of a survey asking people about their religion and income category.\nWhat is not tidy about this data set? Can you fix it?\n2. billboard\nHave a look at the billboard data set that is included in the tidyverse package. The data set contains information about the chart rank of songs in the year 2000.\nWhat is not tidy about this data set? Can you fix it?"
  },
  {
    "objectID": "sessions/tasks/tidyr.html#extras",
    "href": "sessions/tasks/tidyr.html#extras",
    "title": "",
    "section": "3 Extras",
    "text": "3 Extras\n\nCheck out the values_drop_na and names_prefix argument of pivot_longer. What does it do and how can you use it with the billboard data?\nThis is a bit tricky: How would you have to change the penguins table if you wanted to make such a plot:\n\n\n\n\n\n\n\n\n\n\nHint: First use dplyr and only select the columns that you need for the plot. Then think about how to use tidyr to transform the data so it’s ready for ggplot"
  },
  {
    "objectID": "sessions/tasks/readr.html",
    "href": "sessions/tasks/readr.html",
    "title": "",
    "section": "",
    "text": "Before you start, make sure to install the tidyverse packages by calling\n\ninstall.packages(\"tidyverse\")\n\nThis will install readr along with other tidyverse packages.\nRemember to put library(tidyverse) (or library(readr)) on top of your script to access the readr functions.\n\n\nLet’s use the animals tibble from the previous task and write it into the data folder in our project.\nBefore writing the tibble\n\nCreate a data sub-folder in your RStudio project (if you don’t have one yet)\n\nHint: You can do that from within RStudio by using the New Folder button in the Files pane\n\n\nNow write the animals tibble into that /data sub-directory as animals.csv using a comma separator.\nCheck if the file was written into the correct folder."
  },
  {
    "objectID": "sessions/tasks/readr.html#get-started-with-readr-and-the-tidyverse",
    "href": "sessions/tasks/readr.html#get-started-with-readr-and-the-tidyverse",
    "title": "",
    "section": "",
    "text": "Before you start, make sure to install the tidyverse packages by calling\n\ninstall.packages(\"tidyverse\")\n\nThis will install readr along with other tidyverse packages.\nRemember to put library(tidyverse) (or library(readr)) on top of your script to access the readr functions.\n\n\nLet’s use the animals tibble from the previous task and write it into the data folder in our project.\nBefore writing the tibble\n\nCreate a data sub-folder in your RStudio project (if you don’t have one yet)\n\nHint: You can do that from within RStudio by using the New Folder button in the Files pane\n\n\nNow write the animals tibble into that /data sub-directory as animals.csv using a comma separator.\nCheck if the file was written into the correct folder."
  },
  {
    "objectID": "sessions/tasks/readr.html#read-data-into-r",
    "href": "sessions/tasks/readr.html#read-data-into-r",
    "title": "",
    "section": "2 Read data into R",
    "text": "2 Read data into R\nNow, try to read the data set back into R using the appropriate read_* function.\nMake sure that you save the table you read in in a new variable to have it available for later use.\n\n\n\n\n\n\nTip\n\n\n\nDon’t type the input path of the table to read. Instead, make the “” to start writing the path and then us the tab key on your keyboard to auto-complete."
  },
  {
    "objectID": "sessions/tasks/readr.html#extra",
    "href": "sessions/tasks/readr.html#extra",
    "title": "",
    "section": "3 Extra",
    "text": "3 Extra\n\nTry reading some tables (xlsx, csv, txt, …) that you have on your machine into R\n\nFirst copy the table into the data/ folder in your project, then use the appropriate function to read in the data\nIdeally, you use some of your research data, so you can see what are the difficulties there. Alternatively, you can use any kind of table even if not related to research.\n\nDownload the csv or excel file using the buttons below. The files have metadata on top and a messy header. The excel file has the added difficulty, that the actual data is not in the first sheet but in the second one. Try reading it into R correctly and clean the column names using the janitor::clean_names function. It might help to look at the data first to decide how to read it correctly.\n\n\n\n\n\n Download csv\n\n\n\n\n\n Download xlsx\n\n\n:::"
  },
  {
    "objectID": "sessions/tasks/intro-r.html",
    "href": "sessions/tasks/intro-r.html",
    "title": "",
    "section": "",
    "text": "You have the following three vectors:\nspecies &lt;- c(\n  \"MountainBeaver\", \"Cow\", \"GreyWolf\", \"Goat\",\n  \"GuineaPig\", \"Diplodocus\", \"AsianElephant\", \"Donkey\",\n  \"Horse\", \"PotarMonkey\", \"Cat\", \"Giraffe\",\n  \"Gorilla\", \"Human\", \"AfricanElephant\", \"Triceratops\",\n  \"RhesusMonkey\", \"Kangaroo\", \"GoldenHamster\", \"Mouse\",\n  \"Rabbit\", \"Sheep\", \"Jaguar\", \"Chimpanzee\",\n  \"Rat\", \"Brachiosaurus\", \"Mole\", \"Pig\"\n)\n\nbodywt_kg &lt;- c(\n  1.4, 465, 36.3, 27.7, 1., 11700, 2547, 187.1,\n  521, 10, 3.3, 529, 207, 62, 6654, 9400,\n  6.8, 35, 0.1, 0.02, 2.5, 55.5, 100, 52.2,\n  0.3, 87000, 0.1, 192\n)\n\nbrainwt_kg &lt;- c(\n  0.0081, 0.423, 0.1195, 0.115, 0.0055, 0.05, \n  4.603, 0.419, 0.655, 0.115, 0.0256, 0.68, \n  0.406, 1.32, 5.712, 0.07, 0.179, 0.056,\n  0.001, 0.0004, 0.0121, 0.175, 0.157, 0.44,\n  0.0019, 0.1545, 0.003, 0.18\n)\nCopy and paste the vectors into your R script and solve the following tasks.\nanimals_to_check &lt;- c(\"Snail\", \"Goat\", \"Chimpanzee\", \"Rat\", \"Dragon\", \"Eagle\")"
  },
  {
    "objectID": "sessions/tasks/intro-r.html#extras",
    "href": "sessions/tasks/intro-r.html#extras",
    "title": "",
    "section": "1 Extras",
    "text": "1 Extras\n\nRound the ratio vector to 4 decimal places with the round function\n\nType ?round into the console to open the help of the round function\n\nWhich animal has the smallest brain to body weight ratio?\n\nHint: have a look at the min function\n\nAdd the following three animals to the data vectors\n\n\nspecies_new &lt;- c(\"Eagle\", \"Snail\", \"Lion\")\nbrainwt_kg_new &lt;- c(0.0004, NA, 0.5)\nbodywt_kg_new &lt;- c(18, 0.01, 550)\n\nNow calculate the mean brain weight again. Can you explain what happens? Can you fix it?\n\nHint: have a look at ?mean"
  },
  {
    "objectID": "sessions/tasks/dplyr.html",
    "href": "sessions/tasks/dplyr.html",
    "title": "",
    "section": "",
    "text": "A helpful resource for to consult for this task can be the dplyr cheatsheet.\nBefore you start, make sure to load the tidyverse package and the palmerpenguins package.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "sessions/tasks/dplyr.html#get-started",
    "href": "sessions/tasks/dplyr.html#get-started",
    "title": "",
    "section": "",
    "text": "A helpful resource for to consult for this task can be the dplyr cheatsheet.\nBefore you start, make sure to load the tidyverse package and the palmerpenguins package.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "sessions/tasks/dplyr.html#data-transformation-with-dplyr",
    "href": "sessions/tasks/dplyr.html#data-transformation-with-dplyr",
    "title": "",
    "section": "2 Data transformation with dplyr",
    "text": "2 Data transformation with dplyr\nIn the following, you find a lot of different data transformation tasks. First, do 1-2 from each category before you do the remaining ones. You don’t have to finish all the tasks but make sure you covered each category. Generally, the first tasks from a category are easier than the last tasks of a category.\nFind all penguins that …\n\n… have a bill length between 40 and 45 mm.\n… for which we know the sex (sex is not NA).\n… which are of the species Adelie or Gentoo.\n… lived on the island Dream in the year 2007. How many of them were from each of the 3 species?\n\nCount …\n\n… the number of penguins on each island.\n… the number of penguins of each species on each island.\n\nSelect …\n\n… only the variables species, sex and year\n… only columns that contain measurements in mm\n\nAdd a column …\n\n… with the ratio of bill length to bill depth\n… with abbreviations for the species (Adelie = A, Gentoo = G, Chinstrap = C).\n\nCalculate …\n\n… mean flipper length and body mass for the 3 species and male and female penguins separately\n… Can you do the same but remove the penguins for which we don’t know the sex first?"
  },
  {
    "objectID": "sessions/tasks/dplyr.html#extras",
    "href": "sessions/tasks/dplyr.html#extras",
    "title": "",
    "section": "3 Extras",
    "text": "3 Extras\n\nMake a boxplot of penguin body mass with sex on the x-axis and facets for the different species. Can you remove the penguins with missing values for sex first?\nMake a scatterplot with the ratio of bill length to bill depth on the y axis and flipper length on the x axis? Can you distinguish the point between male and female penguins and remove penguins with unknown sex before making the plot?"
  },
  {
    "objectID": "sessions/solutions/tidyr.html",
    "href": "sessions/solutions/tidyr.html",
    "title": "Solution to tidyr task",
    "section": "",
    "text": "library(tidyverse)"
  },
  {
    "objectID": "sessions/solutions/tidyr.html#get-started",
    "href": "sessions/solutions/tidyr.html#get-started",
    "title": "Solution to tidyr task",
    "section": "",
    "text": "library(tidyverse)"
  },
  {
    "objectID": "sessions/solutions/tidyr.html#lets-tidy-some-data-sets",
    "href": "sessions/solutions/tidyr.html#lets-tidy-some-data-sets",
    "title": "Solution to tidyr task",
    "section": "2 Let’s tidy some data sets",
    "text": "2 Let’s tidy some data sets\n1. relig_income\nHave a look at the relig_income data set that is included in tidyverse package. The data set contains the results of a survey asking people about their religion and income category.\n\nrelig_income\n\n# A tibble: 18 × 11\n   religion `&lt;$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`\n   &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n 1 Agnostic      27        34        60        81        76       137        122\n 2 Atheist       12        27        37        52        35        70         73\n 3 Buddhist      27        21        30        34        33        58         62\n 4 Catholic     418       617       732       670       638      1116        949\n 5 Don’t k…      15        14        15        11        10        35         21\n 6 Evangel…     575       869      1064       982       881      1486        949\n 7 Hindu          1         9         7         9        11        34         47\n 8 Histori…     228       244       236       238       197       223        131\n 9 Jehovah…      20        27        24        24        21        30         15\n10 Jewish        19        19        25        25        30        95         69\n11 Mainlin…     289       495       619       655       651      1107        939\n12 Mormon        29        40        48        51        56       112         85\n13 Muslim         6         7         9        10         9        23         16\n14 Orthodox      13        17        23        32        32        47         38\n15 Other C…       9         7        11        13        13        14         18\n16 Other F…      20        33        40        46        49        63         46\n17 Other W…       5         2         3         4         2         7          3\n18 Unaffil…     217       299       374       365       341       528        407\n# ℹ 3 more variables: `$100-150k` &lt;dbl&gt;, `&gt;150k` &lt;dbl&gt;,\n#   `Don't know/refused` &lt;dbl&gt;\n\n\nWhat is not tidy about this data set?\n The variable income is spread across multiple columns, so we have to use pivot_longer to pivot the columns containing the income information:\n\npivot_longer(relig_income,\n             cols = !religion,\n             names_to = \"income\",\n             values_to = \"count\"\n             )\n\n# A tibble: 180 × 3\n   religion income             count\n   &lt;chr&gt;    &lt;chr&gt;              &lt;dbl&gt;\n 1 Agnostic &lt;$10k                 27\n 2 Agnostic $10-20k               34\n 3 Agnostic $20-30k               60\n 4 Agnostic $30-40k               81\n 5 Agnostic $40-50k               76\n 6 Agnostic $50-75k              137\n 7 Agnostic $75-100k             122\n 8 Agnostic $100-150k            109\n 9 Agnostic &gt;150k                 84\n10 Agnostic Don't know/refused    96\n# ℹ 170 more rows\n\n\n2. billboard\nHave a look at the billboard data set that is included in the tidyverse package. The data set contains information about the chart rank of songs in the year 2000.\n\nbillboard\n\n# A tibble: 317 × 79\n   artist     track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n   &lt;chr&gt;      &lt;chr&gt; &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 2 Pac      Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n 2 2Ge+her    The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n 3 3 Doors D… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n 4 3 Doors D… Loser 2000-10-21      76    76    72    69    67    65    55    59\n 5 504 Boyz   Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n 6 98^0       Give… 2000-08-19      51    39    34    26    26    19     2     2\n 7 A*Teens    Danc… 2000-07-08      97    97    96    95   100    NA    NA    NA\n 8 Aaliyah    I Do… 2000-01-29      84    62    51    41    38    35    35    38\n 9 Aaliyah    Try … 2000-03-18      59    53    38    28    21    18    16    14\n10 Adams, Yo… Open… 2000-08-26      76    76    74    69    68    67    61    58\n# ℹ 307 more rows\n# ℹ 68 more variables: wk9 &lt;dbl&gt;, wk10 &lt;dbl&gt;, wk11 &lt;dbl&gt;, wk12 &lt;dbl&gt;,\n#   wk13 &lt;dbl&gt;, wk14 &lt;dbl&gt;, wk15 &lt;dbl&gt;, wk16 &lt;dbl&gt;, wk17 &lt;dbl&gt;, wk18 &lt;dbl&gt;,\n#   wk19 &lt;dbl&gt;, wk20 &lt;dbl&gt;, wk21 &lt;dbl&gt;, wk22 &lt;dbl&gt;, wk23 &lt;dbl&gt;, wk24 &lt;dbl&gt;,\n#   wk25 &lt;dbl&gt;, wk26 &lt;dbl&gt;, wk27 &lt;dbl&gt;, wk28 &lt;dbl&gt;, wk29 &lt;dbl&gt;, wk30 &lt;dbl&gt;,\n#   wk31 &lt;dbl&gt;, wk32 &lt;dbl&gt;, wk33 &lt;dbl&gt;, wk34 &lt;dbl&gt;, wk35 &lt;dbl&gt;, wk36 &lt;dbl&gt;,\n#   wk37 &lt;dbl&gt;, wk38 &lt;dbl&gt;, wk39 &lt;dbl&gt;, wk40 &lt;dbl&gt;, wk41 &lt;dbl&gt;, wk42 &lt;dbl&gt;, …\n\n\nWhat is not tidy about this data set?\n The variable week is spread across multiple columns. We have to use pivot longer to pivot the week columns:\n\npivot_longer(billboard,\n             cols = wk1:wk76,\n             names_to = \"week\",\n             values_to = \"rank\")\n\n# A tibble: 24,092 × 5\n   artist track                   date.entered week   rank\n   &lt;chr&gt;  &lt;chr&gt;                   &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk8      NA\n 9 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk9      NA\n10 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk10     NA\n# ℹ 24,082 more rows"
  },
  {
    "objectID": "sessions/solutions/tidyr.html#extras",
    "href": "sessions/solutions/tidyr.html#extras",
    "title": "Solution to tidyr task",
    "section": "3 Extras",
    "text": "3 Extras\nvalues_drop_na argument\nThe argument values_drop_na drops rows with missing values in the rank column. Here it makes sense because not every song is in the charts for all 76 weeks.\nWith the names_prefix argument we can remove the wk before the values of the week variable. This makes it easier to work with later.\n\npivot_longer(billboard,\n             cols = wk1:wk76,\n             names_to = \"week\",\n             names_prefix = \"wk\",\n             values_to = \"rank\",\n             values_drop_na = TRUE)\n\n# A tibble: 5,307 × 5\n   artist  track                   date.entered week   rank\n   &lt;chr&gt;   &lt;chr&gt;                   &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26   1        87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26   2        82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26   3        72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26   4        77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26   5        87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26   6        94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26   7        99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02   1        91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02   2        87\n10 2Ge+her The Hardest Part Of ... 2000-09-02   3        92\n# ℹ 5,297 more rows\n\n\nRecreating the penguin plot\nTo recreate the penguin plot from the task, the following observations help:\n\nInformation needed: Species, bill depth and bill length\n\nIn a first step, you can therefore use select from dplyr to select only these three columns\n\nAesthetics are: Species on x-axis, value of bill depth and length on y-axis, fill aesthetic is category bill depth or bill length.\n\nThis needs some reformatting. You need one value column with the measurements, and one name column with the category. You can use pivot longer for this\n\n\nUse the pipe operator to do the calculations one after the other:\n\nlibrary(palmerpenguins)\npenguins |&gt; \n  select(species, bill_length_mm, bill_depth_mm) |&gt; \n  pivot_longer(!species, names_to = \"variable\") |&gt; \n  ggplot(aes(x = species, y = value, fill = variable)) +\n  geom_boxplot()"
  },
  {
    "objectID": "sessions/solutions/readr.html",
    "href": "sessions/solutions/readr.html",
    "title": "Solution to readr task",
    "section": "",
    "text": "First, I load the tidyverse package to have all readr functions available. Then I will write the tibble that I called animals from the previous task.\n\nlibrary(tidyverse)\n\n\n# The variable animals with the tibble from the previous task\nanimals\n\n# A tibble: 28 × 3\n   species        bodywt_kg brainwt_kg\n   &lt;chr&gt;              &lt;dbl&gt;      &lt;dbl&gt;\n 1 MountainBeaver       1.4     0.0081\n 2 Cow                465       0.423 \n 3 GreyWolf            36.3     0.120 \n 4 Goat                27.7     0.115 \n 5 GuineaPig            1       0.0055\n 6 Diplodocus       11700       0.05  \n 7 AsianElephant     2547       4.60  \n 8 Donkey             187.      0.419 \n 9 Horse              521       0.655 \n10 PotarMonkey         10       0.115 \n# ℹ 18 more rows\n\n\nNow I write the animals table into my project’s data/ folder:\n\nwrite_csv(x = animals, file = \"data/animals.csv\") # write as csv\nwrite_tsv(x = animals, file = \"data/animals.txt\") # write as txt\n\n\n\n\n\n\n\nNote\n\n\n\nIn order for this command to work, the /data directory must already be present in your working directory. Otherwise the path cannot be found and you will get an error message."
  },
  {
    "objectID": "sessions/solutions/readr.html#write-a-tibble-to-disk",
    "href": "sessions/solutions/readr.html#write-a-tibble-to-disk",
    "title": "Solution to readr task",
    "section": "",
    "text": "First, I load the tidyverse package to have all readr functions available. Then I will write the tibble that I called animals from the previous task.\n\nlibrary(tidyverse)\n\n\n# The variable animals with the tibble from the previous task\nanimals\n\n# A tibble: 28 × 3\n   species        bodywt_kg brainwt_kg\n   &lt;chr&gt;              &lt;dbl&gt;      &lt;dbl&gt;\n 1 MountainBeaver       1.4     0.0081\n 2 Cow                465       0.423 \n 3 GreyWolf            36.3     0.120 \n 4 Goat                27.7     0.115 \n 5 GuineaPig            1       0.0055\n 6 Diplodocus       11700       0.05  \n 7 AsianElephant     2547       4.60  \n 8 Donkey             187.      0.419 \n 9 Horse              521       0.655 \n10 PotarMonkey         10       0.115 \n# ℹ 18 more rows\n\n\nNow I write the animals table into my project’s data/ folder:\n\nwrite_csv(x = animals, file = \"data/animals.csv\") # write as csv\nwrite_tsv(x = animals, file = \"data/animals.txt\") # write as txt\n\n\n\n\n\n\n\nNote\n\n\n\nIn order for this command to work, the /data directory must already be present in your working directory. Otherwise the path cannot be found and you will get an error message."
  },
  {
    "objectID": "sessions/solutions/readr.html#read-data-into-r",
    "href": "sessions/solutions/readr.html#read-data-into-r",
    "title": "Solution to readr task",
    "section": "2 Read data into R",
    "text": "2 Read data into R\nNow I take the same data that I just wrote and read it back into R:\n\nanimals_csv &lt;- read_csv(\"data/animals.csv\") # read the csv\nanimals_tsv &lt;- read_tsv(\"data/animals.txt\") # read the txt\n\n\n\n\n\n\n\nNote\n\n\n\nI saved the data that I read in in two new variables: animals_csv and animals_tsv. You always need to do this, otherwise you don’t have the data available for the following analysis."
  },
  {
    "objectID": "sessions/solutions/readr.html#extra",
    "href": "sessions/solutions/readr.html#extra",
    "title": "Solution to readr task",
    "section": "3 Extra",
    "text": "3 Extra\nYou can use the Files pane to import csv files. Just click on the csv file and then click on the Import Dataset button:\n\n\n\n\n\n\n\n\n\nNow have the possibility to import a data set via a graphical user interface.\n\n\n\n\n\n\n\n\n\nThis is quite useful because you can preview your data and make sure that all the options are set correctly for importing. You can do this if you are not sure about the correct read_*() function arguments.\nJust play with these different options of reading data into R and find one that fits you best.\n\nThis workflow is not reproducible. If you use this option to import data, you have to click the button every time you want to import the data set.\nImporting the data set directly in your script using R code is the much better option. But check out the Code Preview window in the bottom right. You can just copy the code from there, paste it in your script and next time use the code instead of the graphical user interface."
  },
  {
    "objectID": "sessions/solutions/ggplot.html",
    "href": "sessions/solutions/ggplot.html",
    "title": "Solution to ggplot tasks",
    "section": "",
    "text": "First we need to load the packages needed to complete this task:\n\n# install.packages(\"tidyverse\")\n# install.packages(\"palmerpenguins\")\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\n\nHave a look at the penguin data set\n\n\npenguins\n\n\n\n# A tibble: 344 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 338 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "sessions/solutions/ggplot.html#get-started",
    "href": "sessions/solutions/ggplot.html#get-started",
    "title": "Solution to ggplot tasks",
    "section": "",
    "text": "First we need to load the packages needed to complete this task:\n\n# install.packages(\"tidyverse\")\n# install.packages(\"palmerpenguins\")\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\n\nHave a look at the penguin data set\n\n\npenguins\n\n\n\n# A tibble: 344 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 338 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "sessions/solutions/ggplot.html#exploratory-plotting",
    "href": "sessions/solutions/ggplot.html#exploratory-plotting",
    "title": "Solution to ggplot tasks",
    "section": "2 Exploratory plotting",
    "text": "2 Exploratory plotting\n\n2.1 Relationship between bill length and bill depth (scatterplot)\nWhat is the relationship between bill length and bill depth?\nFirst, I created a scatter plot and added a linear regression line. From the plot, It looks like bill length is decreasing with increasing bill depth.\n\n# Bill length vs. bill depth scatterplot with regression line\nggplot(\n  data = penguins,\n  aes(\n    x = bill_length_mm,\n    y = bill_depth_mm\n  )\n) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n# or short\nggplot(penguins, aes(bill_length_mm, bill_depth_mm)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE)\n\nIf we add the color aesthetic locally to the point layer, only this layer will be affected by it. The regression line is not separated by species but still calculated and plotted for all data points together:\n\n# Bill length vs. bill depth scatterplot with regression line\n# color as aesthetic local to the point layer\nggplot(penguins, aes(bill_length_mm, bill_depth_mm)) +\n  geom_point(aes(color = species)) +\n  geom_smooth(method = \"lm\", se = FALSE)\n\n\n\n\n\n\n\n\nWe can see an example of the Simpson’s paradox here. If you don’t consider species, it looks like the bill depth decreases with bill length. But after separating the data by species, we see that the effect is actually the opposite.\nTo draw separate regression lines for the species, we need to either add the color aesthetic to the smooth layer as well, or define the color aesthetic globally in the top layer ggplot call:\n\n# Define color aesthetic once globally\nggplot(penguins, aes(\n  x = bill_length_mm,\n  y = bill_depth_mm,\n  color = species\n)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE)\n\n\n\n\n\n\n\n\n\n\n2.2 Difference in flipper length between species (boxplot)\nIs there a difference in flipper length between the species?\nFirst I created a simple boxplot with notches:\n\n# Basic boxplot of flipper length with notches\nggplot(penguins, aes(species, flipper_length_mm)) +\n  geom_boxplot(notch = TRUE)\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\nA geom_point with position = position_jitter() will add the individual data points to the plot. It’s important to set a seed here to get the same result for the point position on the x-axis every time. Otherwise your plot is not reproducible. I added width = 0.5 to make the jittering a bit narrower:\n\nggplot(penguins, aes(species, flipper_length_mm)) +\n  geom_boxplot() +\n  geom_point(position = position_jitter(\n    seed = 123,\n    width = 0.5\n  ))\n\n\n\n\n\n\n\n\n\n\n2.3 Differences between body mass of male and female penguins (boxplot)\nAre male penguins heavier than female penguins? And is this different between the 3 species?\nFirst, a basic boxplot of the body mass by sex:\n\n#|warning: false\n# Basic boxplot of body mass for penguins of different sex\nggplot(penguins, aes(x = sex, y = body_mass_g)) +\n  geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\nI added species as color aesthetic:\n\n#|warning: false\nggplot(penguins, aes(x = sex, \n                     y = body_mass_g)) +\n  geom_boxplot(aes(color = species))\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\nAlternatively, I could also specify the fill aesthetic:\n\n#|warning: false\nggplot(penguins, aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species))\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\nSpecies as facets:\n\nggplot(penguins, aes(x = sex, y = body_mass_g)) +\n  geom_boxplot() +\n  facet_wrap(~species)\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\nI added a violin plot in the background to show the distribution of the datapoints. To make the violins visible, I changed the width of the boxplot to 0.4:\n\nggplot(penguins, aes(x = sex, y = body_mass_g)) +\n  geom_violin() +\n  geom_boxplot(width = .04) +\n  facet_wrap(~species)\n\n\n\n\n\n\n\n\n\n\n2.4 Distribution of flipper length between species (histogram)\nMake a histogram of the the flipper length separated by species.\nThe default histogram is a histogram where the different groups are stacked:\n\nggplot(penguins, aes(\n  x = flipper_length_mm,\n  fill = species\n)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\nTo unstack the groups, you have to use position = \"identity\". Also, it’s a good idea to make the histogram slightly transparent (alpha = 0.4) to see the overlapping areas.\n\nggplot(penguins, aes(\n  x = flipper_length_mm,\n  fill = species\n)) +\n  geom_histogram(\n    alpha = 0.5,\n    position = \"identity\"\n  )\n\n\n\n\n\n\n\n\nSeparated by facets (no need to specify the position here, because there is only one group per plot).\n\nggplot(penguins, aes(\n  x = flipper_length_mm,\n  fill = species\n)) +\n  geom_histogram() +\n  facet_wrap(~species, ncol = 1)\n\n\n\n\n\n\n\n\n\n\n2.5 Penguin flipper length by species and sex (heatmap)\nFor this data it does not make too much sense, but a heat map would look like this:\n\nggplot(penguins, aes(\n  x = species,\n  y = sex,\n  fill = flipper_length_mm\n)) +\n  geom_tile()"
  },
  {
    "objectID": "sessions/solutions/ggplot.html#beautify-the-plots",
    "href": "sessions/solutions/ggplot.html#beautify-the-plots",
    "title": "Solution to ggplot tasks",
    "section": "3 Beautify the plots",
    "text": "3 Beautify the plots\n\n3.1 Beautify plots from Task 1\nHere are just some examples of how to make the plots from before prettier. Of course there a many other options as well.\nExample one: Boxplot of flipper length and species\n\nggplot(penguins, aes(species, flipper_length_mm, color = species)) +\n  geom_boxplot(width = 0.3) +\n  geom_point(\n    alpha = 0.5,\n    position = position_jitter(width = 0.1, seed = 123)\n  ) +\n  ggsci::scale_color_uchicago() +\n  labs(x = \"Species\", y = \"Flipper length (mm)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\nWhat was changed compared to the basic plot?\n\nAdd color for each species by setting a global color aesthetic\nMake boxes and jitter points less wide by setting width for both layers\nMake jitter points slightly transparent by specifying alpha = 0.5 for the jitter layer\nChange the color to nicer colors from the ggsci package\nChange from default theme to theme_minimal()\nRemove the legend with legend.position = \"none\"\nChange the axis labels with labs()\n\nExample two: Reproducing the plot from the presentation\nThe following code is adapted from the palmerpengins package website.\n\nggplot(\n  data = penguins,\n  aes(\n    x = bill_length_mm,\n    y = bill_depth_mm,\n    color = species,\n    shape = species\n  )\n) +\n  geom_point(size = 3, alpha = 0.8) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_color_manual(values = c(\"darkorange\", \"purple\", \"cyan4\")) +\n  labs(\n    title = \"Penguin bill dimensions\",\n    subtitle = \"Bill length and depth for Adelie, Chinstrap and \n    Gentoo Penguins at Palmer Station LTER\",\n    x = \"Bill length (mm)\",\n    y = \"Bill depth (mm)\",\n    color = \"Penguin species\",\n    shape = \"Penguin species\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = c(0.85, 0.15),\n    legend.background = element_rect(fill = \"white\", color = NA)\n  )\n\n\n\n\n\n\n\n\nWhat was changed compared to the basic plot?\n\nMake points larger and slightly transparent by setting size and alpha for the point layer\nChange to custom color scale\nAdd title and subtitle with labs\nChange title of x-axis, y-axis and legend for color and shape aesthetic with labs\nUse theme_minimal() instead of default theme\nChange legend position to bottom right corner within the plot\n\nPositions are relative to the bottom left corner of the plot\n0.85 (85% of plot width) to the right\n0.15 (15% of plot height) towards the top"
  },
  {
    "objectID": "sessions/solutions/ggplot.html#save-one-of-the-plots-on-your-machine",
    "href": "sessions/solutions/ggplot.html#save-one-of-the-plots-on-your-machine",
    "title": "Solution to ggplot tasks",
    "section": "4 Save one of the plots on your machine",
    "text": "4 Save one of the plots on your machine\nExample with one of the plots from above:\n\n# First save the plot in a variable\nflipper_box &lt;- ggplot(penguins, aes(species, flipper_length_mm, color = species)) +\n  geom_boxplot(width = 0.3) +\n  geom_jitter(alpha = 0.5, position = position_jitter(width = 0.2, seed = 123)) +\n  ggsci::scale_color_uchicago() +\n  labs(x = \"Species\", y = \"Flipper length (mm)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\n# save as png in /img directory of the project\nggsave(filename = \"img/flipper_box.png\", plot = flipper_box)\n# save as pdf in /img directory of the project\nggsave(filename = \"img/flipper_box.pdf\", plot = flipper_box)"
  },
  {
    "objectID": "sessions/solutions/ggplot.html#some-more-examples",
    "href": "sessions/solutions/ggplot.html#some-more-examples",
    "title": "Solution to ggplot tasks",
    "section": "5 Some more examples",
    "text": "5 Some more examples\nHistogram\n\nggplot(penguins, aes(x = flipper_length_mm, fill = species)) +\n  geom_histogram(alpha = 0.6) +\n  ggsci::scale_fill_d3() +\n  labs(\n    y = \"Frequency\",\n    x = \"Flipper length [mm]\",\n    fill = \"Penguin species\"\n  ) +\n  theme_minimal()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\nHeat map\nFor the penguin data set a heat map does not make that much sense. But an example would be:\n\nggplot(penguins, aes(\n  x = species,\n  y = sex,\n  fill = flipper_length_mm\n)) +\n  geom_tile() +\n  scale_fill_viridis_c() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n5.1 The patchwork package\nWith the patchwork package, you can combine multiple ggplots into one plot. The package allows you to add annotations to the plot and to control the layout and appearance.\nBelow you find a simple example of two different penugin scatterplots. For more explanation and an overview of what is possible with the package, please have a look at the package documentation\n\nlibrary(patchwork)\n# Collecting legends and defining a common theme\nplot_1 &lt;- ggplot(penguins, aes(\n  x = bill_length_mm, y = bill_depth_mm,\n  color = species\n)) +\n  geom_point()\n\nplot_2 &lt;- ggplot(penguins, aes(\n  x = bill_length_mm, y = body_mass_g,\n  color = species\n)) +\n  geom_point()\n\n# Simple combination of 2 plots in patchwork\nplot_1 + plot_2\n\n\n\n\n\n\n\n\nAnd a more complex example where shared layers are defined for both plots:\n\n# more complex combination with annotation and definition of shared layers\nfinal_plot &lt;- plot_1 + plot_2 +\n  plot_layout(guides = \"collect\") +\n  plot_annotation(tag_levels = \"a\", tag_prefix = \"(\", tag_suffix = \")\") &\n  theme_minimal() &\n  scale_color_manual(values = c(\"darkorange\", \"purple\", \"cyan4\")) &\n  labs(\n    color = \"Penguin species\"\n  ) &\n  theme(\n    plot.tag.position = c(0.1, 0.95),\n    plot.tag = element_text(face = \"bold\")\n  )\n\nfinal_plot"
  },
  {
    "objectID": "sessions/solutions/ggplot.html#references",
    "href": "sessions/solutions/ggplot.html#references",
    "title": "Solution to ggplot tasks",
    "section": "6 References",
    "text": "6 References\nCheck out the package website of the palmerpenguin package. They have more nice examples of data visualizations that you can do with ggplot.\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi: 10.5281/zenodo.3960218."
  },
  {
    "objectID": "sessions/solutions/dplyr.html",
    "href": "sessions/solutions/dplyr.html",
    "title": "Solution to dplyr tasks",
    "section": "",
    "text": "library(tidyverse)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "sessions/solutions/dplyr.html#get-started",
    "href": "sessions/solutions/dplyr.html#get-started",
    "title": "Solution to dplyr tasks",
    "section": "",
    "text": "library(tidyverse)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "sessions/solutions/dplyr.html#data-transformation-with-dplyr",
    "href": "sessions/solutions/dplyr.html#data-transformation-with-dplyr",
    "title": "Solution to dplyr tasks",
    "section": "2 Data transformation with dplyr",
    "text": "2 Data transformation with dplyr\nFind all penguins that …\n\n… have a bill length between 40 and 45 mm.\n\n\nfilter(penguins, between(bill_length_mm, 40, 45))\n\n# A tibble: 77 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           40.3          18                 195        3250\n 2 Adelie  Torgersen           42            20.2               190        4250\n 3 Adelie  Torgersen           41.1          17.6               182        3200\n 4 Adelie  Torgersen           42.5          20.7               197        4500\n 5 Adelie  Biscoe              40.6          18.6               183        3550\n 6 Adelie  Biscoe              40.5          17.9               187        3200\n 7 Adelie  Biscoe              40.5          18.9               180        3950\n 8 Adelie  Dream               40.9          18.9               184        3900\n 9 Adelie  Dream               42.2          18.5               180        3550\n10 Adelie  Dream               40.8          18.4               195        3900\n# ℹ 67 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n# same as \n# filter(penguins, bill_length_mm &lt; 45 & bill_length_mm &gt; 40)\n\n\n… for which we know the sex.\n\n\nfilter(penguins, !is.na(sex))\n\n# A tibble: 333 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           36.7          19.3               193        3450\n 5 Adelie  Torgersen           39.3          20.6               190        3650\n 6 Adelie  Torgersen           38.9          17.8               181        3625\n 7 Adelie  Torgersen           39.2          19.6               195        4675\n 8 Adelie  Torgersen           41.1          17.6               182        3200\n 9 Adelie  Torgersen           38.6          21.2               191        3800\n10 Adelie  Torgersen           34.6          21.1               198        4400\n# ℹ 323 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n… which are of the species Adelie or Gentoo\n\n\nfilter(penguins, species %in% c(\"Adelie\", \"Gentoo\")\n# or\n# filter(penguins, (species == \"Adelie\" | species == \"Gentoo\"))\n\nError in parse(text = input): &lt;text&gt;:4:0: unexpected end of input\n2: # or\n3: # filter(penguins, (species == \"Adelie\" | species == \"Gentoo\"))\n  ^\n\n\n\n… lived on the island Dream in the year 2007. How many of them were from each of the 3 species?\n\n\nfilter(penguins, island == \"Dream\" & year == 2007) |&gt; \n  count(species)\n\n# A tibble: 2 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie       20\n2 Chinstrap    26\n\n\nCount …\n\n… the number of penguins on each island.\n\n\ncount(penguins, island)\n\n# A tibble: 3 × 2\n  island        n\n  &lt;fct&gt;     &lt;int&gt;\n1 Biscoe      168\n2 Dream       124\n3 Torgersen    52\n\n\n\n… the number of penguins of each species on each island.\n\n\ncount(penguins, island, species)\n\n# A tibble: 5 × 3\n  island    species       n\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;\n1 Biscoe    Adelie       44\n2 Biscoe    Gentoo      124\n3 Dream     Adelie       56\n4 Dream     Chinstrap    68\n5 Torgersen Adelie       52\n\n\nSelect …\n\n… only the variables species, sex and year\n\n\nselect(penguins, species, sex, year)\n\n# A tibble: 344 × 3\n   species sex     year\n   &lt;fct&gt;   &lt;fct&gt;  &lt;int&gt;\n 1 Adelie  male    2007\n 2 Adelie  female  2007\n 3 Adelie  female  2007\n 4 Adelie  &lt;NA&gt;    2007\n 5 Adelie  female  2007\n 6 Adelie  male    2007\n 7 Adelie  female  2007\n 8 Adelie  male    2007\n 9 Adelie  &lt;NA&gt;    2007\n10 Adelie  &lt;NA&gt;    2007\n# ℹ 334 more rows\n\n\n\n… only columns that contain measurements in mm\n\n\nselect(penguins, ends_with(\"mm\"))\n\n# A tibble: 344 × 3\n   bill_length_mm bill_depth_mm flipper_length_mm\n            &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;\n 1           39.1          18.7               181\n 2           39.5          17.4               186\n 3           40.3          18                 195\n 4           NA            NA                  NA\n 5           36.7          19.3               193\n 6           39.3          20.6               190\n 7           38.9          17.8               181\n 8           39.2          19.6               195\n 9           34.1          18.1               193\n10           42            20.2               190\n# ℹ 334 more rows\n\n# or\n#select(penguins, contains(\"_mm\"))\n\nAdd a column …\n\n… with the ratio of bill length to bill depth\n\n\nmutate(penguins,\n       ratio = bill_length_mm / bill_depth_mm)\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 3 more variables: sex &lt;fct&gt;, year &lt;int&gt;, ratio &lt;dbl&gt;\n\n\n\n… with abbreviations for the species (Adelie = A, Gentoo = G, Chinstrap = C).\n\n\nmutate(penguins,\n       species_short = case_when(\n         species == \"Adelie\" ~ \"A\",\n         species == \"Gentoo\" ~ \"G\",\n         species == \"Chinstrap\" ~ \"C\"\n       ))\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 3 more variables: sex &lt;fct&gt;, year &lt;int&gt;, species_short &lt;chr&gt;\n\n\nCalculate …\n\n… mean flipper length and body mass for the 3 species and male and female penguins separately\n\n\npenguins |&gt;\n  summarize(\n    mean_flipper = mean(flipper_length_mm, na.rm = TRUE),\n    mean_body = mean(body_mass_g, na.rm = TRUE),\n    .by = c(species, sex)\n  )  \n\n# A tibble: 8 × 4\n  species   sex    mean_flipper mean_body\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;     &lt;dbl&gt;\n1 Adelie    male           192.     4043.\n2 Adelie    female         188.     3369.\n3 Adelie    &lt;NA&gt;           186.     3540 \n4 Gentoo    female         213.     4680.\n5 Gentoo    male           222.     5485.\n6 Gentoo    &lt;NA&gt;           216.     4588.\n7 Chinstrap female         192.     3527.\n8 Chinstrap male           200.     3939.\n\n\n\nCan you do the same but remove the penguins for which we don’t know the sex first?\n\n\npenguins |&gt; \n  filter(!is.na(sex)) |&gt; \n  summarize(\n    mean_flipper = mean(flipper_length_mm, na.rm = TRUE),\n    mean_body = mean(body_mass_g, na.rm = TRUE),\n    .by = c(species, sex)\n  )\n\n# A tibble: 6 × 4\n  species   sex    mean_flipper mean_body\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;     &lt;dbl&gt;\n1 Adelie    male           192.     4043.\n2 Adelie    female         188.     3369.\n3 Gentoo    female         213.     4680.\n4 Gentoo    male           222.     5485.\n5 Chinstrap female         192.     3527.\n6 Chinstrap male           200.     3939."
  },
  {
    "objectID": "sessions/solutions/dplyr.html#extras",
    "href": "sessions/solutions/dplyr.html#extras",
    "title": "Solution to dplyr tasks",
    "section": "3 Extras",
    "text": "3 Extras\n\nMake a boxplot of penguin body mass with sex on the y-axis and facets for the different species. Can you remove the penguins with missing values for sex first?\n\n\npenguins |&gt;\n  filter(!is.na(sex)) |&gt;\n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot() +\n  facet_wrap(~species)\n\n\n\n\n\n\n\n\n\nMake a scatterplot with the ratio of bill length to bill depth on the y axis and flipper length on the x axis? Can you distinguish the point between male and female penguins and remove penguins with unknown sex before making the plot?\n\n\npenguins |&gt;\n  mutate(ratio = bill_length_mm / bill_depth_mm) |&gt;\n  filter(!is.na(sex)) |&gt;\n  ggplot(aes(x = flipper_length_mm, y = ratio, color = sex)) +\n  geom_point() +\n  scale_color_manual(values = c(\"cyan4\", \"darkorange\")) +\n  labs(\n    x = \"Flipper lenght (mm)\",\n    y = \"Ratio bill length / bill depth (-)\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "sessions/slides/tidyr.html#what-is-tidy-data-1",
    "href": "sessions/slides/tidyr.html#what-is-tidy-data-1",
    "title": "Tidy data with tidyr",
    "section": "What is tidy data?",
    "text": "What is tidy data?\n\n\n\nIllustration from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst"
  },
  {
    "objectID": "sessions/slides/tidyr.html#what-is-tidy-data-2",
    "href": "sessions/slides/tidyr.html#what-is-tidy-data-2",
    "title": "Tidy data with tidyr",
    "section": "What is tidy data?",
    "text": "What is tidy data?\nLet’s look at some examples\n\n\nTidy\n\n\n\n\n\nid\nname\ncolor\n\n\n\n\n1\nfloof\ngray\n\n\n2\nmax\nblack\n\n\n3\ncat\norange\n\n\n4\ndonut\ngray\n\n\n5\nmerlin\nblack\n\n\n6\npanda\ncalico\n\n\n\n\n\n\n\nNon-tidy\n\n\n\n\n\nfloof\nmax\ncat\ndonut\nmerlin\npanda\n\n\n\n\ngray\nblack\norange\ngray\nblack\ncalico\n\n\n\n\n\n\n\n\n\n\n\ngray\nblack\norange\ncalico\n\n\n\n\nfloof\nmax\ncat\npanda\n\n\ndonut\nmerlin\n\n\n\n\n\n\n\n\n\n\n\nSometimes raw data is non-tidy because its structure is optimized for data entry or viewing rather than analysis."
  },
  {
    "objectID": "sessions/slides/tidyr.html#why-tidy-data",
    "href": "sessions/slides/tidyr.html#why-tidy-data",
    "title": "Tidy data with tidyr",
    "section": "Why tidy data?",
    "text": "Why tidy data?\nThe main advantages of tidy data is that the tidyverse packages are built to work with it.\n\n\n\nIllustration from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst"
  },
  {
    "objectID": "sessions/slides/tidyr.html#example",
    "href": "sessions/slides/tidyr.html#example",
    "title": "Tidy data with tidyr",
    "section": "Example",
    "text": "Example\nLet’s go back to the city data set from earlier:\n\ncities_tbl\n#&gt; # A tibble: 10 × 4\n#&gt;    city             population area_km2 country\n#&gt;    &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  \n#&gt;  1 Istanbul           15100000     2576 Turkey \n#&gt;  2 Moscow             12500000     2561 Russia \n#&gt;  3 London              9000000     1572 UK     \n#&gt;  4 Saint Petersburg    5400000     1439 Russia \n#&gt;  5 Berlin              3800000      891 Germany\n#&gt;  6 Madrid              3200000      604 Spain  \n#&gt;  7 Kyiv                3000000      839 Ukraine\n#&gt;  8 Rome                2800000     1285 Italy  \n#&gt;  9 Bucharest           2200000      228 Romania\n#&gt; 10 Paris               2100000      105 France\n\n\nThis already looks pretty tidy."
  },
  {
    "objectID": "sessions/slides/tidyr.html#same-data-different-format",
    "href": "sessions/slides/tidyr.html#same-data-different-format",
    "title": "Tidy data with tidyr",
    "section": "Same data different format",
    "text": "Same data different format\n\ncities_untidy\n\n\n#&gt; # A tibble: 2 × 11\n#&gt;   type       Turkey_Istanbul Russia_Moscow UK_London `Russia_Saint Petersburg`\n#&gt;   &lt;chr&gt;                &lt;dbl&gt;         &lt;dbl&gt;     &lt;dbl&gt;                     &lt;dbl&gt;\n#&gt; 1 population        15100000      12500000   9000000                   5400000\n#&gt; 2 area_km2              2576          2561      1572                      1439\n#&gt;   Germany_Berlin Spain_Madrid Ukraine_Kyiv Italy_Rome Romania_Bucharest\n#&gt;            &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;             &lt;dbl&gt;\n#&gt; 1        3800000      3200000      3000000    2800000           2200000\n#&gt; 2            891          604          839       1285               228\n#&gt; # ℹ 1 more variable: France_Paris &lt;dbl&gt;\n\nWhat’s not tidy here?\n\n\nEach row has multiple observation\nAt the same time, each observation is split across multiple rows\nCountry and city variable are split into multiple columns\nCountry and city variable values are united to one value\n\n\n\nLet’s tidy this data using functions from the tidyr package!"
  },
  {
    "objectID": "sessions/slides/tidyr.html#pivot_longer",
    "href": "sessions/slides/tidyr.html#pivot_longer",
    "title": "Tidy data with tidyr",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nOne variable split into multiple columns can be solved with pivot_longer\n\n#&gt; # A tibble: 2 × 11\n#&gt;   type       Turkey_Istanbul Russia_Moscow UK_London `Russia_Saint Petersburg`\n#&gt;   &lt;chr&gt;                &lt;dbl&gt;         &lt;dbl&gt;     &lt;dbl&gt;                     &lt;dbl&gt;\n#&gt; 1 population        15100000      12500000   9000000                   5400000\n#&gt; 2 area_km2              2576          2561      1572                      1439\n#&gt;   Germany_Berlin Spain_Madrid Ukraine_Kyiv Italy_Rome Romania_Bucharest\n#&gt;            &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;             &lt;dbl&gt;\n#&gt; 1        3800000      3200000      3000000    2800000           2200000\n#&gt; 2            891          604          839       1285               228\n#&gt; # ℹ 1 more variable: France_Paris &lt;dbl&gt;"
  },
  {
    "objectID": "sessions/slides/tidyr.html#pivot_longer-1",
    "href": "sessions/slides/tidyr.html#pivot_longer-1",
    "title": "Tidy data with tidyr",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nOne variable split into multiple columns can be solved with pivot_longer\n\nstep1 &lt;- pivot_longer(\n    cities_untidy,                         # the tibble\n    cols = Turkey_Istanbul:France_Paris,   # the columns to pivot from:to\n    names_to = \"location\",                 # name of the new column\n    values_to = \"value\")                   # name of the value column\n\n\n\n#&gt; # A tibble: 20 × 3\n#&gt;   type       location                   value\n#&gt;   &lt;chr&gt;      &lt;chr&gt;                      &lt;dbl&gt;\n#&gt; 1 population Turkey_Istanbul         15100000\n#&gt; 2 population Russia_Moscow           12500000\n#&gt; 3 population UK_London                9000000\n#&gt; 4 population Russia_Saint Petersburg  5400000\n#&gt; # ℹ 16 more rows"
  },
  {
    "objectID": "sessions/slides/tidyr.html#pivot_longer-2",
    "href": "sessions/slides/tidyr.html#pivot_longer-2",
    "title": "Tidy data with tidyr",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nOne variable split into multiple columns can be solved with pivot_longer\n\nstep1 &lt;- pivot_longer(\n    cities_untidy,                         # the tibble\n    cols = Turkey_Istanbul:France_Paris,   # the columns to pivot from:to\n    names_to = \"location\",                 # name of the new column\n    values_to = \"value\")                   # name of the value column\n\nAnother way to select the columns to pivot:\n\nstep1 &lt;- pivot_longer(\n    cities_untidy,           # the tibble\n    cols = !type,            # All columns except type#&lt;&lt;        \n    names_to = \"location\",   # name of the new column\n    values_to = \"value\")     # name of the value column"
  },
  {
    "objectID": "sessions/slides/tidyr.html#separate_wider_delim",
    "href": "sessions/slides/tidyr.html#separate_wider_delim",
    "title": "Tidy data with tidyr",
    "section": "separate_wider_delim()",
    "text": "separate_wider_delim()\nMultiple variable values that are united into one can be separated using separate_wider_delim\n\n#&gt; # A tibble: 20 × 3\n#&gt;   type       location           value\n#&gt;   &lt;chr&gt;      &lt;chr&gt;              &lt;dbl&gt;\n#&gt; 1 population Turkey_Istanbul 15100000\n#&gt; 2 population Russia_Moscow   12500000\n#&gt; # ℹ 18 more rows\n\n\n\nstep2 &lt;- separate_wider_delim(\n  step1,                        # the tibble\n  location,                     # the column to separate\n  delim = \"_\",                  # the separator\n  names = c(\"country\", \"city\")) # names of new columns\n\n\n\n\n#&gt; # A tibble: 20 × 4\n#&gt;   type       country city        value\n#&gt;   &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt;       &lt;dbl&gt;\n#&gt; 1 population Turkey  Istanbul 15100000\n#&gt; 2 population Russia  Moscow   12500000\n#&gt; # ℹ 18 more rows\n\n\n\nThe opposite function exists as well and is called unite. Check out ?unite for details."
  },
  {
    "objectID": "sessions/slides/tidyr.html#pivot_wider",
    "href": "sessions/slides/tidyr.html#pivot_wider",
    "title": "Tidy data with tidyr",
    "section": "pivot_wider()",
    "text": "pivot_wider()\nOne observation split into multiple rows can solved with pivot_wider\n\n#&gt; # A tibble: 20 × 4\n#&gt;   type       country city        value\n#&gt;   &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt;       &lt;dbl&gt;\n#&gt; 1 population Turkey  Istanbul 15100000\n#&gt; 2 population Russia  Moscow   12500000\n#&gt; # ℹ 18 more rows\n\n\n\nstep3 &lt;- pivot_wider(\n  step2,                      # the tibble\n  names_from = type,          # the variables\n  values_from = value)        # the values\n\n\n\n\n#&gt; # A tibble: 10 × 4\n#&gt;   country city             population area_km2\n#&gt;   &lt;chr&gt;   &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt;\n#&gt; 1 Turkey  Istanbul           15100000     2576\n#&gt; 2 Russia  Moscow             12500000     2561\n#&gt; 3 UK      London              9000000     1572\n#&gt; 4 Russia  Saint Petersburg    5400000     1439\n#&gt; 5 Germany Berlin              3800000      891\n#&gt; # ℹ 5 more rows"
  },
  {
    "objectID": "sessions/slides/tidyr.html#all-steps-in-1",
    "href": "sessions/slides/tidyr.html#all-steps-in-1",
    "title": "Tidy data with tidyr",
    "section": "All steps in 1",
    "text": "All steps in 1\nWe can also use a pipe to do all these steps in one:\n\ncities_tidy &lt;- cities_untidy |&gt;\n  pivot_longer(\n    Turkey_Istanbul:France_Paris,\n    names_to = \"location\",\n    values_to = \"values\"\n  ) |&gt;\n  separate_wider_delim(\n    location,\n    delim = \"_\",\n    names = c(\"country\", \"city\")\n  ) |&gt;\n  pivot_wider(\n    names_from = type,\n    values_from = values\n  )"
  },
  {
    "objectID": "sessions/slides/tidyr.html#remove-missing-values-with-drop_na",
    "href": "sessions/slides/tidyr.html#remove-missing-values-with-drop_na",
    "title": "Tidy data with tidyr",
    "section": "Remove missing values with drop_na()",
    "text": "Remove missing values with drop_na()\nDrop rows with missing values:\n\n# drop rows with missing values in any column\ndrop_na(and_vertebrates) \n# drop rows with missing values in weight column\ndrop_na(and_vertebrates, weight_g) \n# drop rows with missing values in weight and species columns\ndrop_na(and_vertebrates, weight_g, species) \n\n\nThis is an easier and more intuitive alternative to filter(!is.na(...))."
  },
  {
    "objectID": "sessions/slides/template.html#ggplotdata",
    "href": "sessions/slides/template.html#ggplotdata",
    "title": "Introduction to version control with Git",
    "section": "ggplot(data)",
    "text": "ggplot(data)\nThe ggplot() function initializes a ggplot object. Every ggplot needs this function.\n\n\n\nlibrary(ggplot2) # or library(tidyverse)\nlibrary(lterdatasampler)\n\nggplot(data = and_vertebrates)\n\n\n\n\n\n\n\n\n\n\nEmpty plot because we did not specify the mapping of data variables"
  },
  {
    "objectID": "sessions/slides/template.html#heading-2",
    "href": "sessions/slides/template.html#heading-2",
    "title": "Introduction to version control with Git",
    "section": "Heading 2",
    "text": "Heading 2\nHeading 3\nSome text with some yellow and with some green and some pink and some blue\nAnd a test of a circle highlight.\nHeading 4\nHere we have a link and some bold and italic\nlibrary(ggplot2)\nggplot(penugins, aes(1:10,1:0)) +\n  geom_point(\"test\")\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nHere we have some inline code, or even real code mean(1:10)"
  },
  {
    "objectID": "sessions/slides/template.html#heading-2-1",
    "href": "sessions/slides/template.html#heading-2-1",
    "title": "Introduction to version control with Git",
    "section": "Heading 2",
    "text": "Heading 2\nHeading 3\nSome text with some yellow and with some green and some pink and some blue\nAnd a test of a circle highlight.\nHeading 4\nHere we have a link and some bold and italic\nlibrary(ggplot2)\nggplot(penugins, aes(1:10,1:0)) +\n  geom_point()\nHere we have some inline code, or even real code mean(1:10)"
  },
  {
    "objectID": "sessions/slides/template.html#heading-2-2",
    "href": "sessions/slides/template.html#heading-2-2",
    "title": "Introduction to version control with Git",
    "section": "Heading 2",
    "text": "Heading 2\nHeading 3\nSome text with some yellow and with some green and some pink and some blue\nAnd a test of a circle highlight.\nHeading 4\nHere we have a link and some bold and italic\nlibrary(ggplot2)\nggplot(penugins, aes(1:10,1:0)) +\n  geom_point()\nHere we have some inline code, or even real code mean(1:10)"
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#difference-between-r-and-rstudio",
    "href": "sessions/slides/intro-rstudio.html#difference-between-r-and-rstudio",
    "title": "Introduction to RStudio",
    "section": "Difference between R and RStudio",
    "text": "Difference between R and RStudio\n\n\n\n\n\n\n\n\n\nR is the programming language and the program that does the actual work\n\nCan be used with many different programming environments\n\n\n\n\nRStudio is the integrated development environment (IDE)\n\nProvides an interface to R\nSpecifically built around R code\nExecute code\nSyntax highlighting\nFile and project management\n…"
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#difference-between-r-and-rstudio-1",
    "href": "sessions/slides/intro-rstudio.html#difference-between-r-and-rstudio-1",
    "title": "Introduction to RStudio",
    "section": "Difference between R and RStudio",
    "text": "Difference between R and RStudio\n\n\n\n\n\n\n\n\n\nAnalogy and image from ModernDive Book\n\n\n\n\n\n\n\n\n\nSummary\n\n\nYou can use R without RStudio but RStudio without R would be of little use"
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#a-quick-tour-around-rstudio-1",
    "href": "sessions/slides/intro-rstudio.html#a-quick-tour-around-rstudio-1",
    "title": "Introduction to RStudio",
    "section": "A quick tour around RStudio",
    "text": "A quick tour around RStudio"
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#console-pane",
    "href": "sessions/slides/intro-rstudio.html#console-pane",
    "title": "Introduction to RStudio",
    "section": "Console pane",
    "text": "Console pane\n\n\n\nExecute R code\nOutput from R code in scripts is printed there\nType a command into the console and execute with Enter/Return\n\n\n\n\n\n\n\nTip\n\n\nUse arrow keys to bring back last commands"
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#script-pane",
    "href": "sessions/slides/intro-rstudio.html#script-pane",
    "title": "Introduction to RStudio",
    "section": "Script pane",
    "text": "Script pane\n\n\n\nWrite scripts with R code\n\nScripts are text files with R commands (file ending .R)\nUse scripts to save commands for reuse"
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#script-pane-1",
    "href": "sessions/slides/intro-rstudio.html#script-pane-1",
    "title": "Introduction to RStudio",
    "section": "Script pane",
    "text": "Script pane\n\n\n\nCreate a new R script:  File -&gt; New File -&gt; R Script\nSave an R script: File-&gt;Save (Ctrl/Cmd + S)\nRun code line by line with Run button (Ctrl+Enter/Cmd+Return)\nYou can open multiple scripts\n\n\n\n\n\n\n\n\n\n\nSummary\n\n\nUse scripts for all your analysis and for commands that you want to save. Use console for temporary commands, e.g. to test something."
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#environment-pane",
    "href": "sessions/slides/intro-rstudio.html#environment-pane",
    "title": "Introduction to RStudio",
    "section": "Environment pane",
    "text": "Environment pane\n\n\n\nShows objects currently present in the R session\nIs empty if you start R"
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#files-pane",
    "href": "sessions/slides/intro-rstudio.html#files-pane",
    "title": "Introduction to RStudio",
    "section": "Files pane",
    "text": "Files pane\n\n\n\nSimilar to Explorer/Finder\nBrowse project structure and files\n\nFind and open files\nCreate new folders\nDelete files\nRename files\n…\n\nPractical if you don’t want to switch between File Explorer and RStudio all the time"
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#plot-pane",
    "href": "sessions/slides/intro-rstudio.html#plot-pane",
    "title": "Introduction to RStudio",
    "section": "Plot pane",
    "text": "Plot pane\n\n\n\nPlots that are created with R will be shown here"
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#project-oriented-workflow-1",
    "href": "sessions/slides/intro-rstudio.html#project-oriented-workflow-1",
    "title": "Introduction to RStudio",
    "section": "Project oriented workflow",
    "text": "Project oriented workflow\n\n\n\nOne directory with all files relevant for project\n\nScripts, data, plots, documents, …\n\n\n\nMyProject\n|\n|- data\n|\n|- docs\n|   |\n|   |- notes\n|   |\n|   |- reports\n|\n|- R\n|   |\n|   |- clean_data.R \n|   |\n|   |- statistics.R\n|\n|\nExample project structure"
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#project-oriented-workflow-2",
    "href": "sessions/slides/intro-rstudio.html#project-oriented-workflow-2",
    "title": "Introduction to RStudio",
    "section": "Project oriented workflow",
    "text": "Project oriented workflow\n\n\n\nOne directory with all files relevant for project\n\nScripts, data, plots, documents, …\n\nAn RStudio project is just a normal directory with an .Rproj file\n\n\nMyProject\n|\n|- data\n|\n|- docs\n|   |\n|   |- notes\n|   |\n|   |- reports\n|\n|- R\n|   |\n|   |- clean_data.R \n|   |\n|   |- statistics.R\n|\n|- MyProject.RProj\nExample RStudio project structure"
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#project-oriented-workflow-3",
    "href": "sessions/slides/intro-rstudio.html#project-oriented-workflow-3",
    "title": "Introduction to RStudio",
    "section": "Project oriented workflow",
    "text": "Project oriented workflow\n\n\nAdvantages of using RStudio projects\n\n\nEasy to navigate in R Studio (File pane)\nEasy to find and access scripts and data in RStudio\nProject root is working directory\nOpen multiple projects simultaneously in separate RStudio instances\n\n\n\nMyProject\n|\n|- data\n|\n|- docs\n|   |\n|   |- notes\n|   |\n|   |- reports\n|\n|- R\n|   |\n|   |- clean_data.R \n|   |\n|   |- statistics.R\n|\n|- *.RProj\nExample RStudio project structure"
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#create-an-rstudio-project",
    "href": "sessions/slides/intro-rstudio.html#create-an-rstudio-project",
    "title": "Introduction to RStudio",
    "section": "Create an RStudio project",
    "text": "Create an RStudio project\n\n\nCreate a project from scratch:\n\nFile -&gt; New Project -&gt; New Directory -&gt; New Project\nEnter a directory name (this will be the name of your project)\nChoose the Directory where the project should be initiated\nCreate Project\n\n\n\n\n\nExample RStudio project structure in the Files pane\n\n\n\nRStudio will now create and open the project for you."
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#navigate-an-rstudio-project",
    "href": "sessions/slides/intro-rstudio.html#navigate-an-rstudio-project",
    "title": "Introduction to RStudio",
    "section": "Navigate an RStudio project",
    "text": "Navigate an RStudio project"
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#open-a-project-from-outside-rstudio",
    "href": "sessions/slides/intro-rstudio.html#open-a-project-from-outside-rstudio",
    "title": "Introduction to RStudio",
    "section": "Open a project from outside RStudio",
    "text": "Open a project from outside RStudio\nTo open an RStudio project from your file explorer/finder, just double click on the .Rproj file"
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#open-a-project-inside-rstudio",
    "href": "sessions/slides/intro-rstudio.html#open-a-project-inside-rstudio",
    "title": "Introduction to RStudio",
    "section": "Open a project inside RStudio",
    "text": "Open a project inside RStudio\nTo open an RStudio project from RStudio, click on the project symbol on the top right of R Studio and select the project from the list."
  },
  {
    "objectID": "sessions/slides/intro-rstudio.html#a-tip-before-we-get-started",
    "href": "sessions/slides/intro-rstudio.html#a-tip-before-we-get-started",
    "title": "Introduction to RStudio",
    "section": "A tip before we get started",
    "text": "A tip before we get started\nLearn the most important keyboard shortcuts of R Studio.\n\nFind all shortcuts under Tools -&gt; Keyboard Shortcuts Help\n\n\nSave active file: Ctrl/Cmd + S\nRun current line: Ctrl/Cmd + Enter\nCreate new R Script: Ctrl/Cmd + N\nUndo: Ctrl/Cmd + Z\nRedo: Ctrl/Cmd + Y\nCopy/Paste: Ctrl/Cmd + C/V"
  },
  {
    "objectID": "sessions/slides/good-practice.html#chaotic-projects-and-workflows",
    "href": "sessions/slides/good-practice.html#chaotic-projects-and-workflows",
    "title": "Good practice R coding",
    "section": "Chaotic projects and workflows …",
    "text": "Chaotic projects and workflows …\n… can make even small changes frustrating and difficult.\n\n\n\nArtwork by Allison Horst, CC BY 4.0"
  },
  {
    "objectID": "sessions/slides/good-practice.html#background",
    "href": "sessions/slides/good-practice.html#background",
    "title": "Good practice R coding",
    "section": "Background",
    "text": "Background\nOften, we want to share and publish our projects.\n\nReproducibility 🔄\n\nCan someone else reproduce my results?\n\nReliability 🏋\n\nWill my code work in the future?\n\nReusability ⚙️\n\nCan someone else actually use my code?"
  },
  {
    "objectID": "sessions/slides/good-practice.html#have-a-clear-project-structure",
    "href": "sessions/slides/good-practice.html#have-a-clear-project-structure",
    "title": "Good practice R coding",
    "section": "Have a clear project structure",
    "text": "Have a clear project structure\n\n\n\nOne directory with all files relevant for project\n\nScripts, data, plots, documents, …\n\nChoose a meaningful project structure 1\nAdd a readme file (usually README.md) in which you document the project structure\n\n\nMyProject\n|\n|- data\n|\n|- docs\n|   |\n|   |- notes\n|   |\n|   |- reports\n|\n|- R\n|   |\n|   |- clean_data.R \n|   |\n|   |- statistics.R\n|\n|- MyProject.RProj\n|\n|- README.md\nExample RStudio project structure\n\nyou can orient yourself at the R package structure"
  },
  {
    "objectID": "sessions/slides/good-practice.html#use-rstudio-projects",
    "href": "sessions/slides/good-practice.html#use-rstudio-projects",
    "title": "Good practice R coding",
    "section": "Use RStudio projects",
    "text": "Use RStudio projects\nAlways make your project an RStudio Project (if possible)!\n\n✅ You already did that."
  },
  {
    "objectID": "sessions/slides/good-practice.html#set-up-your-project",
    "href": "sessions/slides/good-practice.html#set-up-your-project",
    "title": "Good practice R coding",
    "section": "Set up your project",
    "text": "Set up your project\n\nR Studio offers a lot of settings and options.\nSo have a ☕ and check out Tools -&gt; Global Options and all the other buttons.\n\nR Studio cheat sheet that explains all the buttons\nUpdate R Studio from time to time to get new settings (Help -&gt; Check for Updates)"
  },
  {
    "objectID": "sessions/slides/good-practice.html#name-your-files-properly",
    "href": "sessions/slides/good-practice.html#name-your-files-properly",
    "title": "Good practice R coding",
    "section": "Name your files properly",
    "text": "Name your files properly\nYour collaborators and your future self will love you for this.\n\nPrinciples 1\nFile names should be\n\n\nMachine readable\nHuman readable\nWorking with default file ordering\n\n\n\nFrom this talk by J. Bryan"
  },
  {
    "objectID": "sessions/slides/good-practice.html#machine-readable-file-names",
    "href": "sessions/slides/good-practice.html#machine-readable-file-names",
    "title": "Good practice R coding",
    "section": "1. Machine readable file names",
    "text": "1. Machine readable file names\nNames should allow for easy searching, grouping and extracting information from file names.\n\n\nNo space & special characters\n\n\n\nBad examples ❌\n📄 2023-04-20 temperature göttingen.csv  📄 2023-04-20 rainfall göttingen.csv \n\nGood examples ✔️\n📄 2023-04-20_temperature_goettingen.csv  📄 2023-04-20_rainfall_goettingen.csv"
  },
  {
    "objectID": "sessions/slides/good-practice.html#human-readable-file-names",
    "href": "sessions/slides/good-practice.html#human-readable-file-names",
    "title": "Good practice R coding",
    "section": "2. Human readable file names",
    "text": "2. Human readable file names\nWhich file names would you like to read at 4 a.m. in the morning?\n\nFile names should reveal the file content\nUse separators to make it readable\n\n\nBad examples ❌\n📄 01preparedata.R  📄 01firstscript.R \n\nGood examples ✔️\n📄 01_prepare-data.R  📄 01_temperature-trend-analysis.R"
  },
  {
    "objectID": "sessions/slides/good-practice.html#default-ordering",
    "href": "sessions/slides/good-practice.html#default-ordering",
    "title": "Good practice R coding",
    "section": "3. Default ordering",
    "text": "3. Default ordering\nIf you order your files by name, the ordering should make sense:\n\n(Almost) always put something numeric first\n\nLeft-padded numbers (01, 02, …)\nDates in YYYY-MM-DD format\n\n\n\nChronological order\n📄 2023-04-20_temperature_goettingen.csv  📄 2023-04-21_temperature_goettingen.csv \n\nLogical order\n📄 01_prepare-data.R  📄 02_lm-temperature-trend.R"
  },
  {
    "objectID": "sessions/slides/good-practice.html#write-beautiful-code",
    "href": "sessions/slides/good-practice.html#write-beautiful-code",
    "title": "Good practice R coding",
    "section": "Write beautiful code",
    "text": "Write beautiful code\n\n\n\nTry to write code that others (i.e. future you) can understand\nFollow standards for readable and maintainable code\n\nFor R: tidyverse style guide defines code organization, syntax standards, …\n\n\n\n\n\n\nArtwork by Allison Horst, CC BY 4.0"
  },
  {
    "objectID": "sessions/slides/good-practice.html#standard-code-structure",
    "href": "sessions/slides/good-practice.html#standard-code-structure",
    "title": "Good practice R coding",
    "section": "Standard code structure",
    "text": "Standard code structure\n\n\n\n\n\nGeneral comment with purpose of the script, author, …\nlibrary() calls on top\nSet default variables and global options\nSource additional code\nWrite the actual code, starting with loading all data files\n\n\n\n\n# This code replicates figure 2 from the\n# Baldauf et al. 2022 Journal of Ecology\n# paper.\n# Authors: Selina Baldauf and Jane Doe\n# Copyright Selina Baldauf (2024)\n\nlibrary(tidyverse)\nlibrary(vegan)\n\n# set defaults\ninput_file &lt;- \"data/results.csv\"\n\n# source files\nsource(\"R/my_cool_function.R\")\n\n# read input\ninput_data &lt;- read_csv(input_file)"
  },
  {
    "objectID": "sessions/slides/good-practice.html#mark-sections",
    "href": "sessions/slides/good-practice.html#mark-sections",
    "title": "Good practice R coding",
    "section": "Mark sections",
    "text": "Mark sections\n\n\nUse comments to break up your file into sections\n\n\n\n\n# Load data ---------------------------------------------------------------\n\ninput_data &lt;- read_csv(input_file)\n\n# Plot data ---------------------------------------------------------------\n\nggplot(input_data, aes(x = x, y = y)) +\n  geom_point()\n\n\nInsert a section label with Ctrl/Cmd + Shift + R\nNavigate sections in the file outline"
  },
  {
    "objectID": "sessions/slides/good-practice.html#break-down-large-scripts",
    "href": "sessions/slides/good-practice.html#break-down-large-scripts",
    "title": "Good practice R coding",
    "section": "Break down large scripts",
    "text": "Break down large scripts\n\nIf your scripts become too big, split them\nYou can use source() in R to load the content of another script\n\nYou can source the same script into multiple other scripts\n\n\n\n\n\nR/analyse_species.R:\n\n# This code ....\n# Authors: Selina Baldauf and Jane Doe\n# Copyright Selina Baldauf (2024)\n\nlibrary(tidyverse)\nlibrary(vegan)\n\n# source file for data reading and cleaning\n# reads in the species data and cleans it for\n# further analysis\n# output is the tibble species_clean\nsource(\"R/prepare_data/read_and_clean_data.R\")\n\n# Analyse species data ----------------------\n\n# code for the analysis\n\n\nR/prepare_data/read_and_clean_data.R:\n\n# Script to read in the raw species data and clean it\n\npath_to_species &lt;- \"data/species.csv\"\n\nspecies_raw &lt;- read_csv(path_to_species)\n\n# further code for cleaning the data"
  },
  {
    "objectID": "sessions/slides/good-practice.html#coding-style---object-names",
    "href": "sessions/slides/good-practice.html#coding-style---object-names",
    "title": "Good practice R coding",
    "section": "Coding style - Object names",
    "text": "Coding style - Object names\n\n\nVariables should only have lowercase letters, numbers, and *_*\nUse snake_case for longer variable names\nTry to use concise but meaningful names\n\n\n\n\n# Good\nday_one\nday_1\n\n# Bad\nDayOne\ndayone\nfirst_day_of_the_month\ndm1"
  },
  {
    "objectID": "sessions/slides/good-practice.html#coding-style---spacing",
    "href": "sessions/slides/good-practice.html#coding-style---spacing",
    "title": "Good practice R coding",
    "section": "Coding style - Spacing",
    "text": "Coding style - Spacing\n\n\n\nAlways put spaces after a comma\n\n\n\n# Good\nx[, 1]\n\n# Bad\nx[ , 1]\nx[,1]\nx[ ,1]"
  },
  {
    "objectID": "sessions/slides/good-practice.html#coding-style---spacing-1",
    "href": "sessions/slides/good-practice.html#coding-style---spacing-1",
    "title": "Good practice R coding",
    "section": "Coding style - Spacing",
    "text": "Coding style - Spacing\n\n\nAlways put spaces after a comma\nNo spaces around parentheses for normal function calls\n\n\n\n# Good\nmean(x, na.rm = TRUE)\n\n# Bad\nmean (x, na.rm = TRUE)\nmean ( x, na.rm = TRUE )"
  },
  {
    "objectID": "sessions/slides/good-practice.html#coding-style---spacing-2",
    "href": "sessions/slides/good-practice.html#coding-style---spacing-2",
    "title": "Good practice R coding",
    "section": "Coding style - Spacing",
    "text": "Coding style - Spacing\n\n\nAlways put spaces after a comma\nNo spaces around parentheses for normal function calls\nSpaces around most operators (&lt;-, ==, +, etc.)\n\n\n\n# Good\nheight &lt;- (feet * 12) + inches\nmean(x, na.rm = TRUE)\n\n# Bad\nheight&lt;-feet*12+inches\nmean(x, na.rm=TRUE)"
  },
  {
    "objectID": "sessions/slides/good-practice.html#coding-style---spacing-3",
    "href": "sessions/slides/good-practice.html#coding-style---spacing-3",
    "title": "Good practice R coding",
    "section": "Coding style - Spacing",
    "text": "Coding style - Spacing\n\n\nAlways put spaces after a comma\nNo spaces around parentheses for normal function calls\nSpaces around most operators (&lt;-, ==, +, etc.)\nSpaces before pipe (|&gt;) followed by new line\n\n\n\n# Good\niris |&gt; \n  summarize_if(is.numeric, mean, .by = Species)  |&gt; \n  arrange(desc(Sepal.Length))\n\n# Bad\niris|&gt;summarize_if(is.numeric, mean, .by = Species)|&gt;arrange(desc(Sepal.Length))"
  },
  {
    "objectID": "sessions/slides/good-practice.html#coding-style---spacing-4",
    "href": "sessions/slides/good-practice.html#coding-style---spacing-4",
    "title": "Good practice R coding",
    "section": "Coding style - Spacing",
    "text": "Coding style - Spacing\n\n\nAlways put spaces after a comma\nNo spaces around parentheses for normal function calls\nSpaces around most operators (&lt;-, ==, +, etc.)\nSpaces before pipe (|&gt;) followed by new line\nSpaces before + in ggplot followed by new line\n\n\n\n# Good\nggplot(aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +\n  geom_point()\n\n# Bad\nggplot(aes(x = Sepal.Width, y = Sepal.Length, color = Species))+geom_point()"
  },
  {
    "objectID": "sessions/slides/good-practice.html#coding-style---line-width",
    "href": "sessions/slides/good-practice.html#coding-style---line-width",
    "title": "Good practice R coding",
    "section": "Coding style - Line width",
    "text": "Coding style - Line width\nTry to limit your line width to 80 characters.\n\nYou don’t want to scroll to the right to read all code\n80 characters can be displayed on most displays and programs\nSplit your code into multiple lines if it is too long\n\nSee this grey vertical line in R Studio?\n\n\n\n\n# Bad\niris |&gt; summarise(Sepal.Length = mean(Sepal.Length), Sepal.Width = mean(Sepal.Width), Species = n_distinct(Species), .by = Species)\n\n# Good\niris |&gt;\n  summarise(\n    Sepal.Length = mean(Sepal.Length),\n    Sepal.Width = mean(Sepal.Width),\n    Species = n_distinct(Species),\n    .by = Species\n  )"
  },
  {
    "objectID": "sessions/slides/good-practice.html#coding-style",
    "href": "sessions/slides/good-practice.html#coding-style",
    "title": "Good practice R coding",
    "section": "Coding style",
    "text": "Coding style\nDo I really have to remember all of this?\n\nLuckily, no! R and R Studio provide some nice helpers"
  },
  {
    "objectID": "sessions/slides/good-practice.html#coding-style-helpers---rstudio",
    "href": "sessions/slides/good-practice.html#coding-style-helpers---rstudio",
    "title": "Good practice R coding",
    "section": "Coding style helpers - RStudio",
    "text": "Coding style helpers - RStudio\nRStudio has style diagnostics that tell you where something is wrong\nTools -&gt; Gloabl Options -&gt; Code -&gt; Diagnostics"
  },
  {
    "objectID": "sessions/slides/good-practice.html#coding-style-helpers---auto-formatting",
    "href": "sessions/slides/good-practice.html#coding-style-helpers---auto-formatting",
    "title": "Good practice R coding",
    "section": "Coding style helpers - Auto-formatting",
    "text": "Coding style helpers - Auto-formatting\nRStudio can automatically format your code!\n\n\nOpen the command palette with Ctrl/Cmd + Shift + P\nSearch for “format” to see all formatting options\n\n“Reformat Current Document” to format the open script\nYou can toggle “Reformat documents on save” to format automatically on save\nBy default the “Code formatter” is the tidyverse style guide (Styler)"
  },
  {
    "objectID": "sessions/slides/good-practice.html#coding-style-helpers---linting",
    "href": "sessions/slides/good-practice.html#coding-style-helpers---linting",
    "title": "Good practice R coding",
    "section": "Coding style helpers - Linting",
    "text": "Coding style helpers - Linting\n\nLinters are tools that analyze your code for potential errors\nThe R package lintr is a linter for R code\n\nInstall it with install.packages(\"lintr\")\n\nOpen the command palette with Ctrl/Cmd + Shift + P and search for “lint”\n\n“Lint current file” to lint the open script\nThis will print a list of potential improvements in the console area"
  },
  {
    "objectID": "sessions/slides/good-practice.html#make-your-code-sharable",
    "href": "sessions/slides/good-practice.html#make-your-code-sharable",
    "title": "Good practice R coding",
    "section": "Make your code sharable",
    "text": "Make your code sharable\n\nUse relative paths!\nMake sure you include all necessary files\nInclude a readme with instructions on how to run the code and an explanation of the project structure\nComment your code to make it understandable\n\n\n\n\n\n\n\n\nSend your code to a colleague\n\n\nIf you are unsure if your code is understandable and can run on another machine, send it to a colleague and ask them to run it and give you feedback"
  },
  {
    "objectID": "sessions/slides/good-practice.html#publishing-your-code",
    "href": "sessions/slides/good-practice.html#publishing-your-code",
    "title": "Good practice R coding",
    "section": "Publishing your code",
    "text": "Publishing your code\n\nInclude a licence\n\nChoose a licence (common for open source projects: MIT, GPL-3.0)\nUse the usethis package to add a licence to your project\n\ninstall.packages(\"usethis\")\nusethis::use_mit_license(\"Your Name\") adds a licence file to your project\n\n\nShow which packages and which versions you used\n\nthis is important for reproducibility as packages change over time\ndevtools::session_info() prints a list of all packages and their versions (add this to your readme file)\nrenv is a package that helps you manage package versions\n\nConsider learning Git and publish on GitHub/Gitlab etc."
  },
  {
    "objectID": "sessions/slides/good-practice.html#clean-projects-and-workflows",
    "href": "sessions/slides/good-practice.html#clean-projects-and-workflows",
    "title": "Good practice R coding",
    "section": "Clean projects and workflows …",
    "text": "Clean projects and workflows …\n… allow you and others to work productively.\nBut don’t get overwhelmed by all the advice. Just start with one thing.\n\n\n\nArtwork by Allison Horst, CC BY 4.0"
  },
  {
    "objectID": "sessions/slides/functions.html#functions-in-r",
    "href": "sessions/slides/functions.html#functions-in-r",
    "title": "Functions in R",
    "section": "Functions in R",
    "text": "Functions in R\nFunctions make multiple operations available under one command.\n\n\n\n\nFunctions:\n\nHave a name\nHave (0, 1, or any number of) arguments as input\nThey calculate something using the arguments\nThey have a return value (the output)\nCan have side effects (like plotting)\n\n\n \n\n\n\n\nGeneral structure of a function call: function_name ( argument = value )"
  },
  {
    "objectID": "sessions/slides/functions.html#the-mean-function",
    "href": "sessions/slides/functions.html#the-mean-function",
    "title": "Functions in R",
    "section": "The mean function",
    "text": "The mean function\nfunction_name ( argument = value )\n\nmean ( x = c(1,5,6) )\n\nmean(x = c(1,5,6)) # or short: mean(c(1,5,6))\n#&gt; [1] 4\n\n\n\n\nArguments can also be variables\nThe output of a function can be stored in a variable\n\n\n\nvalues &lt;- c(1,5,6)\nresult &lt;- mean(x = values)\nresult\n#&gt; [1] 4"
  },
  {
    "objectID": "sessions/slides/functions.html#the-mean-function-1",
    "href": "sessions/slides/functions.html#the-mean-function-1",
    "title": "Functions in R",
    "section": "The mean function",
    "text": "The mean function\nBut what does the mean function do? What are the arguments that I can use?\n\n\n\n   Call the function help using ?\n\n?mean"
  },
  {
    "objectID": "sessions/slides/functions.html#function-arguments",
    "href": "sessions/slides/functions.html#function-arguments",
    "title": "Functions in R",
    "section": "Function arguments",
    "text": "Function arguments\n\nArguments are the input to a function\nFunctions can provide default values for some arguments\nDefault values for arguments are indicated in the function help"
  },
  {
    "objectID": "sessions/slides/functions.html#function-arguments-1",
    "href": "sessions/slides/functions.html#function-arguments-1",
    "title": "Functions in R",
    "section": "Function arguments",
    "text": "Function arguments\nWhat happened here?   \n\n# NA is a missing value\nvalues &lt;- c(1, 5, 6, NA)\nmean(x = values)\n#&gt; [1] NA\n\n\n  na.rm argument is FALSE by default.\n\n\nSet it to TRUE if you want to calculate the mean despite missing values:\n\nmean(x = values, na.rm = TRUE)\n#&gt; [1] 4\n\n\n\n Arguments with default values are optional, arguments without default values are not! \n\nmean()\n#&gt; Error in mean.default(): argument \"x\" is missing, with no default"
  },
  {
    "objectID": "sessions/slides/functions.html#function-arguments-2",
    "href": "sessions/slides/functions.html#function-arguments-2",
    "title": "Functions in R",
    "section": "Function arguments",
    "text": "Function arguments\nArgument matching can be achieved by position or by name\n\nmean(x, trim = 0, na.rm = FALSE, ...)\nvalues &lt;- c(1, 5, 6, NA)\n\n\nThese calls to mean all are the same:\n\nmean(values, , TRUE) # by position\nmean(x = values, na.rm = TRUE) # by name\nmean(values, na.rm = TRUE) # a mix of both"
  },
  {
    "objectID": "sessions/slides/functions.html#function-arguments-3",
    "href": "sessions/slides/functions.html#function-arguments-3",
    "title": "Functions in R",
    "section": "Function arguments",
    "text": "Function arguments\nArgument matching can be achieved by position or by name\n\n\nNamed arguments are (generally) preferred\n\nEasier to remember\nEasier to read\nSome functions have a lot of arguments\n\n\n\nmean(x = values, na.rm = TRUE) # by name\n\n\n\nHowever, it is common to match the first argument by position (especially when the first argument is the data)\n\nmean(values, na.rm = TRUE) # a mix of both"
  },
  {
    "objectID": "sessions/slides/functions.html#where-do-functions-come-from",
    "href": "sessions/slides/functions.html#where-do-functions-come-from",
    "title": "Functions in R",
    "section": "Where do functions come from?",
    "text": "Where do functions come from?\n\n\nBase R functions: built into R\n\n\nmean() # calculate mean\nseq()  # generate a sequence of values\n\n\n\n\n\nFrom additional packages\n\n\nPackages must be installed first\nCall a function from a package using packageName::functionName()\nLoad the package with library(packageName) and then use the function\n\n\n\n\n\n# use read_csv function from readr package\nreadr::read_csv()\n\n# or use library()\nlibrary(readr)\nread_csv()\n\n\n\n\n\n\nCustom functions:\n\nWrite your own functions and then use them in the code\n\n\n\n# custom function that prints input in a sentence\nmy_function &lt;- function(x) {\n  return(x + 5)\n}\nmy_function(5)"
  },
  {
    "objectID": "sessions/slides/functions.html#summary-1",
    "href": "sessions/slides/functions.html#summary-1",
    "title": "Functions in R",
    "section": "Summary",
    "text": "Summary\n\n\nFunctions take input in the form of (named) arguments, calculate something and return a result\nFunctions are called by their name, followed by parentheses: functionName(argument1 = value, argument2 = value, ...)\nFunctions from additional packages can be called in two ways:\n\npackageName::functionName()\nfirst load the package with library(packageName) then call the function anywhere in the script with functionName()\n\nCall ?functionName to open the help of a function"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#data-frames",
    "href": "sessions/slides/data-tibbles.html#data-frames",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Data frames",
    "text": "Data frames\nThe built-in data structure for tables in R is a data frame.\n\n\n\nVectors in R can’t represent data table where values are connected via rows\n\nData frames are one of the biggest and most important ideas in R, and one of the things that make R different from other programming languages.(H. Wickham, Advanced R)\n\n\n\n\n\n\n\ncity_name\npopulation_size\ncity_area\n\n\n\n\nIstanbul\n15100000\n2576\n\n\nMoscow\n12500000\n2561\n\n\nLondon\n9000000\n1572\n\n\nSaint Petersburg\n5400000\n1439\n\n\nBerlin\n3800000\n891\n\n\nMadrid\n3200000\n604\n\n\nKyiv\n3000000\n839\n\n\nRome\n2800000\n1285\n\n\nBucharest\n2200000\n228\n\n\nParis\n2100000\n105"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#data-frames-1",
    "href": "sessions/slides/data-tibbles.html#data-frames-1",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Data frames",
    "text": "Data frames\nA data frame is a named list of vectors of the same length.\n\n\n\n\nBasic properties of a data frame\n\nevery column is a vector\ncolumns have a header\n\nthis is the name of the vector in the list\n\nwithin one column, all values are of the same data type\nevery column has the same length"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#data-frames-2",
    "href": "sessions/slides/data-tibbles.html#data-frames-2",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Data frames",
    "text": "Data frames\nData frames are created with the function data.frame():\n\n\n\ncities &lt;- c(\n  \"Istanbul\", \"Moscow\", \"London\", \n  \"Saint Petersburg\", \"Berlin\",\"Madrid\",\n  \"Kyiv\", \"Rome\", \"Bucharest\",\"Paris\")\n\npopulation &lt;- c(\n  15.1e6, 12.5e6, 9e6, 5.4e6, 3.8e6,\n  3.2e6, 3e6, 2.8e6, 2.2e6, 2.1e6)\n\narea_km2 &lt;- c(2576, 2561, 1572, 1439, \n  891, 604, 839, 1285, 228, 105)\n\ncities_dataframe &lt;- data.frame(\n  city_name = cities,\n  population_size = population,\n  city_area = area_km2\n  )\n\n\n\n\n#&gt;           city_name population_size city_area\n#&gt; 1          Istanbul        15100000      2576\n#&gt; 2            Moscow        12500000      2561\n#&gt; 3            London         9000000      1572\n#&gt; 4  Saint Petersburg         5400000      1439\n#&gt; 5            Berlin         3800000       891\n#&gt; 6            Madrid         3200000       604\n#&gt; 7              Kyiv         3000000       839\n#&gt; 8              Rome         2800000      1285\n#&gt; 9         Bucharest         2200000       228\n#&gt; 10            Paris         2100000       105"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#tibbles",
    "href": "sessions/slides/data-tibbles.html#tibbles",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Tibbles",
    "text": "Tibbles\nTibbles are\n\na modern reimagining of the data frame. Tibbles are designed to be (as much as possible) drop-in replacements for data frames. (Wickham, Advanced R)\n\n\nHave a look at this book chapter for a full list of the differences between data frames and tibbles and the advantages of using tibbles.\n\n\n\n\n\n\nTibbles have the same basic properties as data frames (named list of vectors)\nEverything that you can do with data frames, you can do with tibbles"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#tibbles-1",
    "href": "sessions/slides/data-tibbles.html#tibbles-1",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Tibbles",
    "text": "Tibbles\n  Tibbles are a available from the tibble package.\n\n\nBefore we use tibbles, we need to install the package once using the function install.packages:\n\n# This has do be done only once (in the console, not in the script)\ninstall.packages(\"tibble\")\n\n\nThen, we need to load the package into our current R session using library:\n\n# This has to be done every time R restarts\n# Put it at the top of your script\nlibrary(tibble)"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#tibbles-2",
    "href": "sessions/slides/data-tibbles.html#tibbles-2",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Tibbles",
    "text": "Tibbles\nCreate a tibble using the tibble() function:\n\n\n\n\nlibrary(tibble) \n\ncities_tbl &lt;- tibble(\n  city_name = cities,\n  population_size = population,\n  city_area = area_km2\n)\n\n\n\n#&gt; # A tibble: 10 × 3\n#&gt;    city_name        population_size city_area\n#&gt;    &lt;chr&gt;                      &lt;dbl&gt;     &lt;dbl&gt;\n#&gt;  1 Istanbul                15100000      2576\n#&gt;  2 Moscow                  12500000      2561\n#&gt;  3 London                   9000000      1572\n#&gt;  4 Saint Petersburg         5400000      1439\n#&gt;  5 Berlin                   3800000       891\n#&gt;  6 Madrid                   3200000       604\n#&gt;  7 Kyiv                     3000000       839\n#&gt;  8 Rome                     2800000      1285\n#&gt;  9 Bucharest                2200000       228\n#&gt; 10 Paris                    2100000       105"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#exploring-tibbles-1",
    "href": "sessions/slides/data-tibbles.html#exploring-tibbles-1",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Exploring tibbles",
    "text": "Exploring tibbles\nHow many rows?\n\nnrow(cities_tbl)\n#&gt; [1] 10\n\n\nHow many columns?\n\nncol(cities_tbl)\n#&gt; [1] 3\n\n\n\nWhat are the column headers?\n\nnames(cities_tbl)\n#&gt; [1] \"city_name\"       \"population_size\" \"city_area\""
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#exploring-tibbles-2",
    "href": "sessions/slides/data-tibbles.html#exploring-tibbles-2",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Exploring tibbles",
    "text": "Exploring tibbles\nLook at the entire table in a separate window with view():\n\nview(cities_tbl)"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#exploring-tibbles-3",
    "href": "sessions/slides/data-tibbles.html#exploring-tibbles-3",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Exploring tibbles",
    "text": "Exploring tibbles\nGet a quick summary of all columns:\n\nsummary(cities_tbl)\n#&gt;   city_name         population_size      city_area     \n#&gt;  Length:10          Min.   : 2100000   Min.   : 105.0  \n#&gt;  Class :character   1st Qu.: 2850000   1st Qu.: 662.8  \n#&gt;  Mode  :character   Median : 3500000   Median :1088.0  \n#&gt;                     Mean   : 5910000   Mean   :1210.0  \n#&gt;                     3rd Qu.: 8100000   3rd Qu.:1538.8  \n#&gt;                     Max.   :15100000   Max.   :2576.0\n\n\nVery useful for checking if everything is ok with your research data"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#indexing-tibbles",
    "href": "sessions/slides/data-tibbles.html#indexing-tibbles",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Indexing tibbles",
    "text": "Indexing tibbles\nIndexing tibbles works similar to indexing vectors but with 2 dimensions instead of 1:\n\ntibble [ row_index, col_index or col_name ]\n\n\nMissing row_index or col_index means all rows or all columns respectively.\nIndexing a tibble using [] always returns another tibble."
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#indexing-tibbles-1",
    "href": "sessions/slides/data-tibbles.html#indexing-tibbles-1",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Indexing tibbles",
    "text": "Indexing tibbles\n\n# First row and first column\ncities_tbl[1, 1]\n#&gt; # A tibble: 1 × 1\n#&gt;   city_name\n#&gt;   &lt;chr&gt;    \n#&gt; 1 Istanbul\n\n\nThis is the same as\n\ncities_tbl[1, \"city_name\"]"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#indexing-tibbles-rows",
    "href": "sessions/slides/data-tibbles.html#indexing-tibbles-rows",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Indexing tibbles: rows",
    "text": "Indexing tibbles: rows\n\n# rows 1 & 5, all columns:\ncities_tbl[c(1, 5), ]\n#&gt; # A tibble: 2 × 3\n#&gt;   city_name population_size city_area\n#&gt;   &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;\n#&gt; 1 Istanbul         15100000      2576\n#&gt; 2 Berlin            3800000       891"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#indexing-tibbles-columns",
    "href": "sessions/slides/data-tibbles.html#indexing-tibbles-columns",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Indexing tibbles: columns",
    "text": "Indexing tibbles: columns\n\n# All rows, first 2 columns\ncities_tbl[ ,1:2] # same as cities_tbl[ , c(1, 2)]\n# same as\ncities_tbl[ ,c(\"city_name\", \"population_size\")]\n\n\n#&gt; # A tibble: 10 × 2\n#&gt;   city_name population_size\n#&gt;   &lt;chr&gt;               &lt;dbl&gt;\n#&gt; 1 Istanbul         15100000\n#&gt; 2 Moscow           12500000\n#&gt; 3 London            9000000\n#&gt; # ℹ 7 more rows"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#indexing-tibbles-columns-1",
    "href": "sessions/slides/data-tibbles.html#indexing-tibbles-columns-1",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Indexing tibbles: columns",
    "text": "Indexing tibbles: columns\nIndexing columns by name is usually preferred to indexing by position\n\ncities_tbl[ ,1:2] # okay\ncities_tbl[ ,c(\"city_name\", \"population_size\")] # better\n\n\nWhy?\n\nCode is much easier to read\nCode is more robust against\n\nchanges in column order\nmistakes in the code (e.g. typos)\n\n\n\n\ncities_tbl[ ,c(1,3)] # 3 instead of 2 -&gt; wrong but no error\ncities_tbl[ ,c(\"city_name\", \"popluation_size\")] # typo -&gt; wrong and error\n\n\n\n\n\n\n\n\n\nGeneral rule\n\n\nGood code produces errors when something unintended or wrong happens"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#tibbles-select-columns-with",
    "href": "sessions/slides/data-tibbles.html#tibbles-select-columns-with",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Tibbles: Select columns with $",
    "text": "Tibbles: Select columns with $\nSelect an entire column from a tibble using $ (this returns a vector instead of a tibble):\n\ncities_tbl$city_name\n#&gt;  [1] \"Istanbul\"         \"Moscow\"           \"London\"           \"Saint Petersburg\"\n#&gt;  [5] \"Berlin\"           \"Madrid\"           \"Kyiv\"             \"Rome\"            \n#&gt;  [9] \"Bucharest\"        \"Paris\""
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#adding-new-columns",
    "href": "sessions/slides/data-tibbles.html#adding-new-columns",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Adding new columns",
    "text": "Adding new columns\nNew columns can be added as vectors using the $ operator. The vectors need to have the same length as the tibble has rows.\n\n\n# add a country column\ncities_tbl$country &lt;- c(\n  \"Turkey\", \"Russia\", \"UK\", \"Russia\", \"Germany\", \"Spain\",\n  \"Ukraine\", \"Italy\", \"Romania\", \"France\"\n)\n\n\n#&gt; # A tibble: 10 × 4\n#&gt;    city_name        population_size city_area country\n#&gt;    &lt;chr&gt;                      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  \n#&gt;  1 Istanbul                15100000      2576 Turkey \n#&gt;  2 Moscow                  12500000      2561 Russia \n#&gt;  3 London                   9000000      1572 UK     \n#&gt;  4 Saint Petersburg         5400000      1439 Russia \n#&gt;  5 Berlin                   3800000       891 Germany\n#&gt;  6 Madrid                   3200000       604 Spain  \n#&gt;  7 Kyiv                     3000000       839 Ukraine\n#&gt;  8 Rome                     2800000      1285 Italy  \n#&gt;  9 Bucharest                2200000       228 Romania\n#&gt; 10 Paris                    2100000       105 France"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#summary-i",
    "href": "sessions/slides/data-tibbles.html#summary-i",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Summary I",
    "text": "Summary I\ndata frames and tibbles\n\n\ncan be used to represent tables in R\nare pretty similar, however tibbles are slightly conventient and modern\nare named lists of vectors of the same length\n\nevery column is a vector\ncolumns have a header which is the name of the vector in the list\nwithin one column, values are of same data type\nevery column has the same length\n\n\ntibbles\n\nto use tibbles, install the package once with install.packages(\"tibble\")\nput library(tibble) at the beginning of your script to load package"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#summary-ii",
    "href": "sessions/slides/data-tibbles.html#summary-ii",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Summary II",
    "text": "Summary II\nCreating tibbles and data frames\n\n# data frame\ndata.frame(\n  a = 1:3,\n  b = c(\"a\", \"b\", \"c\"),\n  c = c(TRUE, FALSE, FALSE) \n)\n# tibble\ntibble(\n  a = 1:3,\n  b = c(\"a\", \"b\", \"c\"),\n  c = c(TRUE, FALSE, FALSE) \n)\n# convert data frame to tibble\nas_tibble(df)"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#summary-iii",
    "href": "sessions/slides/data-tibbles.html#summary-iii",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Summary III",
    "text": "Summary III\nLooking at tibble structure\n\n# structure of tibble and data types of columns\nstr(tbl)\n# number of rows\nnrow(tbl)\n# number of columns\nncol(tbl)\n# column headers\nnames(tbl)\n# look at the data in a new window\ntibble::view(tbl)\n# summary of values from each column\nsummary(tbl)"
  },
  {
    "objectID": "sessions/slides/data-tibbles.html#summary-iv",
    "href": "sessions/slides/data-tibbles.html#summary-iv",
    "title": "Tables in R - Data frames and Tibbles",
    "section": "Summary IV",
    "text": "Summary IV\nIndexing tibbles and selecting columns\nReturn result as tibble:\n\n# rows and columns by position\ntbl[1:3, c(1, 3)]\ntbl[1:3, ] # all columns\ntbl[, 3] # column 3, all rows\ntbl[3] # same as above\n\n# columns by name\ntbl[, c(\"colA\", \"colB\")]\ntbl[c(\"colA\", \"colB\")]\n\nReturn result as vector:\n\ntbl$colA # select colA"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#organization",
    "href": "sessions/slides/bring-your-own-data.html#organization",
    "title": "Bring your own data",
    "section": "Organization",
    "text": "Organization\nSchedule of today\n\nNow - 14 (or 14.30 if you are enthusiastic still): Work on the data set(s)\n\nTake break(s) as best fits your needs\n\n14 (14.30) - 15: Short feedback round\n\nWhat did you find out about your data set? Plots, summaries, …\nWhich methods did you use?\nDid you learn something new?\nWas there something you struggled with?\n…\n\n15-16: Feedback, conclusion"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-1-what-makes-a-good-wine",
    "href": "sessions/slides/bring-your-own-data.html#data-set-1-what-makes-a-good-wine",
    "title": "Bring your own data",
    "section": "Data set 1: What makes a good wine?",
    "text": "Data set 1: What makes a good wine?\nPhysicochemical properties of wine and quality judgements\n\n\nError in loadNamespace(x): there is no package called 'EcoData'\n\n\n\n\nReference: P. Cortez, A. Cerdeira, F. Almeida, T. Matos and J. Reis. Modeling wine preferences by data mining from physicochemical properties. In Decision Support Systems, Elsevier, 47(4):547-553, 2009."
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-1-what-makes-a-good-wine-1",
    "href": "sessions/slides/bring-your-own-data.html#data-set-1-what-makes-a-good-wine-1",
    "title": "Bring your own data",
    "section": "Data set 1: What makes a good wine?",
    "text": "Data set 1: What makes a good wine?\n\n\nIdeas - know methods\n\nPlot of wine quality against chemical properties\nPlot of distribution of chemical properties\nSummary tables using dplyr\n\nIdeas - new methods\n\nCorrelation plots: How are the different wine properties correlated with each other?\nPCA: How are the wine properties related to each other?\n\n\n\n\n\nFrederik Vandaele - originally posted to Flickr as Château Pétrus, CC BY 2.0, https://commons.wikimedia.org/w/index.php?curid=5145286"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-1-what-makes-a-good-wine-2",
    "href": "sessions/slides/bring-your-own-data.html#data-set-1-what-makes-a-good-wine-2",
    "title": "Bring your own data",
    "section": "Data set 1: What makes a good wine?",
    "text": "Data set 1: What makes a good wine?\n\n\nHints\n\nTransform the quality column to a factor before plotting: use dplyr::mutate and as.factor() to tranform the column\nTry the janitor::clean_names() function\n\n\n\n\n\nFrederik Vandaele - originally posted to Flickr as Château Pétrus, CC BY 2.0, https://commons.wikimedia.org/w/index.php?curid=5145286"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-2-paralympic-games-from-1980-2016",
    "href": "sessions/slides/bring-your-own-data.html#data-set-2-paralympic-games-from-1980-2016",
    "title": "Bring your own data",
    "section": "Data set 2: Paralympic games from 1980-2016",
    "text": "Data set 2: Paralympic games from 1980-2016\nMost important variables:\n\n\n\nvariable\nclass\ndescription\n\n\n\n\ngender\ncharacter\nBinary gender\n\n\nevent\ncharacter\nEvent name\n\n\nmedal\ncharacter\nMedal type\n\n\nathlete\ncharacter\nAthlete name (LAST NAME first name\n\n\nabb\ncharacter\nCountry abbreviation\n\n\ncountry\ncharacter\nCountry name\n\n\ntype\ncharacter\nType of sport\n\n\nyear\ndouble\nyear of games\n\n\n\n\n\nSource: International Paralympic Committee (provided by tidytuesday)"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-2-paralympic-games-from-1980-2016-1",
    "href": "sessions/slides/bring-your-own-data.html#data-set-2-paralympic-games-from-1980-2016-1",
    "title": "Bring your own data",
    "section": "Data set 2: Paralympic games from 1980-2016",
    "text": "Data set 2: Paralympic games from 1980-2016\nGet the data:\n\nathletes &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-08-03/athletes.csv')\n\nIdeas - know methods\n\nCreate summaries of medal counts for different groups with dplyr\nDid the ratio of men/women winning medals change over time?\nWhich countries were the most successful ones? Does this differ between sports type?\n\nWhich types of sports accumulated the most medals?\n\nMake plots such as:\n\nAge distribution of athletes winning gold, silver and bronze\nCompare the total number of medals over the years between winter and summer Olympics"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-2-paralympic-games-from-1980-2016-2",
    "href": "sessions/slides/bring-your-own-data.html#data-set-2-paralympic-games-from-1980-2016-2",
    "title": "Bring your own data",
    "section": "Data set 2: Paralympic games from 1980-2016",
    "text": "Data set 2: Paralympic games from 1980-2016\nHints\n\nTo reduce complexity of the data, first filter only the athletes that won a medal (!is.na(medal))"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-3-crab-data-set",
    "href": "sessions/slides/bring-your-own-data.html#data-set-3-crab-data-set",
    "title": "Bring your own data",
    "section": "Data set 3: Crab data set",
    "text": "Data set 3: Crab data set\n\n\nAtlantic marsh fiddler crab (Minuca pugnax)\n\nCrab from Florida is expanding northward due to ocean warming\nData on 13 marshes across a range of latitude in the USA\nRecording of the size of of the crab\nRather small and good to handle\n\n\n\n\n\nImage by LTER under CC BY-SA 4.0\n\n\n\n\n\nSource: Johnson, D. 2019. Fiddler crab body size in salt marshes from Florida to Massachusetts, USA at PIE and VCR LTER and NOAA NERR sites during summer 2016. ver 1. Environmental Data Initiative."
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-3-crab-data-set-1",
    "href": "sessions/slides/bring-your-own-data.html#data-set-3-crab-data-set-1",
    "title": "Bring your own data",
    "section": "Data set 3: Crab data set",
    "text": "Data set 3: Crab data set\n\n\n        date latitude site  size air_temp air_temp_sd water_temp water_temp_sd\n1 2016-07-24       30  GTM 12.43   21.792       6.391     24.502         6.121\n2 2016-07-24       30  GTM 14.18   21.792       6.391     24.502         6.121\n3 2016-07-24       30  GTM 14.52   21.792       6.391     24.502         6.121\n4 2016-07-24       30  GTM 12.94   21.792       6.391     24.502         6.121\n5 2016-07-24       30  GTM 12.45   21.792       6.391     24.502         6.121\n6 2016-07-24       30  GTM 12.99   21.792       6.391     24.502         6.121\n                          name\n1 Guana Tolomoto Matanzas NERR\n2 Guana Tolomoto Matanzas NERR\n3 Guana Tolomoto Matanzas NERR\n4 Guana Tolomoto Matanzas NERR\n5 Guana Tolomoto Matanzas NERR\n6 Guana Tolomoto Matanzas NERR\n\n\n\n\nSource: Johnson, D. 2019. Fiddler crab body size in salt marshes from Florida to Massachusetts, USA at PIE and VCR LTER and NOAA NERR sites during summer 2016. ver 1. Environmental Data Initiative."
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-3-crab-data-set-2",
    "href": "sessions/slides/bring-your-own-data.html#data-set-3-crab-data-set-2",
    "title": "Bring your own data",
    "section": "Data set 3: Crab data set",
    "text": "Data set 3: Crab data set\n\n\nIdeas - known methods\n\nExplore Bergmann’s rule (organisms are large in higher latitudes)\nt-tests to compare size between locations\nPlot relationship between latitude and size\nPlot distributions of variables\n\n\n\n\n\nImage by LTER under CC BY-SA 4.0\n\n\n\n\n\nSource: Johnson, D. 2019. Fiddler crab body size in salt marshes from Florida to Massachusetts, USA at PIE and VCR LTER and NOAA NERR sites during summer 2016. ver 1. Environmental Data Initiative."
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-4-ice-cover-and-temperature",
    "href": "sessions/slides/bring-your-own-data.html#data-set-4-ice-cover-and-temperature",
    "title": "Bring your own data",
    "section": "Data set 4: Ice cover and temperature",
    "text": "Data set 4: Ice cover and temperature\n\n\nTemperature and ice duration on lakes since 19th century\n\n2 data sets with measurements of\n\nice start, end and duration on 2 lakes in Wisconsin\ndaily air temperature since 1870\n\nExplore the effect of climate change on ice cover\n\n\n\n\n\nImage by LTER under CC BY-SA 4.0\n\n\n\n\n\nSource ice data: Magnuson, J.J., S.R. Carpenter, and E.H. Stanley. 2021. North Temperate Lakes LTER: Ice Duration - Madison Lakes Area 1853 - current ver 35. Environmental Data Initiative.\nSource temperature data: Anderson, L. and D. Robertson. 2020. Madison Wisconsin Daily Meteorological Data 1869 - current ver 32. Environmental Data Initiative."
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-4-ice-cover-and-temperature-1",
    "href": "sessions/slides/bring-your-own-data.html#data-set-4-ice-cover-and-temperature-1",
    "title": "Bring your own data",
    "section": "Data set 4: Ice cover and temperature",
    "text": "Data set 4: Ice cover and temperature\nIce data:\n\n\n        lakeid     ice_on    ice_off ice_duration year\n1 Lake Mendota       &lt;NA&gt; 1853-04-05           NA 1852\n2 Lake Mendota 1853-12-27       &lt;NA&gt;           NA 1853\n3 Lake Mendota 1855-12-18 1856-04-14          118 1855\n4 Lake Mendota 1856-12-06 1857-05-06          151 1856\n5 Lake Mendota 1857-11-25 1858-03-26          121 1857\n6 Lake Mendota 1858-12-08 1859-03-14           96 1858\n\n\nTemperature data:\n\n\n  sampledate year ave_air_temp_adjusted\n1 1870-06-05 1870                  20.0\n2 1870-06-06 1870                  18.3\n3 1870-06-07 1870                  17.5\n4 1870-06-09 1870                  13.3\n5 1870-06-10 1870                  13.9\n6 1870-06-11 1870                  15.0"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-4-ice-cover-and-temperature-2",
    "href": "sessions/slides/bring-your-own-data.html#data-set-4-ice-cover-and-temperature-2",
    "title": "Bring your own data",
    "section": "Data set 4: Ice cover and temperature",
    "text": "Data set 4: Ice cover and temperature\n\n\nIdeas - known methods\n\nHow did ice cover duration change over the years?\nHow did air temperature change over the years?\n\nSummarize mean annual temperature or mean temperature in winter\n\nHow do ice duration on the lakes correlate with temperature (e.g. with mean winter temperature)\n\n\n\n\n\nImage by LTER under CC BY-SA 4.0"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-4-ice-cover-and-temperature-3",
    "href": "sessions/slides/bring-your-own-data.html#data-set-4-ice-cover-and-temperature-3",
    "title": "Bring your own data",
    "section": "Data set 4: Ice cover and temperature",
    "text": "Data set 4: Ice cover and temperature\nHints\n\nFor some plots it might make sense to summarize annual means first\nUse dplyr::left_join to combined the tables with annual mean temperature and ice duration\n\nHave a look at the last slides of the dplyr session or look at the help\nAsk me if you need help with this"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-5-rnaseq-data",
    "href": "sessions/slides/bring-your-own-data.html#data-set-5-rnaseq-data",
    "title": "Bring your own data",
    "section": "Data set 5: RNAseq data",
    "text": "Data set 5: RNAseq data\n\nData from FU et al. 2015, Nature Cell Biology\nData found via Tutorial on heat maps using this data\n3 csv files:\n\nheatmap_genes.csv: A list of the names of interesting genes to look at (Genes used in Figure 6b in paper)\nDE_results.csv: Gene expression in luminal cells in pregnant versus lactating mice\n\nlogFC, AveExpr, t, p-value\nAlso contains non-significantly expressed genes\n\nnormalized_counts: Normalized counts for genes for the different samples"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-5-rnaseq-data-1",
    "href": "sessions/slides/bring-your-own-data.html#data-set-5-rnaseq-data-1",
    "title": "Bring your own data",
    "section": "Data set 5: RNAseq data",
    "text": "Data set 5: RNAseq data\n\n\nIdeas:\n\nCreate a heatmap of the top 20 most significant genes (see plot in the tutorial)\nCreate a heatmap of the interesting genes (see Fig. 6 in the paper)\nCreate a volcano plot of the data similar to the one here"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-5-rnaseq-data-2",
    "href": "sessions/slides/bring-your-own-data.html#data-set-5-rnaseq-data-2",
    "title": "Bring your own data",
    "section": "Data set 5: RNAseq data",
    "text": "Data set 5: RNAseq data"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-5-rnaseq-data-3",
    "href": "sessions/slides/bring-your-own-data.html#data-set-5-rnaseq-data-3",
    "title": "Bring your own data",
    "section": "Data set 5: RNAseq data",
    "text": "Data set 5: RNAseq data\nSome tips:\nData cleaning:\n\nRead in the data and then use the janitor::clean_names function to make the column headers nicer\nJoin DE_results and normalized_counts by their shared columns\nUse select to remove columns you don’t need for analysis to get a better overview\nFilter only significant genes (tutorial) defines them as p_value &lt; 0.01 & abs(logFC) &gt; 0.58)"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#data-set-5-rnaseq-data-4",
    "href": "sessions/slides/bring-your-own-data.html#data-set-5-rnaseq-data-4",
    "title": "Bring your own data",
    "section": "Data set 5: RNAseq data",
    "text": "Data set 5: RNAseq data\nSome tips:\nData analysis:\n\nHeatmap with ggplot or with pheatmap::pheatmap()\n\npheatmap takes a matrix as input (use as_matrix on tibble to transform)\n\nscale the counts -&gt; have a look at the scale function\n\npheatmap can scale but with ggplot you have to scale before plotting"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#new-methods-correlation-plots",
    "href": "sessions/slides/bring-your-own-data.html#new-methods-correlation-plots",
    "title": "Bring your own data",
    "section": "New methods: Correlation plots",
    "text": "New methods: Correlation plots"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#new-methods-correlation-plots-1",
    "href": "sessions/slides/bring-your-own-data.html#new-methods-correlation-plots-1",
    "title": "Bring your own data",
    "section": "New methods: Correlation plots",
    "text": "New methods: Correlation plots"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#new-methods-pcas",
    "href": "sessions/slides/bring-your-own-data.html#new-methods-pcas",
    "title": "Bring your own data",
    "section": "New methods: PCAS",
    "text": "New methods: PCAS"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#new-methods-correlation-plots-and-pcas",
    "href": "sessions/slides/bring-your-own-data.html#new-methods-correlation-plots-and-pcas",
    "title": "Bring your own data",
    "section": "New methods: Correlation plots and PCAS",
    "text": "New methods: Correlation plots and PCAS\n\ncorrplot package for correlation plots\nfactoextra package for PCA visualization\nTutorial for PCAs in R, PCA tutorial for penguins\nCorrelations and PCAs do not work with NA values: use tidyr::drop_na() to remove all NA values from the data first\nThese plots work for: penguins, wine, piecrab dataset"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#some-general-tips",
    "href": "sessions/slides/bring-your-own-data.html#some-general-tips",
    "title": "Bring your own data",
    "section": "Some general tips",
    "text": "Some general tips\n\n\nFirst make a plan:\n\nWhat do you want to achieve and what are the steps?\nTry to think in technical terms\nStart with something small, e.g. reading in the data and bringing it into the right format.\nIf you want, stop by in general to discuss your plan or write me in the chat\n\nGoogle\nIf you get stuck, ask in the chat or stop by in General\nHave a look at the package cheat sheets"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#sharing",
    "href": "sessions/slides/bring-your-own-data.html#sharing",
    "title": "Bring your own data",
    "section": "Sharing",
    "text": "Sharing\nIn 1-2 mins:\n\nWhat was the highlight of your analysis?\n\nYour favorite plot\nSome cool code\nA problem that you finally solved\nSomething new you learned\n\nWhat was difficult?\nIf you want: Share a screenshot in the chat or share your screen"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#feedback",
    "href": "sessions/slides/bring-your-own-data.html#feedback",
    "title": "Bring your own data",
    "section": "Feedback",
    "text": "Feedback\nPlease take 10 mins to complete the feedback survey for the Graduate center (don’t use Internet Explorer)\nhttps://votingo.cedis.fu-berlin.de/PCNLP3"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#feedback-1",
    "href": "sessions/slides/bring-your-own-data.html#feedback-1",
    "title": "Bring your own data",
    "section": "Feedback",
    "text": "Feedback\n\nAny other feedback or comments from your side?"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#conclusion",
    "href": "sessions/slides/bring-your-own-data.html#conclusion",
    "title": "Bring your own data",
    "section": "Conclusion",
    "text": "Conclusion\n\nWe learned a lot of stuff!"
  },
  {
    "objectID": "sessions/slides/bring-your-own-data.html#conclusion-1",
    "href": "sessions/slides/bring-your-own-data.html#conclusion-1",
    "title": "Bring your own data",
    "section": "Conclusion",
    "text": "Conclusion\nHow to continue from here?\n\n\n\nLearning by doing!\nHave a look at some online ressoures, I recommend the R for Data Science book by Hadley Wickham\nIf you like plotting: Consider participating in the tidytuesday\nFU statistical consulting for questions regarding statistical methods\nR Consulting by me\nTools and Tips lecture\n\n\n\n\n\nArtwork by Allison Horst"
  },
  {
    "objectID": "sessions/slides/00_organization.html#im-using-a-lot-for",
    "href": "sessions/slides/00_organization.html#im-using-a-lot-for",
    "title": "Introduction to Data Analysis with R",
    "section": "I’m using  a lot for …",
    "text": "I’m using  a lot for …\n… data analysis\n… ecological modelling\n… writing documents/websites/presentations\n…. workflow automation\n…"
  },
  {
    "objectID": "sessions/slides/00_organization.html#who-are-you",
    "href": "sessions/slides/00_organization.html#who-are-you",
    "title": "Introduction to Data Analysis with R",
    "section": "Who are you?",
    "text": "Who are you?"
  },
  {
    "objectID": "sessions/slides/00_organization.html#who-are-you-1",
    "href": "sessions/slides/00_organization.html#who-are-you-1",
    "title": "Introduction to Data Analysis with R",
    "section": "Who are you?",
    "text": "Who are you?"
  },
  {
    "objectID": "sessions/slides/00_organization.html#who-are-you-2",
    "href": "sessions/slides/00_organization.html#who-are-you-2",
    "title": "Introduction to Data Analysis with R",
    "section": "Who are you?",
    "text": "Who are you?"
  },
  {
    "objectID": "sessions/slides/00_organization.html#workshop-topics",
    "href": "sessions/slides/00_organization.html#workshop-topics",
    "title": "Introduction to Data Analysis with R",
    "section": "Workshop topics",
    "text": "Workshop topics\n\n\n\nImage adapted from Wickham & Grolemund: R for Data Science\n\n\n\nDay1 Introduction to R and RStudio and data import\n\n\nDay2 Data transformation and visualization with the tidyverse\n\n\nDay3 Cleaning data, statistical tests, good practice and AI tools\n\n\nDay 4 Bring your own data\n\n\nDay 5 Bring your own data + Q&A (optional)"
  },
  {
    "objectID": "sessions/slides/00_organization.html#schedule-and-organization",
    "href": "sessions/slides/00_organization.html#schedule-and-organization",
    "title": "Introduction to Data Analysis with R",
    "section": "Schedule and Organization",
    "text": "Schedule and Organization\n📅 03.03.2025 - 04.03.2025 from 🕘 9 a.m. - 4 p.m.  📅 10.03.2025 - 11.03.2025 from 🕘 9 a.m. - 4 p.m.  📅 17.03.2025 🕘 9 a.m. - 12 a.m.  🍜 ~ 12 a.m. - 1 p.m., ☕ in between  📌 We will meet in the General meeting on Webex\n\n\n1. Input sessions\n\nPresentation and demonstration of a topic + examples\n\n\n\n2. Tasks\n\nSolve them in small groups\n\n\n\n3. Joint discussion of tasks & questions"
  },
  {
    "objectID": "sessions/slides/00_organization.html#material",
    "href": "sessions/slides/00_organization.html#material",
    "title": "Introduction to Data Analysis with R",
    "section": "Material",
    "text": "Material\n\nAll material can be found on the workshop’s website\n\nPresentations, Tasks, Solutions, Additional resources\n\nYou can download slides and R Scripts from there\nWebsite will stay online after the workshop"
  },
  {
    "objectID": "sessions/slides/00_organization.html#bring-your-own-data",
    "href": "sessions/slides/00_organization.html#bring-your-own-data",
    "title": "Introduction to Data Analysis with R",
    "section": "Bring your own data",
    "text": "Bring your own data\nOn the last workshop day, you can work with your own research data. I will also provide some real life data sets from different topics.\n\nLearning by doing\n\n\nGet started using R for your own analyses\nUse any of the methods from the course or try new things, …\nPresent/discuss your results, questions and problems at the end of the day\n\n\n\nAdd your name and some details on what you plan to do in this joint table"
  },
  {
    "objectID": "sessions/slides/00_organization.html#before-we-get-started-i",
    "href": "sessions/slides/00_organization.html#before-we-get-started-i",
    "title": "Introduction to Data Analysis with R",
    "section": "Before we get started I",
    "text": "Before we get started I\n\nHelp each other if possible\nHave an eye on the chat and on the time\nAll questions and comments are welcome\nIf possible, please turn on your camera\nFeedback is welcome (Evaluation at the end of the workshop)"
  },
  {
    "objectID": "sessions/slides/00_organization.html#before-we-get-started-ii",
    "href": "sessions/slides/00_organization.html#before-we-get-started-ii",
    "title": "Introduction to Data Analysis with R",
    "section": "Before we get started II",
    "text": "Before we get started II\nDid anyone have problems installing R and RStudio?\n\n Download and install R from https://cran.r-project.org\n Download and install RStudio from https://www.posit.co"
  },
  {
    "objectID": "sessions/slides/00_organization.html#before-we-get-started-iii",
    "href": "sessions/slides/00_organization.html#before-we-get-started-iii",
    "title": "Introduction to Data Analysis with R",
    "section": "Before we get started III",
    "text": "Before we get started III\nHow to use Webex teams\n\nGeneral channel for our joint meetings and chat\nGroups 1-4 for solving tasks jointly\n\nGroup spaces have their own chat and meetings\nAsk questions in the chat, share screenshots, share your screen and talk"
  },
  {
    "objectID": "sessions/11_good-practice.html",
    "href": "sessions/11_good-practice.html",
    "title": "Good coding practice",
    "section": "",
    "text": "Slides in full screen     Download PDF slides"
  },
  {
    "objectID": "sessions/11_good-practice.html#good-practice-summary",
    "href": "sessions/11_good-practice.html#good-practice-summary",
    "title": "Good coding practice",
    "section": "1 Good practice summary",
    "text": "1 Good practice summary\nIn the following you get some tips to style your code for the purpose of good practice, readability and standardization. This is not mandatory for your R code to work but it is nice to have.\n\n1.1 General tip\nHave a look at all the options you have available if you go to Tools -&gt; Global Options. You can click through different sections on the right (the top ones are probably most interesting to you) and for every section there are again some tabs on top that show different options.\nI will show you some useful options below as well.\n\n\n1.2 White space\nUse whitespace around operators, =, &lt;-, …\n\n# works but not so nice\na&lt;-3\nmean(x=c(1,2,3))\n2==2\n\n# better\na &lt;- 3\nmean(x = c(1,2,3))\n2 == 2\n\nTip:\nYou can turn on information about recommended white space in RStudio. Then RStudio will let you know in the side bar, if you are missing white space that is recommended. This information will look like this:\n\nYou can turn on this option by going to Tools -&gt; Global Options -&gt; Code -&gt; Diagnostics and put a checkmark for Provide R style diagnostics\n\n\n\n1.3 Line width\nLimit the width of a line of code and start a new line regularly. A standard is 80 characters.\nThis for example means:\n\nIn ggplot always start a new line for each layer (after the +)\nIf you have long comments, split them into multiple lines\nIf you have functions with a lot of arguments, put each argument in its own line\n\nThere is a setting in RStudio that helps you with this. It puts a very thin, vertical line into each of your scripts to show you where you should better start a new line. To turn this on go to Tools -&gt; Global Options -&gt; Code -&gt; Display, put a checkmark for Show margin\n\nWhy? Screens are always different and if you write very long lines you have to scroll right to read all your code.\nA ggplot example:\n\n# Don't do this:\nggplot(iris, aes(x = species, y = Petal.Width)) + geom_boxplot()\n\n# Do this\nggplot(iris, aes(x = species, y = Petal.Width)) + \n  geom_boxplot()\n\n# Or even this (depending on how long your lines are - here it's a bit\n# overkill):\nggplot(\n  iris,\n  aes(x = species, y = Petal.Width)\n) +\n  geom_boxplot()\n\n\n\n1.4 Use the styler package\nFind the webpage with documentation of the package here.\nThe styler package lets you style sections of your code automatically according to the tidyverse styleguide.\nTo use the package, you need to install it:\n\ninstall.packages(\"styler\")\n\nAfter you did that you have some new styling options available. You might have to restart RStudio first.\nNow on top of RStudio, look for Addins, there should now be a section for Styler that looks like this:\n\nThe two interesting options that you have are:\n\nStyle selection: If you highlighted a piece of code (it always has to be an entire section of code, not just a small part of it) and you click on this, the section will be automatically styled for you.\nStyle active file: If you click this, the R file that you have currently open will be styled automatically for you.\n\nI you want, you can also add a keyboard shortcut to RStudio, so you don’t have to click on the Addin buttons but you can style your code with a keyboard shortcut. To to this, go to Tools -&gt; Modify Keyboard Shortcuts. Then on top filter for style and and you can select the styler add in that you want to assign a keyboard shortcut to. Just type in the shortcut you want to use and you can start using the shortcut. My keyboard shortcuts e.g. look like this:"
  },
  {
    "objectID": "sessions/09_tidyr.html",
    "href": "sessions/09_tidyr.html",
    "title": "Tidy data with tidyr",
    "section": "",
    "text": "Slides in full screen     Download PDF slides"
  },
  {
    "objectID": "sessions/09_tidyr.html#get-started",
    "href": "sessions/09_tidyr.html#get-started",
    "title": "Tidy data with tidyr",
    "section": "1.1 Get started",
    "text": "1.1 Get started\nBefore you start, make sure to load the tidyverse package.\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "sessions/09_tidyr.html#lets-tidy-some-data-sets",
    "href": "sessions/09_tidyr.html#lets-tidy-some-data-sets",
    "title": "Tidy data with tidyr",
    "section": "1.2 Let’s tidy some data sets",
    "text": "1.2 Let’s tidy some data sets\nFirst, complete both tasks before you move to the extras.\n1. relig_incom\nHave a look at the relig_income data set that is included in tidyverse package. The data set contains the results of a survey asking people about their religion and income category.\nWhat is not tidy about this data set? Can you fix it?\n2. billboard\nHave a look at the billboard data set that is included in the tidyverse package. The data set contains information about the chart rank of songs in the year 2000.\nWhat is not tidy about this data set? Can you fix it?"
  },
  {
    "objectID": "sessions/09_tidyr.html#extras",
    "href": "sessions/09_tidyr.html#extras",
    "title": "Tidy data with tidyr",
    "section": "1.3 Extras",
    "text": "1.3 Extras\n\nCheck out the values_drop_na and names_prefix argument of pivot_longer. What does it do and how can you use it with the billboard data?\nThis is a bit tricky: How would you have to change the penguins table if you wanted to make such a plot:\n\n\n\n\n\n\n\n\n\n\nHint: First use dplyr and only select the columns that you need for the plot. Then think about how to use tidyr to transform the data so it’s ready for ggplot"
  },
  {
    "objectID": "sessions/07_ggplot.html",
    "href": "sessions/07_ggplot.html",
    "title": "Data visualization with ggplot2",
    "section": "",
    "text": "Slides in full screen     Download PDF slides"
  },
  {
    "objectID": "sessions/07_ggplot.html#get-started",
    "href": "sessions/07_ggplot.html#get-started",
    "title": "Data visualization with ggplot2",
    "section": "1.1 Get started",
    "text": "1.1 Get started\nA helpful resource to consult for this task can be the ggplot2 cheatsheet.\nRemember to put library(tidyverse) (or library(ggplot2)) on top of your script to access the ggplot functions.\nTo practice plotting with the ggplot2 package, we will use a data set on 3 species of penguins on islands in Antarctica.\n\n\n\n\n\nArtwork by Allison Horst\n\n\n\n\nThe data is available from the palmerpenguins package. To get it, you have to:\n\nInstall the package with install.packages(\"palmerpenguins\")\nLoad the package at the beginning of your script with library(palmerpenguins)\n\nThe data set is called penguins:\n\nThe data set is available after you loaded the package\nJust type penguins in the console and you should see the penguins tibble\nFind a description of the variables in the help page ?penguins\n\nTake a moment to get familiar with the data set and its variables."
  },
  {
    "objectID": "sessions/07_ggplot.html#exploratory-plots",
    "href": "sessions/07_ggplot.html#exploratory-plots",
    "title": "Data visualization with ggplot2",
    "section": "1.2 Exploratory plots",
    "text": "1.2 Exploratory plots\nExplore the data set and it’s variables with ggplot. Below, you find some suggestions for plots. You can start with the plot type your are most interested in and then continue from there. You don’t have to finish all the plots If you have your own ideas for interesting plots with the penguin data set, feel free to deviate from the tasks.\nIn this exploratory section, don’t worry about the beauty of your plots. This task is about exploring the data and testing different visualization options.\n\n1.2.1 Relationship between bill length and bill depth (scatterplot)\nWhat is the relationship between bill length and bill depth?\n\nCreate a scatterplot with bill length on the x-axis and bill depth on the y-axis\nCan you add a regression line?\nAdd species as color aesthetic. Does your interpretation of the data change?\n\nWhat is the difference between adding color as a global aesthetic or as a local aesthetic of the point layer?\n\nAdd species as shape aesthetic to distinguish the species\n\n\n\n1.2.2 Difference in flipper length between species (boxplot)\nIs there a difference in flipper length between the species?\n\nCreate a boxplot of the flipper length (y-axis) for the different species (x-axis)\nTry adding notches to the boxplots\nExtra: Add a layer with geom_point(). Try setting position = position_jitter() as argument in the point layer. What does it do?\n\n\n\n1.2.3 Differences between body mass of male and female penguins (boxplot)\nAre male penguins heavier than female penguins? And is this different between the 3 species?\n\nCreate a boxplot with body mass on the y axis and sex on the x axis\nAdd the difference between penguin species to this plot. Try the different options ggplot offers\n\nSpecies as color aesthetic\nSpecies as fill aesthetic\nSpecies as facet using facet_wrap\n\nExtra: What happens if you use geom_violin instead of geom_boxplot? Can you combine both geoms in one plot?\n\n\n\n1.2.4 Distribution of flipper length between species (histogram)\nMake a histogram of the the flipper length separated by species.\nTry different methods of separating the species (color or facet).\nCompare stacked and overlapping histograms.\n\n\n1.2.5 Penguin flipper length by species and sex (heatmap)\nCreate a heat map that shows:\n\nThe categories sex and species on x- and y-axis\nThe flipper length as color"
  },
  {
    "objectID": "sessions/07_ggplot.html#beautify-the-plots",
    "href": "sessions/07_ggplot.html#beautify-the-plots",
    "title": "Data visualization with ggplot2",
    "section": "1.3 Beautify the plots",
    "text": "1.3 Beautify the plots\nFirst, choose one of the tasks 1.3.1 or 1.3.2, then do task 1.4 on saving plots. If you still have time, you can come back to the task you didn’t do.\nBut also here, if you have other ideas, feel free to deviate from the tasks.\n\n1.3.1 Beautify the plots from Task 1\nTake a plot you did in the previous task and make it look nicer.\nHere’s a list of ideas:\n\nAdd a theme layer\nCustomize the theme, e.g.\n\nChange the position of the legend\nMake the axis titles bold\n\nChange the color/fill scale of the plot\n\nUse scale_color_manual or scale_fill_manual\nTry scale_color_viridis_d() or scale_fill_viridis_d() with different options\nTry a color scale from the paletteer package\n\nFirst you have to install the package, then have a look at the available palettes\n\n\nChange the labels of the x- and y-axis and add a title to the plot\nMake the points transparent, give them a different shape, …\n\n\n\n1.3.2 Can you reproduce this plot?\nTake a look at this plot:\n\n\n\n\n\nVisualization from the palmerpenguins package\n\n\n\n\nIt is similar to the one from Task 1.3.1 but more beautiful. Can you reproduce this plot?\nThe colors that are used are:\n\npenguin_cols &lt;- c(\"darkorange\", \"purple\", \"cyan4\")"
  },
  {
    "objectID": "sessions/07_ggplot.html#save-one-of-the-plots-on-your-machine",
    "href": "sessions/07_ggplot.html#save-one-of-the-plots-on-your-machine",
    "title": "Data visualization with ggplot2",
    "section": "1.4 Save one of the plots on your machine",
    "text": "1.4 Save one of the plots on your machine\nSave one of the plots you produced in a variable and then use ggsave to save the plot on your machine. Save the plot in a dedicated plot directory in your RStudio project.\nNote: Make sure the path where you save the image exists. If you e.g. want to save in img/, then you first have to create the img folder in your project directory. For this you can use the Files pane of RStudio."
  },
  {
    "objectID": "sessions/07_ggplot.html#references",
    "href": "sessions/07_ggplot.html#references",
    "title": "Data visualization with ggplot2",
    "section": "1.5 References",
    "text": "1.5 References\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi: 10.5281/zenodo.3960218."
  },
  {
    "objectID": "sessions/05_readr.html",
    "href": "sessions/05_readr.html",
    "title": "Import and Export Data with readr",
    "section": "",
    "text": "Slides in full screen     Download PDF slides"
  },
  {
    "objectID": "sessions/05_readr.html#get-started-with-readr-and-the-tidyverse",
    "href": "sessions/05_readr.html#get-started-with-readr-and-the-tidyverse",
    "title": "Import and Export Data with readr",
    "section": "1.1 Get started with readr and the tidyverse",
    "text": "1.1 Get started with readr and the tidyverse\nBefore you start, make sure to install the tidyverse packages by calling\n\ninstall.packages(\"tidyverse\")\n\nThis will install readr along with other tidyverse packages.\nRemember to put library(tidyverse) (or library(readr)) on top of your script to access the readr functions.\n\n1.1.1 Write a tibble to disk\nLet’s use the animals tibble from the previous task and write it into the data folder in our project.\nBefore writing the tibble\n\nCreate a data sub-folder in your RStudio project (if you don’t have one yet)\n\nHint: You can do that from within RStudio by using the New Folder button in the Files pane\n\n\nNow write the animals tibble into that /data sub-directory as animals.csv using a comma separator.\nCheck if the file was written into the correct folder."
  },
  {
    "objectID": "sessions/05_readr.html#read-data-into-r",
    "href": "sessions/05_readr.html#read-data-into-r",
    "title": "Import and Export Data with readr",
    "section": "1.2 Read data into R",
    "text": "1.2 Read data into R\nNow, try to read the data set back into R using the appropriate read_* function.\nMake sure that you save the table you read in in a new variable to have it available for later use.\n\n\n\n\n\n\nTip\n\n\n\nDon’t type the input path of the table to read. Instead, make the “” to start writing the path and then us the tab key on your keyboard to auto-complete."
  },
  {
    "objectID": "sessions/05_readr.html#extra",
    "href": "sessions/05_readr.html#extra",
    "title": "Import and Export Data with readr",
    "section": "1.3 Extra",
    "text": "1.3 Extra\n\nTry reading some tables (xlsx, csv, txt, …) that you have on your machine into R\n\nFirst copy the table into the data/ folder in your project, then use the appropriate function to read in the data\nIdeally, you use some of your research data, so you can see what are the difficulties there. Alternatively, you can use any kind of table even if not related to research.\n\nDownload the csv or excel file using the buttons below. The files have metadata on top and a messy header. The excel file has the added difficulty, that the actual data is not in the first sheet but in the second one. Try reading it into R correctly and clean the column names using the janitor::clean_names function. It might help to look at the data first to decide how to read it correctly.\n\n\n\n\n\n Download csv\n\n\n\n\n\n Download xlsx\n\n\n:::"
  },
  {
    "objectID": "sessions/03_functions.html",
    "href": "sessions/03_functions.html",
    "title": "Functions in R",
    "section": "",
    "text": "Slides in full screen     Download PDF slides"
  },
  {
    "objectID": "sessions/01_intro-rstudio.html",
    "href": "sessions/01_intro-rstudio.html",
    "title": "Introduction to RStudio",
    "section": "",
    "text": "Slides in full screen     Download PDF slides"
  },
  {
    "objectID": "sessions/01_intro-rstudio.html#change-settings",
    "href": "sessions/01_intro-rstudio.html#change-settings",
    "title": "Introduction to RStudio",
    "section": "1.1 Change settings",
    "text": "1.1 Change settings\nBefore you get started, there is an important setting that you should change in RStudio. By default, RStudio will save the workspace of your current session in an .Rdata file. This would allow you to start the next session exactly where you left it by loading the .Rdata file.\nThis is not a good default. We always want to start R from a clean slate to ensure reproducibility and minimize error potential.\nIn RStudio go to Tools -&gt; Global Options -&gt; General and\n\nRemove the check mark for “Restore .RData into workspace at startup”\nNever “Save workspace to .RData on exit”"
  },
  {
    "objectID": "sessions/01_intro-rstudio.html#create-an-rstudio-project",
    "href": "sessions/01_intro-rstudio.html#create-an-rstudio-project",
    "title": "Introduction to RStudio",
    "section": "1.2 Create an RStudio project",
    "text": "1.2 Create an RStudio project\nCreate an RStudio project for all the scripts, notes, data, etc. from this workshop:\n\nCreate a project in a directory of your choice following the instructions from the slides\nUse the Files pane in RStudio to create a basic folder structure in your project which will be filled with files in the next days:\n\n\nFolder data/ for all data files\nFolder R/ for all R scripts\nFolder docs/ for other documents (e.g. lecture notes or slides)\nYou can always change the structure of your project later\n\nYou can add files to your project either directly in RStudio, or in the file explorer of your operating system."
  },
  {
    "objectID": "sessions/01_intro-rstudio.html#add-an-r-script-to-the-project",
    "href": "sessions/01_intro-rstudio.html#add-an-r-script-to-the-project",
    "title": "Introduction to RStudio",
    "section": "1.3 Add an R script to the project",
    "text": "1.3 Add an R script to the project\n\nCreate a new R script and save it in the R/ folder of your project\nCopy and paste the code from below into your script\n\nDon’t worry if you don’t understand the code yet, we will learn all this later\n\nRun the code in the script line by line. Try both, running code using the Run button (in the top right corner of your script pane) and the keyboard shortcut Ctrl/Cmd + Enter\n\nFor each line that you run, observe what is happening to the different panes (console, environment, …) in RStudio. Can you explain what is happening?\n\n\n\n# Look at the first lines of the iris dataset\nhead(iris)\n# What is the iris dataset -&gt; Call the help\n?iris\n# How many rows and columns does the data set have?\nrownum &lt;- nrow(iris)\ncolnum &lt;- ncol(iris)\nprint(paste0(\"The iris dataset has \", rownum, \" rows and \", colnum, \" columns.\"))\n# Some summary statistics on the iris data set\nsummary(iris)\n\n# create a plot\nplot(iris$Petal.Length, iris$Petal.Width,\n  xlab = \"Petal Length\",\n  ylab = \"Petal Width\",\n  main = \"Petal Width vs Petal Length\",\n  pch = 20,\n  col = ifelse(iris$Species == \"setosa\", \"coral1\",\n    ifelse(iris$Species == \"virginica\", \"cyan4\",\n      ifelse(iris$Species == \"versicolor\",\n        \"darkgoldenrod2\", \"grey\"\n      )\n    )\n  )\n)\n# add a legend\nlegend(\"bottomright\", c(\"setosa\", \"virginica\", \"versicolor\"),\n  col = c(\"coral1\", \"cyan4\", \"darkgoldenrod2\"), pch = 20\n)"
  },
  {
    "objectID": "sessions/01_intro-rstudio.html#extras",
    "href": "sessions/01_intro-rstudio.html#extras",
    "title": "Introduction to RStudio",
    "section": "1.4 Extras",
    "text": "1.4 Extras\n\nGo back to the Global options and check out the Appearance section. If you want you can change the look of RStudio there"
  },
  {
    "objectID": "packages.html",
    "href": "packages.html",
    "title": "List of R packages",
    "section": "",
    "text": "In the table below, you can find a list of R packages with a short description and some links for further reading. The package selection is based on my personal experience and packages that I regularly use and like. The list is in no way complete. If you know a useful package that I missed, let me know and I can add it to the list.\n\n\n\n\n\nPackage\nKeywords\nDescription\nLinks\n\n\n\n\ntidyverse\ntidyverse, data analysis\nCollection of packages designed for data analysis. The packages are designed to work smoothly together\nwebsite, learning resources\n\n\ndplyr\ntidyverse, data manipulation\nPart of the tidyverse. Package for data manipulation: filtering, selecting and arranging data, summarizing data (e.g. calculating summaries by group), …\nwebsite, cheatsheet\n\n\nreadr\ntidyverse, data import and export\nPart of the tidyverse. Package for data import and export (csv, txt, other delimited files)\nwebsite, cheatsheet\n\n\nreadxl\ndata import and export\nFunctions to import and export excel files from multiple sheets into R as tibbles\npackage documentation\n\n\nggplot2\ntidyverse, data visualization\nPart of the tidyverse. Data visualization\nwebsite, cheatsheet\n\n\npatchwork\ndata visualization\nEasy syntax for combining multiple plots into one. Easy control of plot layout, common legends, plot annotations and labels\nwebsite with different articles to get started\n\n\ntidyr\ntidyverse, data cleaning\nPart of the tidyverse. Transforming tables to bring them in a tidy format for further analysis\nwebsite, cheatsheet\n\n\nstringr\ntidyverse, string manipulation\nPart of the tidyverse. Toolkit for working with strings. String manipulation: extracting strings, substrings, find patterns in strings, replace patterns in strings, …\nwebsite, cheatsheet\n\n\nlubridate\ndates and times\nMakes it easy to work with dates and times: convert strings to date time objects, calculate with times (intervals, periods, …) and plot time series\ncheatsheet, website\n\n\nforcats\nfactors, categorical variables\nPart of the tidyverse. Working with factors (categorical data types). Renaming, reordering, summarizing categories, …\nwebsite, cheatsheet\n\n\ndata.table\nfast data analysis, big data\nExtremely fast and memory efficient data transofmrations in R. The package uses a different syntax from base R and the tidyverse. However, data.tables are also data frames so you can use them either with data.table syntax or with base R/tidyverse syntax\nwebsite, cheatsheet\n\n\ncollapse\nfast data analysis, big data\nPackag for fast data manipulation. Well integrated with dplyr and data.table. Provides fast functions for data transformation, aggregation, linear models, statistical functions, grouping, … Have a look at it if you have large data sets and your data operations take a long time\npackage on github, cheatsheet\n\n\nggsci\ncolors, data visualization\nProvides additional color scales to ggplot\nwebsite\n\n\nggthemes\ncolors, themes, data visualizations\nProvides additional color scales and themes to ggplot\ntheme gallery\n\n\nusethis\nutility, workflow\nProvides useful utility functions around R and Rstudio workflows: project setup, git, github, licenses, package development, …\nwebsite\n\n\nstyler\nutility\nAutomatically format your code according to the tidyverse style guide. This ensures that your coding style follows good practice\nwebsite\n\n\nhere\nutility\nMakes file referencing and relative paths easy\nwebsite\n\n\nsjPlot\nstatistics, data visualizations\nCollection of plotting and table output functions for data visualization of statistical results\nwebsite"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to R for Data Analysis",
    "section": "",
    "text": "Workshop sessions 📅 03.03.2025 - 04.03.2025 🕘 9 a.m. - 4 p.m.  📅 10.03.2025 - 11.03.2025 🕘 9 a.m. - 4 p.m.  📅 17.03.2025 from 🕘 9 a.m. - 12 a.m.  📍 Online on Webex \n\n\nWorkshop description\nThe workshop’s main goal is to equip you with essential R skills for analyzing your own research data, covering data processing and visualization. After the workshop you are equipped to confidently advance your R skills for your specific research needs.\n\nOutline\nIn 4 Workshop days we will cover the following topics:\n\nDay 1: Introduction to R and R Studio, Good programming practice, Reading data into R\nDay 2: Data visualization with the ggplot package, data wrangling with dplyr\nDay 3: Data cleaning with tidyr, statistical tests, AI Tools\nDay 4 & 5: Bring your own research data (or get some real-life data from me)\n\n\n\nConcept\nTo learn programming, it is essential to practice writing code yourself. Therefore, every input session will be followed by practical exercises. On day 4, you can apply the methods you learned to your own research data or a provided real-life data set.\nThe course will be in English and will be in an online format.\n\n\n\nFor whom is this workshop?\nThis workshop is for beginners without prior experience in R or any other programming language. You can still participate if you already know other programming languages though.\n\n\nThe instructor\nI’m a scientific programmer at Freie Universität specializing in theoretical ecology. R is integral to my daily work, and I enjoy sharing my expertise. I’ve previously taught R statistics courses for biology master’s and PhD students.\nFeel free to reach out with any course-related questions via selina.baldauf@fu-berlin.de."
  },
  {
    "objectID": "online_resources.html",
    "href": "online_resources.html",
    "title": "Additional online resources",
    "section": "",
    "text": "List of RStudio cheatsheets: You can find a list of all the cheat sheets that RStudio provides there. Below, I listed the individual cheat sheets that are interesting for our course.\nRStudio cheatsheet: Explains the most important buttons, options, keyboard shortcuts, etc that you have in RStudio.\nThe modern dive book explains how to get started with R and data analysis with the tidyverse.\nThe R for Data Science book by Hadley Wickham is a very good book to start with. It is specifically about data analysis using the tidyverse packages.\nThe Big book of R is a book that list all books about R that are freely available only. The book is sorted by topics and can be used to find resources to learn a specific topic.\nA curated collection of R resources. Not just books but also websites, tutorials, help channels, …\nThe Tidyverse style guide provides information on how to style your code according to good practice.\nBook What they forgot to teach you about R by J. Bryan and J. Hesters contains a lot of very nice good practice tips for R code and R projects."
  },
  {
    "objectID": "online_resources.html#general",
    "href": "online_resources.html#general",
    "title": "Additional online resources",
    "section": "",
    "text": "List of RStudio cheatsheets: You can find a list of all the cheat sheets that RStudio provides there. Below, I listed the individual cheat sheets that are interesting for our course.\nRStudio cheatsheet: Explains the most important buttons, options, keyboard shortcuts, etc that you have in RStudio.\nThe modern dive book explains how to get started with R and data analysis with the tidyverse.\nThe R for Data Science book by Hadley Wickham is a very good book to start with. It is specifically about data analysis using the tidyverse packages.\nThe Big book of R is a book that list all books about R that are freely available only. The book is sorted by topics and can be used to find resources to learn a specific topic.\nA curated collection of R resources. Not just books but also websites, tutorials, help channels, …\nThe Tidyverse style guide provides information on how to style your code according to good practice.\nBook What they forgot to teach you about R by J. Bryan and J. Hesters contains a lot of very nice good practice tips for R code and R projects."
  },
  {
    "objectID": "online_resources.html#tidyverse",
    "href": "online_resources.html#tidyverse",
    "title": "Additional online resources",
    "section": "Tidyverse",
    "text": "Tidyverse\n\nThe tidyverse website has links to all tidyverse packages which all have very good examples and use cases. These websites are an excelent point to get started with a package.\n\n\nreadr\n\ndata import cheatsheet\n\n\n\nggplot\n\nggplot cheatsheet offers an overview of all possibilities of ggplot\nCurated list of ggplot resources: Really great list with links to ggplot tutorials (sorted by topic and difficulty), books, additional packages to make your plots look nicer, …\nIn the R graph gallery you can browse through hundreds of different types of plots and find code to reproduce them.\nA great ggplot tutorial by Cédric Scherer with many different plot types\nA collection of ggplot extension packages for all kinds of different plots\n\n\n\ndplyr\n\ndplyr cheatsheet\n\n\n\ntidyr\n\ndata import cheatsheet"
  },
  {
    "objectID": "online_resources.html#linear-models",
    "href": "online_resources.html#linear-models",
    "title": "Additional online resources",
    "section": "Linear models",
    "text": "Linear models\n\nanova with R: explanation why an anova is also a linear model"
  },
  {
    "objectID": "preparations.html",
    "href": "preparations.html",
    "title": "Course preparations",
    "section": "",
    "text": "In order to have a smooth workshop start, you need to prepare a few technical things so we can jump right into coding.\nIf you don’t have R and RStudio installed, follow Section 1. If you need to update R and RStudio, follow Section 2."
  },
  {
    "objectID": "preparations.html#download-and-install-r",
    "href": "preparations.html#download-and-install-r",
    "title": "Course preparations",
    "section": "1.1 Download and install R",
    "text": "1.1 Download and install R\n\nVisit the CRAN website.\nClick on the link for your operating system in the top section “Download and Install R”.\nFollow the link to “install R for the first time”.\nDownload the installer and run it, leaving the default options selected during the installation process."
  },
  {
    "objectID": "preparations.html#download-and-install-rstudio-for-your-operating-system",
    "href": "preparations.html#download-and-install-rstudio-for-your-operating-system",
    "title": "Course preparations",
    "section": "1.2 Download and install RStudio for your operating system",
    "text": "1.2 Download and install RStudio for your operating system\n\nVisit the Posit website.\nClick the “Download RStudio Desktop” button. The button should already specify your operating system (If not, you can scroll down on the website and select the installer for your respective system).\nDownload the installer and run it, following the instructions."
  },
  {
    "objectID": "preparations.html#test-the-installation",
    "href": "preparations.html#test-the-installation",
    "title": "Course preparations",
    "section": "1.3 Test the installation",
    "text": "1.3 Test the installation\nIf both R and RStudio are installed, open RStudio. When you open up RStudio for the first time, it will prompt you to select your installation of R. By default, this should be the newest version of R that you just installed. After RStudio is opened, check the console (the window on the bottom left where your cursor is and where you can see a &gt; sign) and try to type a calculation (e.g. 2 + 2) and hit Enter to execute it. If R is installed correctly, you should see the result of your calculation printed to the console."
  },
  {
    "objectID": "preparations.html#update-rstudio",
    "href": "preparations.html#update-rstudio",
    "title": "Course preparations",
    "section": "2.1 Update RStudio",
    "text": "2.1 Update RStudio\nOpen RStudio and go to “Help -&gt; Check for Updates” on top. RStudio will tell you, if there is a newer version available or not. If you already use the most current version, you are all set for the workshop. If not, follow the instructions that RStudio gives you and update your version of RStudio."
  },
  {
    "objectID": "preparations.html#update-r",
    "href": "preparations.html#update-r",
    "title": "Course preparations",
    "section": "2.2 Update R",
    "text": "2.2 Update R\n\nOpen RStudio and check the version number in the console pane (bottom left, see pink highlights in the screen shot).\n\n\nI will be using R version 4.4.2. If your version is below 4.3.3, you should update but in general it’s always a good idea to stay up to date to get newest features and improvements.\n\nDownload and install the latest version of R (see Step 1 for instructions).\nIn RStudio, go to “Tools -&gt; Global Options -&gt; General” and click “Change R version”.\nSelect the newest installed version of R.\n\n\n\nRestart RStudio and verify the updated version in the console."
  },
  {
    "objectID": "sessions/02_intro-r.html",
    "href": "sessions/02_intro-r.html",
    "title": "Introduction to R",
    "section": "",
    "text": "Slides in full screen     Download PDF slides"
  },
  {
    "objectID": "sessions/02_intro-r.html#extras",
    "href": "sessions/02_intro-r.html#extras",
    "title": "Introduction to R",
    "section": "1.1 Extras",
    "text": "1.1 Extras\n\nRound the ratio vector to 4 decimal places with the round function\n\nType ?round into the console to open the help of the round function\n\nWhich animal has the smallest brain to body weight ratio?\n\nHint: have a look at the min function\n\nAdd the following three animals to the data vectors\n\n\nspecies_new &lt;- c(\"Eagle\", \"Snail\", \"Lion\")\nbrainwt_kg_new &lt;- c(0.0004, NA, 0.5)\nbodywt_kg_new &lt;- c(18, 0.01, 550)\n\nNow calculate the mean brain weight again. Can you explain what happens? Can you fix it?\n\nHint: have a look at ?mean"
  },
  {
    "objectID": "sessions/04_data-tibbles.html",
    "href": "sessions/04_data-tibbles.html",
    "title": "Tables in R - Data frames and tibbles",
    "section": "",
    "text": "Slides in full screen     Download PDF slides"
  },
  {
    "objectID": "sessions/04_data-tibbles.html#get-started-with-tibbles",
    "href": "sessions/04_data-tibbles.html#get-started-with-tibbles",
    "title": "Tables in R - Data frames and tibbles",
    "section": "1.1 Get started with tibbles",
    "text": "1.1 Get started with tibbles\nBefore you start the task:\n\nInstall the tibble package by calling install.packages(\"tibble\") in the console.\n\nYou don’t need to put this command in your script as you only need to call it once to install the package\n\nOpen your script for the task and put library(tibble) on top\nExecute this line and the tibble package is loaded into your R session"
  },
  {
    "objectID": "sessions/04_data-tibbles.html#create-a-tibble",
    "href": "sessions/04_data-tibbles.html#create-a-tibble",
    "title": "Tables in R - Data frames and tibbles",
    "section": "1.2 Create a tibble",
    "text": "1.2 Create a tibble\nUse the vectors species, brainwt_kg, bodywt_kg from before and combine them in a tibble."
  },
  {
    "objectID": "sessions/04_data-tibbles.html#explore-the-tibble",
    "href": "sessions/04_data-tibbles.html#explore-the-tibble",
    "title": "Tables in R - Data frames and tibbles",
    "section": "1.3 Explore the tibble",
    "text": "1.3 Explore the tibble\nExplore the tibble you created with the different functions that you learned in the presentation. You can for example try\n\nview() and explore what you can do in the view window that opens: searching, filtering, sorting columns\nsummary()\n…"
  },
  {
    "objectID": "sessions/04_data-tibbles.html#index-filter-and-select",
    "href": "sessions/04_data-tibbles.html#index-filter-and-select",
    "title": "Tables in R - Data frames and tibbles",
    "section": "1.4 Index, filter and select",
    "text": "1.4 Index, filter and select\nNow let’s try some indexing on the data.\n\nRows 1, 5, and 7 and the columns species and bodywt_kg\nFilter rows 1 to 10, all columns\nSelect the column bodywt_kg as a vector"
  },
  {
    "objectID": "sessions/04_data-tibbles.html#extra",
    "href": "sessions/04_data-tibbles.html#extra",
    "title": "Tables in R - Data frames and tibbles",
    "section": "1.5 Extra",
    "text": "1.5 Extra\n\nSelect the last column of the last row without using the row and column index (so don’t use any numbers in this command)\nCalculate the mean of the bodywt_kg column and save it in a variable\nAdd a new column to the data called ratio_body_brain with the ratio of the columns bodywt_kg and brainwt_kg"
  },
  {
    "objectID": "sessions/06_common-errors.html",
    "href": "sessions/06_common-errors.html",
    "title": "Common errors",
    "section": "",
    "text": "Slides in full screen     Download PDF slides"
  },
  {
    "objectID": "sessions/08_dplyr.html",
    "href": "sessions/08_dplyr.html",
    "title": "Data transformation with dplyr",
    "section": "",
    "text": "Slides in full screen     Download PDF slides"
  },
  {
    "objectID": "sessions/08_dplyr.html#get-started",
    "href": "sessions/08_dplyr.html#get-started",
    "title": "Data transformation with dplyr",
    "section": "1.1 Get started",
    "text": "1.1 Get started\nA helpful resource for to consult for this task can be the dplyr cheatsheet.\nBefore you start, make sure to load the tidyverse package and the palmerpenguins package.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "sessions/08_dplyr.html#data-transformation-with-dplyr",
    "href": "sessions/08_dplyr.html#data-transformation-with-dplyr",
    "title": "Data transformation with dplyr",
    "section": "1.2 Data transformation with dplyr",
    "text": "1.2 Data transformation with dplyr\nIn the following, you find a lot of different data transformation tasks. First, do 1-2 from each category before you do the remaining ones. You don’t have to finish all the tasks but make sure you covered each category. Generally, the first tasks from a category are easier than the last tasks of a category.\nFind all penguins that …\n\n… have a bill length between 40 and 45 mm.\n… for which we know the sex (sex is not NA).\n… which are of the species Adelie or Gentoo.\n… lived on the island Dream in the year 2007. How many of them were from each of the 3 species?\n\nCount …\n\n… the number of penguins on each island.\n… the number of penguins of each species on each island.\n\nSelect …\n\n… only the variables species, sex and year\n… only columns that contain measurements in mm\n\nAdd a column …\n\n… with the ratio of bill length to bill depth\n… with abbreviations for the species (Adelie = A, Gentoo = G, Chinstrap = C).\n\nCalculate …\n\n… mean flipper length and body mass for the 3 species and male and female penguins separately\n… Can you do the same but remove the penguins for which we don’t know the sex first?"
  },
  {
    "objectID": "sessions/08_dplyr.html#extras",
    "href": "sessions/08_dplyr.html#extras",
    "title": "Data transformation with dplyr",
    "section": "1.3 Extras",
    "text": "1.3 Extras\n\nMake a boxplot of penguin body mass with sex on the x-axis and facets for the different species. Can you remove the penguins with missing values for sex first?\nMake a scatterplot with the ratio of bill length to bill depth on the y axis and flipper length on the x axis? Can you distinguish the point between male and female penguins and remove penguins with unknown sex before making the plot?"
  },
  {
    "objectID": "sessions/10_tests.html",
    "href": "sessions/10_tests.html",
    "title": "Statistical tests",
    "section": "",
    "text": "Slides in full screen     Download PDF slides"
  },
  {
    "objectID": "sessions/10_tests.html#get-started",
    "href": "sessions/10_tests.html#get-started",
    "title": "Statistical tests",
    "section": "1.1 Get started",
    "text": "1.1 Get started\nWe will again use the penguins tibble from the palmerpenguins package for this task.\nSo before you get started with the exercise, make sure that you load the palmerpenguins package and the tidyverse\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)"
  },
  {
    "objectID": "sessions/10_tests.html#compare-the-flipper-length-of-penguins-using-statistical-tests",
    "href": "sessions/10_tests.html#compare-the-flipper-length-of-penguins-using-statistical-tests",
    "title": "Statistical tests",
    "section": "1.2 Compare the flipper length of penguins using statistical tests",
    "text": "1.2 Compare the flipper length of penguins using statistical tests\nQuestion: Does the mean flipper length differ between the 3 penguin species?\nDo separate comparisons for\n\nGentoo vs. Adelie\nGentoo vs. Chinstrap\nAdelie vs. Chinstrap\n\nBefore you start, create a subset of each species as a vector.\nFor this, you can use the $ operator:\n\nadelie &lt;- filter(penguins, species == \"Adelie\")$flipper_length_mm\nchinstrap &lt;- filter(penguins, species == \"Chinstrap\")$flipper_length_mm\ngentoo &lt;- filter(penguins, species == \"Gentoo\")$flipper_length_mm\n\nFollow the decision tree for statistical tests:"
  },
  {
    "objectID": "sessions/10_tests.html#extra",
    "href": "sessions/10_tests.html#extra",
    "title": "Statistical tests",
    "section": "1.3 Extra",
    "text": "1.3 Extra\nCreate a plot to show the results of your tests. Choose one of the following:\n\nCreate a boxplot with notches to visually compare differences in flipper length between species\nMake a plot showing the mean and standard error of the mean as pointrange or point with errorbars\n\nAdd a geom_signif() layer to the plot you just created to indicate your test results"
  },
  {
    "objectID": "sessions/12_AI-tools.html",
    "href": "sessions/12_AI-tools.html",
    "title": "AI tools for R programming",
    "section": "",
    "text": "Slides in full screen     Download PDF slides\nBelow you find a few links to further resources on AI tools for R programming. This is only a selection from the vast amount of tools available."
  },
  {
    "objectID": "sessions/12_AI-tools.html#links",
    "href": "sessions/12_AI-tools.html#links",
    "title": "AI tools for R programming",
    "section": "1 Links",
    "text": "1 Links\n\n1.1 Browser-based AI-Tools\n\nRtutor: Browser-based tool where you can ask questions about R and data analysis. You can also upload a dataset and ask the AI to analyse it. You can then download the corresponding R script or Rmardown report.\n\nThere is also a corresponding R package that you can install to use locally. But for this you need to have your own OpenAI API key, so it is a bit more work to set up.\n\nJulius AI: Browser-based tool where you can ask questions about your data. You can upload a dataset and ask questions about it. The AI will then give you answers and visualizations. You can also download the corresponding R script.\n\nWorks great but costs ~20€ per month, but you can get a 50% discount if you are a student or academic\n\n\n\n\n1.2 Integrated AI-Tools\n\nGitHub Copilot: One of the most widespread integrated tool. Gives you inline code suggestions. Great to code faster, write better code, debug, etc.\n\nStep-by-step guide on how to get Copilot for free for Visual Studio Code or RStudio.\nGitHub Copilot Docs: Useful information and guides on how to use Copilot\nPrivacy FAQ of GitHub Copilot\nPrompt engineering with GH Copilot to get better results\n\nchattr package to chat with different LLMs (e.g. GitHub Copilot, GPT-4, …) from inside R Studio"
  },
  {
    "objectID": "sessions/slides/AI-tools.html#motivation",
    "href": "sessions/slides/AI-tools.html#motivation",
    "title": "AI Tools for R",
    "section": "Motivation",
    "text": "Motivation\n\n\n\nAI tools assist programmers with\n\nCoding\nDebugging\nLearning\n…\n\nHigher productivity and efficiency\nMore motivation\nBut careful: You still need to understand what’s going on!"
  },
  {
    "objectID": "sessions/slides/AI-tools.html#overview-of-tools",
    "href": "sessions/slides/AI-tools.html#overview-of-tools",
    "title": "AI Tools for R",
    "section": "Overview of tools",
    "text": "Overview of tools\n\n\nBrowser-based chat bots (ChatGPT, Bard, …)\n\nGeneral-purpose\n\n\n\n\n\n\nData-analysis tools (Julius AI, RTutor, …)\n\nUpload data and ask questions about it\nCan also execute code\nChat with your data\n\n\n\n\n\n\n\nIntegrated AI tools (GitHub Copilot, Codium AI, …)\n\nIntegrated directly in programming environment\nReal-time suggestions, chat, debugging, …\n\n\n\n\n\nFind the tools that best fit your workflow!"
  },
  {
    "objectID": "sessions/slides/AI-tools.html#r-tutor",
    "href": "sessions/slides/AI-tools.html#r-tutor",
    "title": "AI Tools for R",
    "section": "R Tutor",
    "text": "R Tutor\n\n\n\n\nhttps://rtutor.ai/\nFree browser tool\nUpload data and ask questions about it\nUse the demo data"
  },
  {
    "objectID": "sessions/slides/AI-tools.html#julius-ai",
    "href": "sessions/slides/AI-tools.html#julius-ai",
    "title": "AI Tools for R",
    "section": "Julius AI",
    "text": "Julius AI\n\n\n\n\nhttps://julius.ai/\nTry for free\nBasic plan ~20€ per months (-50% academic discount)\nUpload data and ask questions about it"
  },
  {
    "objectID": "sessions/slides/AI-tools.html#github-copilot",
    "href": "sessions/slides/AI-tools.html#github-copilot",
    "title": "AI Tools for R",
    "section": "Github Copilot",
    "text": "Github Copilot\n\nhttps://github.com/features/copilot\nModel based on GPT-4 and OpenAI’s Codex\n\nSpecifically trained on source code\n\nBasic idea: Integrate directly into R Studio (or other IDEs)\nWorks best for well-represented languages (Python, JS, …)"
  },
  {
    "objectID": "sessions/slides/AI-tools.html#how-to-get-github-copilot",
    "href": "sessions/slides/AI-tools.html#how-to-get-github-copilot",
    "title": "AI Tools for R",
    "section": "How to get GitHub Copilot",
    "text": "How to get GitHub Copilot\nSee this website for step-by-step guide and more information.\nIt’s really easy, but you need:\n\nGitHub Account\nActive GH Copilot subscription (10$ per month)\n\nGet it for free as an academic with an educational account\n\nIDE that supports Copilot\n\nFull support: Visual Studio (Code), Vim, Neovim, JetBrains IDEs (e.g. PyCharm)\nLimited support: RStudio, ?"
  },
  {
    "objectID": "sessions/slides/AI-tools.html#gh-copilot-inline-code-suggestions",
    "href": "sessions/slides/AI-tools.html#gh-copilot-inline-code-suggestions",
    "title": "AI Tools for R",
    "section": "GH Copilot: Inline code suggestions",
    "text": "GH Copilot: Inline code suggestions\n\n\n\nCopilot tries to predict what you want to do next\nSuggestions are based on the context\n\nPrevious code\nComments\nVariable and function names\n…"
  },
  {
    "objectID": "sessions/slides/AI-tools.html#get-better-suggestions",
    "href": "sessions/slides/AI-tools.html#get-better-suggestions",
    "title": "AI Tools for R",
    "section": "Get better suggestions",
    "text": "Get better suggestions\n\nProvide context\n\nOpen other files\nAdd top level comments explaining the purpose of the script\nName variables and functions properly\nCopy-paste sample code and delete it later\n\nBe consistent\n\n“Garbage in, garbage out”\nHave a nice and consistent coding style\n\n\n\nNice side effect of using Copilot: More good-practice coding"
  },
  {
    "objectID": "sessions/slides/AI-tools.html#chat-with-gh-copilot-in-r-studio",
    "href": "sessions/slides/AI-tools.html#chat-with-gh-copilot-in-r-studio",
    "title": "AI Tools for R",
    "section": "Chat with GH copilot in R Studio",
    "text": "Chat with GH copilot in R Studio\n\nAvailable through the https://ellmer.tidyverse.org/ package\nChat with LLMs in the sidebar\nNeeds an API and some setting up"
  },
  {
    "objectID": "sessions/slides/AI-tools.html#concerns-to-consider",
    "href": "sessions/slides/AI-tools.html#concerns-to-consider",
    "title": "AI Tools for R",
    "section": "Concerns to consider",
    "text": "Concerns to consider\n\nPrivacy\n\nChose whether your prompts and suggestions will be used by Github (Github -&gt; Seetings -&gt; Copilot -&gt; Policies)\nCheck privacy guidelines before you upload data\n\nPlagiarism\n\nBlock suggestions matching public code (Github -&gt; Seetings -&gt; Copilot -&gt; Policies)\n\nEthical concerns\n\nFor-profit tool trained on open-source\n\nEnvironmental concerns\n\nWater and energy usage"
  },
  {
    "objectID": "sessions/slides/AI-tools.html#usage-guidelines",
    "href": "sessions/slides/AI-tools.html#usage-guidelines",
    "title": "AI Tools for R",
    "section": "Usage guidelines",
    "text": "Usage guidelines\n\nNo definite guidelines, but see examples listed here\nResponsibility\n\nYou are responsible for your scientific output\nStay critical, double-check\n\nTransparency\n\nMake clear for which tasks you used which AI\n\nKnow relevant guidelines\n\nJournals\nYour university\n\nStill understand what is happening!"
  },
  {
    "objectID": "sessions/slides/common-errors.html#debugging",
    "href": "sessions/slides/common-errors.html#debugging",
    "title": "Common errors and how to fix them",
    "section": "Debugging",
    "text": "Debugging\nDebugging can be annoying and we can’t avoid it, but …\n\n\n\n… it’s an effective learning experience (I actually learned the most from debugging my code)\n… it will get easier over time\n… there are some debugging techniques to decrease the time in stages 2-7\n… if nothing helps, there are great people all over the internet willing to help\n\n\n\n\n\nArtwork by Allison Horst"
  },
  {
    "objectID": "sessions/slides/common-errors.html#syntax-errors",
    "href": "sessions/slides/common-errors.html#syntax-errors",
    "title": "Common errors and how to fix them",
    "section": "Syntax errors",
    "text": "Syntax errors\nExample\nmean(c(1,2,3)na.rm=TRUE)\n\nHow to fix\n\nlook for missing commas, misspelled arguments, …\nread the error message\nthe RStudio syntax checker warns you before you run code with syntax errors\n\nlook for    next to line numbers in your script"
  },
  {
    "objectID": "sessions/slides/common-errors.html#error-could-not-find-function",
    "href": "sessions/slides/common-errors.html#error-could-not-find-function",
    "title": "Common errors and how to fix them",
    "section": "Error: could not find function",
    "text": "Error: could not find function\nExamples\n\nselect(penguins, bill_length_mm)\n#&gt; Error in select(penguins, bill_length_mm): could not find function \"select\"\nlenght(1:10)\n#&gt; Error in lenght(1:10): could not find function \"lenght\"\n\n\n\nHow to fix\n“Could not find function” errors have two main reasons:\n\nYou forgot to load the package that the function belongs to\n\n\nload the package using library() or call the function with packageName::functionName()\n\n\nYou have a typo in your function call (e.g. lenght() instead of length())"
  },
  {
    "objectID": "sessions/slides/common-errors.html#error-object-not-found",
    "href": "sessions/slides/common-errors.html#error-object-not-found",
    "title": "Common errors and how to fix them",
    "section": "Error: object not found",
    "text": "Error: object not found\nExample\n\nvariable_A\n#&gt; Error: object 'variable_A' not found\n\n\n\nHow to fix\n\nyou are trying to access an object that does not exist\n\ntypos in variable name (variable name is variableA but you try to access variable_A)\nforgot to put quotes around string: print(hello)  looks for a variable named hello but instead you wanted to print the string print(\"hello\")"
  },
  {
    "objectID": "sessions/slides/common-errors.html#r-crashes",
    "href": "sessions/slides/common-errors.html#r-crashes",
    "title": "Common errors and how to fix them",
    "section": "R crashes",
    "text": "R crashes\nSometimes R crashes completely and you see this:\n\n\nHow to fix it\n\nThere is no fix but to start a new session\nMake sure to save your scripts regularly!"
  },
  {
    "objectID": "sessions/slides/common-errors.html#console-prints",
    "href": "sessions/slides/common-errors.html#console-prints",
    "title": "Common errors and how to fix them",
    "section": "Console prints +",
    "text": "Console prints +\nR is not running code anymore and the console only prints + if you try to execute a command.\n\n\nHow to fix it\n\nFirst, go to the console and hit Escape. Then you should see the &gt; sign instead of + again.\nLikely you forgot to close a bracket somewhere. Go to your script and check where this happened (look for   ) next to line numers"
  },
  {
    "objectID": "sessions/slides/common-errors.html#warnings",
    "href": "sessions/slides/common-errors.html#warnings",
    "title": "Common errors and how to fix them",
    "section": "Warnings",
    "text": "Warnings\nR can give you warnings for many reasons, e.g.\n\nyou have NA values in your data and try to plot them\nthe function you are using is deprecated\nthe package you are using was built for another version of R\n\n\nWarnings are no errors and can sometimes be ignored but:\n\nmake sure to read and understand warnings\nonly ignore them if you know that that’s okay, otherwise fix the underlying issue"
  },
  {
    "objectID": "sessions/slides/common-errors.html#troubleshoot-r-step-by-step",
    "href": "sessions/slides/common-errors.html#troubleshoot-r-step-by-step",
    "title": "Common errors and how to fix them",
    "section": "Troubleshoot R: Step by step",
    "text": "Troubleshoot R: Step by step\nOften, you don’t need to do all the steps but a systemmatic approach to bug fixing is very helpful.\n\nCarefully read the error message and try to fix it\nIs it any of the errors you learned about just now?\nIf the error is about data or other variables: look at the structure using str()\nIf the error is about a function: Read the documentation using ?functionName: Did you use the function correctly? Did you forget an argument?\nLook for answers online\nAsk others for help"
  },
  {
    "objectID": "sessions/slides/common-errors.html#look-for-answers-online",
    "href": "sessions/slides/common-errors.html#look-for-answers-online",
    "title": "Common errors and how to fix them",
    "section": "Look for answers online",
    "text": "Look for answers online\n\nSearch with keywords R + package name + Error message/Warning If you don’t know how do do something try searching R + package name + What you want to do, e.g.\n\n“R ggplot change axis title”\n“R sort vector”\n\nUsually you can pick any of the top search results, but I recommend results from Stack Overflow\nAlways search in English to get more results\n\n\n\n\n\n\n\n\nTip\n\n\nChange language of R messages to English with Sys.setenv(LANGUAGE='en')"
  },
  {
    "objectID": "sessions/slides/common-errors.html#ask-others-for-help",
    "href": "sessions/slides/common-errors.html#ask-others-for-help",
    "title": "Common errors and how to fix them",
    "section": "Ask others for help",
    "text": "Ask others for help\nThere are plenty of places where you can ask for help online. Some common and good options are:\n\nAsk a question on Stack Overflow\nAsk in the R Discord server\n\nusually fast answers\nbut: you need a Discord account\n\n\n\nBut: You have to make sure that before, you tried all the other 5 steps.\n\n\nTo ask questions online, you have to learn how to ask a clear question including a reproducible example\nLook here for more info on how to ask a good question about R"
  },
  {
    "objectID": "sessions/slides/dplyr.html#data-transformation",
    "href": "sessions/slides/dplyr.html#data-transformation",
    "title": "Data transformation with dplyr",
    "section": "Data transformation",
    "text": "Data transformation\nData transformation is an important step in understanding the data and preparing it for further analysis.\n\n\nWe can use the tidyverse package dplyr for this."
  },
  {
    "objectID": "sessions/slides/dplyr.html#data-transformation-1",
    "href": "sessions/slides/dplyr.html#data-transformation-1",
    "title": "Data transformation with dplyr",
    "section": "Data transformation",
    "text": "Data transformation\nWith dplyr we can (among other things)\n\n\nFilter data to analyse only a part of it\nCreate new variables\nSummarize data\nCombine multiple tables\nRename variables\nReorder observations or variables\n\n\n\nTo get started load the package dplyr:\n\nlibrary(dplyr)\n# or\nlibrary(tidyverse)"
  },
  {
    "objectID": "sessions/slides/dplyr.html#dplyr-basic-vocabulary",
    "href": "sessions/slides/dplyr.html#dplyr-basic-vocabulary",
    "title": "Data transformation with dplyr",
    "section": "Dplyr basic vocabulary",
    "text": "Dplyr basic vocabulary\nAll of the dplyr functions work similarly: \n\nFirst argument is the data (a tibble)\nOther arguments specify what to do exactly\nReturn a tibble"
  },
  {
    "objectID": "sessions/slides/dplyr.html#the-data",
    "href": "sessions/slides/dplyr.html#the-data",
    "title": "Data transformation with dplyr",
    "section": "The data",
    "text": "The data\nData set and_vertebrates with measurements of a trout and 2 salamander species in different forest sections.\n\n\n\n\n\nyear: observation year\nsection: CC (clear cut forest) or OG (old growth forest)\nunittype: channel classification (C = Cascade, P = Pool, …)\nspecies: Species measured\nlength_1_mm: body length [mm]\nweight_g: body weight [g]\n\n\n\n\n\n\n\n\nCoastal giant salamander (terrestrial form)Andrews Forest Program by Lina DiGregorio via CC-BY from https://andrewsforest.oregonstate.edu\n\n\n\n\nReferences: Kaylor, M.J. and D.R. Warren. (2017) andGregory, S.V. and I. Arismendi. (2020) as provided in the lterdatasampler package."
  },
  {
    "objectID": "sessions/slides/dplyr.html#the-data-1",
    "href": "sessions/slides/dplyr.html#the-data-1",
    "title": "Data transformation with dplyr",
    "section": "The data",
    "text": "The data\nData set and_vertebrates with measurements of a trout and 2 salamander species in different forest sections.\n\nlibrary(lterdatasampler)\nvertebrates &lt;- and_vertebrates |&gt;\n  select(year, section, unittype, species, length_1_mm, weight_g) |&gt;\n  filter(species != \"Cascade torrent salamander\")\nvertebrates\n#&gt; # A tibble: 32,191 × 6\n#&gt;     year section unittype species         length_1_mm weight_g\n#&gt;    &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt;\n#&gt;  1  1987 CC      R        Cutthroat trout          58     1.75\n#&gt;  2  1987 CC      R        Cutthroat trout          61     1.95\n#&gt;  3  1987 CC      R        Cutthroat trout          89     5.6 \n#&gt;  4  1987 CC      R        Cutthroat trout          58     2.15\n#&gt;  5  1987 CC      R        Cutthroat trout          93     6.9 \n#&gt;  6  1987 CC      R        Cutthroat trout          86     5.9 \n#&gt;  7  1987 CC      R        Cutthroat trout         107    10.5 \n#&gt;  8  1987 CC      R        Cutthroat trout         131    20.6 \n#&gt;  9  1987 CC      R        Cutthroat trout         103     9.55\n#&gt; 10  1987 CC      R        Cutthroat trout         117    13   \n#&gt; # ℹ 32,181 more rows"
  },
  {
    "objectID": "sessions/slides/dplyr.html#filter-1",
    "href": "sessions/slides/dplyr.html#filter-1",
    "title": "Data transformation with dplyr",
    "section": "filter()",
    "text": "filter()\nFilter only the trout species:\n\nfilter(vertebrates, species == \"Cutthroat trout\")\n#&gt; # A tibble: 20,433 × 6\n#&gt;     year section unittype species         length_1_mm weight_g\n#&gt;    &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt;\n#&gt;  1  1987 CC      R        Cutthroat trout          58     1.75\n#&gt;  2  1987 CC      R        Cutthroat trout          61     1.95\n#&gt;  3  1987 CC      R        Cutthroat trout          89     5.6 \n#&gt;  4  1987 CC      R        Cutthroat trout          58     2.15\n#&gt;  5  1987 CC      R        Cutthroat trout          93     6.9 \n#&gt;  6  1987 CC      R        Cutthroat trout          86     5.9 \n#&gt;  7  1987 CC      R        Cutthroat trout         107    10.5 \n#&gt;  8  1987 CC      R        Cutthroat trout         131    20.6 \n#&gt;  9  1987 CC      R        Cutthroat trout         103     9.55\n#&gt; 10  1987 CC      R        Cutthroat trout         117    13   \n#&gt; # ℹ 20,423 more rows\n\n\nfilter() goes through each row of the data and return only those rows where the value for species is \"Cutthroat trout\""
  },
  {
    "objectID": "sessions/slides/dplyr.html#filter-2",
    "href": "sessions/slides/dplyr.html#filter-2",
    "title": "Data transformation with dplyr",
    "section": "filter()",
    "text": "filter()\nYou can also combine filters using logical operators (&, |, !):\n\nfilter(vertebrates, species == \"Cutthroat trout\" & year == 1987)\n#&gt; # A tibble: 603 × 6\n#&gt;     year section unittype species         length_1_mm weight_g\n#&gt;    &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt;\n#&gt;  1  1987 CC      R        Cutthroat trout          58     1.75\n#&gt;  2  1987 CC      R        Cutthroat trout          61     1.95\n#&gt;  3  1987 CC      R        Cutthroat trout          89     5.6 \n#&gt;  4  1987 CC      R        Cutthroat trout          58     2.15\n#&gt;  5  1987 CC      R        Cutthroat trout          93     6.9 \n#&gt;  6  1987 CC      R        Cutthroat trout          86     5.9 \n#&gt;  7  1987 CC      R        Cutthroat trout         107    10.5 \n#&gt;  8  1987 CC      R        Cutthroat trout         131    20.6 \n#&gt;  9  1987 CC      R        Cutthroat trout         103     9.55\n#&gt; 10  1987 CC      R        Cutthroat trout         117    13   \n#&gt; # ℹ 593 more rows"
  },
  {
    "objectID": "sessions/slides/dplyr.html#filter-in",
    "href": "sessions/slides/dplyr.html#filter-in",
    "title": "Data transformation with dplyr",
    "section": "filter() + %in%",
    "text": "filter() + %in%\nUse the %in% operator to filter rows based on multiple values, e.g. unittypes\n\n\nunittype_select &lt;- c(\"R\", \"C\", \"S\")\nfilter(vertebrates, unittype %in% unittype_select)\n#&gt; # A tibble: 19,619 × 6\n#&gt;     year section unittype species         length_1_mm weight_g\n#&gt;    &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt;\n#&gt;  1  1987 CC      R        Cutthroat trout          58     1.75\n#&gt;  2  1987 CC      R        Cutthroat trout          61     1.95\n#&gt;  3  1987 CC      R        Cutthroat trout          89     5.6 \n#&gt;  4  1987 CC      R        Cutthroat trout          58     2.15\n#&gt;  5  1987 CC      R        Cutthroat trout          93     6.9 \n#&gt;  6  1987 CC      R        Cutthroat trout          86     5.9 \n#&gt;  7  1987 CC      R        Cutthroat trout         107    10.5 \n#&gt;  8  1987 CC      R        Cutthroat trout         131    20.6 \n#&gt;  9  1987 CC      R        Cutthroat trout         103     9.55\n#&gt; 10  1987 CC      R        Cutthroat trout         117    13   \n#&gt; # ℹ 19,609 more rows"
  },
  {
    "objectID": "sessions/slides/dplyr.html#filter-is.na",
    "href": "sessions/slides/dplyr.html#filter-is.na",
    "title": "Data transformation with dplyr",
    "section": "filter() + is.na()",
    "text": "filter() + is.na()\nFilter only rows that don’t have a value for the weight\n\nfilter(vertebrates, is.na(weight_g))\n#&gt; # A tibble: 13,259 × 6\n#&gt;     year section unittype species         length_1_mm weight_g\n#&gt;    &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt;\n#&gt;  1  1993 CC      P        Cutthroat trout          93       NA\n#&gt;  2  1993 CC      P        Cutthroat trout         175       NA\n#&gt;  3  1993 CC      P        Cutthroat trout         104       NA\n#&gt;  4  1993 CC      P        Cutthroat trout          98       NA\n#&gt;  5  1993 CC      P        Cutthroat trout          97       NA\n#&gt;  6  1993 CC      P        Cutthroat trout         123       NA\n#&gt;  7  1993 CC      P        Cutthroat trout         149       NA\n#&gt;  8  1993 CC      P        Cutthroat trout         100       NA\n#&gt;  9  1993 CC      P        Cutthroat trout         118       NA\n#&gt; 10  1993 CC      P        Cutthroat trout         163       NA\n#&gt; # ℹ 13,249 more rows\n\n\nOr the opposite: filter only the rows that have a value for the weight\n\nfilter(vertebrates, !is.na(weight_g))"
  },
  {
    "objectID": "sessions/slides/dplyr.html#filter-between",
    "href": "sessions/slides/dplyr.html#filter-between",
    "title": "Data transformation with dplyr",
    "section": "filter() + between()",
    "text": "filter() + between()\nCombine different filters:\nFilter rows where the value for year is between 2000 and 2005\n\n\nfilter(vertebrates, between(year, 2000, 2005))\n#&gt; # A tibble: 6,662 × 6\n#&gt;     year section unittype species         length_1_mm weight_g\n#&gt;    &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt;\n#&gt;  1  2000 CC      C        Cutthroat trout          84       NA\n#&gt;  2  2000 CC      C        Cutthroat trout         132       NA\n#&gt;  3  2000 CC      C        Cutthroat trout         105       NA\n#&gt;  4  2000 CC      C        Cutthroat trout          41       NA\n#&gt;  5  2000 CC      C        Cutthroat trout          42       NA\n#&gt;  6  2000 CC      C        Cutthroat trout          42       NA\n#&gt;  7  2000 CC      C        Cutthroat trout          41       NA\n#&gt;  8  2000 CC      C        Cutthroat trout          51       NA\n#&gt;  9  2000 CC      C        Cutthroat trout          45       NA\n#&gt; 10  2000 CC      C        Cutthroat trout          44       NA\n#&gt; # ℹ 6,652 more rows\n\n\n\nOr you could also do it like this:\n\nfilter(vertebrates, year &gt;= 2000 & year &lt;= 2005)"
  },
  {
    "objectID": "sessions/slides/dplyr.html#useful-filter-helpers",
    "href": "sessions/slides/dplyr.html#useful-filter-helpers",
    "title": "Data transformation with dplyr",
    "section": "Useful filter() helpers",
    "text": "Useful filter() helpers\nThese functions and operators help you filter your observations:\n\n\nrelational operators &lt;, &gt;, ==, …\nlogical operators &, |, !\n%in% to filter multiple values\nis.na() to filter missing values\nbetween() to filter values that are between an upper and lower boundary\nnear() to compare floating points (use instead of == for doubles)"
  },
  {
    "objectID": "sessions/slides/dplyr.html#select-1",
    "href": "sessions/slides/dplyr.html#select-1",
    "title": "Data transformation with dplyr",
    "section": "select()",
    "text": "select()\nSelect the columns species, length_1_mm, and year\n\nselect(vertebrates, species, length_1_mm, year)\n#&gt; # A tibble: 32,191 × 3\n#&gt;    species         length_1_mm  year\n#&gt;    &lt;chr&gt;                 &lt;dbl&gt; &lt;dbl&gt;\n#&gt;  1 Cutthroat trout          58  1987\n#&gt;  2 Cutthroat trout          61  1987\n#&gt;  3 Cutthroat trout          89  1987\n#&gt;  4 Cutthroat trout          58  1987\n#&gt;  5 Cutthroat trout          93  1987\n#&gt;  6 Cutthroat trout          86  1987\n#&gt;  7 Cutthroat trout         107  1987\n#&gt;  8 Cutthroat trout         131  1987\n#&gt;  9 Cutthroat trout         103  1987\n#&gt; 10 Cutthroat trout         117  1987\n#&gt; # ℹ 32,181 more rows\n\n\nRemove variables using -\n\nselect(vertebrates, -species, -length_1_mm, -year)"
  },
  {
    "objectID": "sessions/slides/dplyr.html#select-starts_with",
    "href": "sessions/slides/dplyr.html#select-starts_with",
    "title": "Data transformation with dplyr",
    "section": "select() + starts_with()",
    "text": "select() + starts_with()\nSelect all columns that start with \"s\"\n\nselect(vertebrates, starts_with(\"s\"))\n\n\n#&gt; # A tibble: 32,191 × 2\n#&gt;   section species        \n#&gt;   &lt;chr&gt;   &lt;chr&gt;          \n#&gt; 1 CC      Cutthroat trout\n#&gt; 2 CC      Cutthroat trout\n#&gt; 3 CC      Cutthroat trout\n#&gt; # ℹ 32,188 more rows\n\n\nYou can use the same structure for ends_with() and contains().\n\n# this does not make sense for the example data\n# but combinations like this are helpful for research data\nselect(vertebrates, starts_with(\"_location1\"))\n\nselect(vertebrates, contains(\"_id_\"))"
  },
  {
    "objectID": "sessions/slides/dplyr.html#useful-select-helpers",
    "href": "sessions/slides/dplyr.html#useful-select-helpers",
    "title": "Data transformation with dplyr",
    "section": "Useful select() helpers",
    "text": "Useful select() helpers\n\n\nstarts_with() and ends_with(): variable names that start/end with a specific string\ncontains(): variable names that contain a specific string\nmatches(): variable names that match a regular expression\nany_of() and all_of(): variables that are contained in a character vector"
  },
  {
    "objectID": "sessions/slides/dplyr.html#mutate-1",
    "href": "sessions/slides/dplyr.html#mutate-1",
    "title": "Data transformation with dplyr",
    "section": "mutate()",
    "text": "mutate()\nNew columns can be added based on values from other columns\n\nmutate(vertebrates, weight_kg = weight_g/1000)\n\n\n#&gt; # A tibble: 32,191 × 7\n#&gt;    year section unittype species         length_1_mm weight_g weight_kg\n#&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n#&gt; 1  1987 CC      R        Cutthroat trout          58     1.75   0.00175\n#&gt; 2  1987 CC      R        Cutthroat trout          61     1.95   0.00195\n#&gt; 3  1987 CC      R        Cutthroat trout          89     5.6    0.0056 \n#&gt; # ℹ 32,188 more rows\n\n\nAdd multiple new columns at once:\n\nmutate(vertebrates,\n       weight_kg = weight_g/1000,\n       length_m = length_1_mm/1000)"
  },
  {
    "objectID": "sessions/slides/dplyr.html#mutate-case_when",
    "href": "sessions/slides/dplyr.html#mutate-case_when",
    "title": "Data transformation with dplyr",
    "section": "mutate() + case_when()",
    "text": "mutate() + case_when()\nUse case_when to add column values conditional on other columns.\ncase_when() can combine many cases into one.\n\nmutate(vertebrates,\n       type = case_when(\n         species == \"Cutthroat trout\" ~ \"Fish\",               # case 1\n         species == \"Coastal giant salamander\" ~ \"Amphibian\", # case 2\n         .default = NA                                        # all other\n))\n#&gt; # A tibble: 32,191 × 7\n#&gt;     year section unittype species         length_1_mm weight_g type \n#&gt;    &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;\n#&gt;  1  1987 CC      R        Cutthroat trout          58     1.75 Fish \n#&gt;  2  1987 CC      R        Cutthroat trout          61     1.95 Fish \n#&gt;  3  1987 CC      R        Cutthroat trout          89     5.6  Fish \n#&gt;  4  1987 CC      R        Cutthroat trout          58     2.15 Fish \n#&gt;  5  1987 CC      R        Cutthroat trout          93     6.9  Fish \n#&gt;  6  1987 CC      R        Cutthroat trout          86     5.9  Fish \n#&gt;  7  1987 CC      R        Cutthroat trout         107    10.5  Fish \n#&gt;  8  1987 CC      R        Cutthroat trout         131    20.6  Fish \n#&gt;  9  1987 CC      R        Cutthroat trout         103     9.55 Fish \n#&gt; 10  1987 CC      R        Cutthroat trout         117    13    Fish \n#&gt; # ℹ 32,181 more rows"
  },
  {
    "objectID": "sessions/slides/dplyr.html#summarize-1",
    "href": "sessions/slides/dplyr.html#summarize-1",
    "title": "Data transformation with dplyr",
    "section": "summarize()",
    "text": "summarize()\nsummarize will collapse the data to a single row\n\n\nsummarize(vertebrates,\n          mean_length = mean(length_1_mm, na.rm = TRUE),\n          mean_weight = mean(weight_g, na.rm = TRUE))\n#&gt; # A tibble: 1 × 2\n#&gt;   mean_length mean_weight\n#&gt;         &lt;dbl&gt;       &lt;dbl&gt;\n#&gt; 1        73.8        8.91"
  },
  {
    "objectID": "sessions/slides/dplyr.html#summarize-by-group",
    "href": "sessions/slides/dplyr.html#summarize-by-group",
    "title": "Data transformation with dplyr",
    "section": "summarize() by group",
    "text": "summarize() by group\nsummarize is much more useful in combination with the grouping argument .by\n\nsummary will be calculated separately for each group\n\n\n\n# summarize the grouped data\nsummarize(vertebrates,\n    mean_length = mean(length_1_mm, na.rm = TRUE),\n    mean_weight = mean(weight_g, na.rm = TRUE),\n    .by = species\n  )\n#&gt; # A tibble: 2 × 3\n#&gt;   species                  mean_length mean_weight\n#&gt;   &lt;chr&gt;                          &lt;dbl&gt;       &lt;dbl&gt;\n#&gt; 1 Cutthroat trout                 83.5        8.84\n#&gt; 2 Coastal giant salamander        57.0        9.03\n\n\n\n\nCombine variables if you want to summarize by more than one group (e.g. .by = c(species, unittype))"
  },
  {
    "objectID": "sessions/slides/dplyr.html#count",
    "href": "sessions/slides/dplyr.html#count",
    "title": "Data transformation with dplyr",
    "section": "count()",
    "text": "count()\nCounts observations by group\n\n# count rows grouped by year\ncount(vertebrates, year)\n#&gt; # A tibble: 33 × 2\n#&gt;     year     n\n#&gt;    &lt;dbl&gt; &lt;int&gt;\n#&gt;  1  1987   603\n#&gt;  2  1988   302\n#&gt;  3  1989   308\n#&gt;  4  1990   513\n#&gt;  5  1991   626\n#&gt;  6  1992   616\n#&gt;  7  1993   870\n#&gt;  8  1994   948\n#&gt;  9  1995   583\n#&gt; 10  1996   928\n#&gt; # ℹ 23 more rows"
  },
  {
    "objectID": "sessions/slides/dplyr.html#the-pipe-1",
    "href": "sessions/slides/dplyr.html#the-pipe-1",
    "title": "Data transformation with dplyr",
    "section": "The pipe |>",
    "text": "The pipe |&gt;\nData transformation often requires multiple operations in sequence.\nThe pipe operator |&gt; helps to keep these operations clear and readable.\n\nYou may also see %&gt;% from the magrittr package\n\n\nTurn on the native R pipe |&gt; in Tools -&gt; Global Options -&gt; Code\n\n\n\n\nSee here for differences between the two pipe versions"
  },
  {
    "objectID": "sessions/slides/dplyr.html#the-pipe-2",
    "href": "sessions/slides/dplyr.html#the-pipe-2",
    "title": "Data transformation with dplyr",
    "section": "The pipe |>",
    "text": "The pipe |&gt;\nLet’s look at an example without pipe:\n\n# 1: filter rows that have don't have NA in the unittype column\nvertebrates_new &lt;- filter(vertebrates, !is.na(unittype))\n\n# 2: summarize mean values by year\nvertebrates_new &lt;- count(vertebrates_new, year, species, section)\n\n\nHow could we make this more efficient?\n\n\nUse one nested function without intermediate results:\n\nvertebrates_new &lt;- count(\n  filter(vertebrates, !is.na(unittype)),\n  year, species, section\n)\n\n\n\nBut this gets complicated and error prone very quickly"
  },
  {
    "objectID": "sessions/slides/dplyr.html#the-pipe-3",
    "href": "sessions/slides/dplyr.html#the-pipe-3",
    "title": "Data transformation with dplyr",
    "section": "The pipe |>",
    "text": "The pipe |&gt;\nThe pipe operator makes it very easy to combine multiple operations:\n\nvertebrates_new &lt;- vertebrates |&gt;\n  filter(!is.na(unittype)) |&gt;\n  count(year, species, section)\n\nvertebrates_new\n\n\nYou can read from top to bottom and interpret the |&gt; as an “and then do”."
  },
  {
    "objectID": "sessions/slides/dplyr.html#the-pipe-4",
    "href": "sessions/slides/dplyr.html#the-pipe-4",
    "title": "Data transformation with dplyr",
    "section": "The pipe |>",
    "text": "The pipe |&gt;\nBut what is happening?\nThe pipe is “pushing” the result of one line into the first argument of the function from the next line.\n\n\nvertebrates |&gt; \n  count(year)\n\n# instead of \ncount(vertebrates, year)\n\n\n\nPiping works perfectly with the tidyverse functions because they are designed to return a tibble and take a tibble as first argument.\n\n\n\n\n\n\n\n\nTip\n\n\nUse the keyboard shortcut Ctrl/Cmd + Shift + M to insert |&gt;"
  },
  {
    "objectID": "sessions/slides/dplyr.html#the-pipe-5",
    "href": "sessions/slides/dplyr.html#the-pipe-5",
    "title": "Data transformation with dplyr",
    "section": "The pipe |>",
    "text": "The pipe |&gt;\nPiping also works well together with ggplot\n\nvertebrates |&gt;\n  filter(!is.na(unittype)) |&gt;\n  count(year, species, section) |&gt;\n  ggplot(aes(x = year, y = n, color = species)) +\n  geom_line() +\n  facet_wrap(~section)"
  },
  {
    "objectID": "sessions/slides/dplyr.html#combine-two-tibbles-by-row-bind_rows",
    "href": "sessions/slides/dplyr.html#combine-two-tibbles-by-row-bind_rows",
    "title": "Data transformation with dplyr",
    "section": "Combine two tibbles by row bind_rows",
    "text": "Combine two tibbles by row bind_rows\nSituation: Two (or more) tibbles with the same variables (column names)\n\ntbl_a &lt;- vertebrates[1:2, ] # first two rows\ntbl_b &lt;- vertebrates[2:nrow(vertebrates), ] # the rest\n\n\n\ntbl_a\n\n\n#&gt; # A tibble: 2 × 6\n#&gt;    year section unittype species         length_1_mm weight_g\n#&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt;\n#&gt; 1  1987 CC      R        Cutthroat trout          58     1.75\n#&gt; 2  1987 CC      R        Cutthroat trout          61     1.95\n\n\n\ntbl_b\n\n\n#&gt; # A tibble: 32,190 × 6\n#&gt;    year section unittype species         length_1_mm weight_g\n#&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt;\n#&gt; 1  1987 CC      R        Cutthroat trout          61     1.95\n#&gt; 2  1987 CC      R        Cutthroat trout          89     5.6 \n#&gt; # ℹ 32,188 more rows"
  },
  {
    "objectID": "sessions/slides/dplyr.html#combine-two-tibbles-by-row-bind_rows-1",
    "href": "sessions/slides/dplyr.html#combine-two-tibbles-by-row-bind_rows-1",
    "title": "Data transformation with dplyr",
    "section": "Combine two tibbles by row bind_rows",
    "text": "Combine two tibbles by row bind_rows\nBind the rows together with bind_rows():\n\nbind_rows(tbl_a, tbl_b)\n\n\n#&gt; # A tibble: 32,192 × 6\n#&gt;    year section unittype species         length_1_mm weight_g\n#&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt;\n#&gt; 1  1987 CC      R        Cutthroat trout          58     1.75\n#&gt; 2  1987 CC      R        Cutthroat trout          61     1.95\n#&gt; # ℹ 32,190 more rows\n\n\nYou can also add an ID-column to indicate which line belonged to which table:\n\nbind_rows(a = tbl_a, b = tbl_b, .id = \"id\")\n\n\n#&gt; # A tibble: 32,192 × 7\n#&gt;   id     year section unittype species         length_1_mm weight_g\n#&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt;\n#&gt; 1 a      1987 CC      R        Cutthroat trout          58     1.75\n#&gt; 2 a      1987 CC      R        Cutthroat trout          61     1.95\n#&gt; 3 b      1987 CC      R        Cutthroat trout          61     1.95\n#&gt; # ℹ 32,189 more rows\n\n\n\nYou can use bind_rows() to bind as many tables as you want:\n\nbind_rows(a = tbl_a, b= tbl_b, c = tbl_c, ..., .id = \"id\")"
  },
  {
    "objectID": "sessions/slides/dplyr.html#join-tibbles-with-left_join",
    "href": "sessions/slides/dplyr.html#join-tibbles-with-left_join",
    "title": "Data transformation with dplyr",
    "section": "Join tibbles with left_join()",
    "text": "Join tibbles with left_join()\nSituation: Two tables that share some but not all columns.\n\n\nvertebrates\n\n\n#&gt; # A tibble: 32,191 × 6\n#&gt;    year section unittype species         length_1_mm weight_g\n#&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt;\n#&gt; 1  1987 CC      R        Cutthroat trout          58     1.75\n#&gt; 2  1987 CC      R        Cutthroat trout          61     1.95\n#&gt; # ℹ 32,189 more rows\n\n\n\n# table with more information on the species\nspecies\n#&gt; # A tibble: 2 × 2\n#&gt;   species                  type     \n#&gt;   &lt;chr&gt;                    &lt;chr&gt;    \n#&gt; 1 Cutthroat trout          Fish     \n#&gt; 2 Coastal giant salamander Amphibian"
  },
  {
    "objectID": "sessions/slides/dplyr.html#join-tibbles-with-left_join-1",
    "href": "sessions/slides/dplyr.html#join-tibbles-with-left_join-1",
    "title": "Data transformation with dplyr",
    "section": "Join tibbles with left_join()",
    "text": "Join tibbles with left_join()\nJoin the two tables by the common column species\n\nleft_join(vertebrates, species, by = \"species\")\n#&gt; # A tibble: 32,191 × 7\n#&gt;     year section unittype species         length_1_mm weight_g type \n#&gt;    &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;\n#&gt;  1  1987 CC      R        Cutthroat trout          58     1.75 Fish \n#&gt;  2  1987 CC      R        Cutthroat trout          61     1.95 Fish \n#&gt;  3  1987 CC      R        Cutthroat trout          89     5.6  Fish \n#&gt;  4  1987 CC      R        Cutthroat trout          58     2.15 Fish \n#&gt;  5  1987 CC      R        Cutthroat trout          93     6.9  Fish \n#&gt;  6  1987 CC      R        Cutthroat trout          86     5.9  Fish \n#&gt;  7  1987 CC      R        Cutthroat trout         107    10.5  Fish \n#&gt;  8  1987 CC      R        Cutthroat trout         131    20.6  Fish \n#&gt;  9  1987 CC      R        Cutthroat trout         103     9.55 Fish \n#&gt; 10  1987 CC      R        Cutthroat trout         117    13    Fish \n#&gt; # ℹ 32,181 more rows\n\n\nleft_join() means that the resulting tibble will contain all rows of vertebrates, but not necessarily all rows of species (in this case it does though)."
  },
  {
    "objectID": "sessions/slides/dplyr.html#different-_join-functions",
    "href": "sessions/slides/dplyr.html#different-_join-functions",
    "title": "Data transformation with dplyr",
    "section": "Different *_join() functions",
    "text": "Different *_join() functions"
  },
  {
    "objectID": "sessions/slides/dplyr.html#summary-i",
    "href": "sessions/slides/dplyr.html#summary-i",
    "title": "Data transformation with dplyr",
    "section": "Summary I",
    "text": "Summary I\nAll dplyr functions take a tibble as first argument and return a tibble.\nfilter()\n\n\npick rows with helpers\n\nrelational and logical operators\n%in%\nis.na()\nbetween()\nnear()"
  },
  {
    "objectID": "sessions/slides/dplyr.html#summary-ii",
    "href": "sessions/slides/dplyr.html#summary-ii",
    "title": "Data transformation with dplyr",
    "section": "Summary II",
    "text": "Summary II\n\nAll dplyr functions take a tibble as first argument and return a tibble.\nselect()\n\npick columns with helpers\n\nstarts_with(), ends_with()\ncontains()\nmatches()\nany_of(), all_of()"
  },
  {
    "objectID": "sessions/slides/dplyr.html#summary-iii",
    "href": "sessions/slides/dplyr.html#summary-iii",
    "title": "Data transformation with dplyr",
    "section": "Summary III",
    "text": "Summary III\narrange()\n\n\nchange order of rows (adscending)\n\nor descending with desc()\n\n\nmutate()\n\nadd columns but keep all columns\n\ncase_when() for conditional values"
  },
  {
    "objectID": "sessions/slides/dplyr.html#summary-iv",
    "href": "sessions/slides/dplyr.html#summary-iv",
    "title": "Data transformation with dplyr",
    "section": "Summary IV",
    "text": "Summary IV\n\nsummarize()\n\ncollapse rows into one row by some summary\n\nuse .by argument to summarize by group\n\n\ncount\n\ncount rows based on a group"
  },
  {
    "objectID": "sessions/slides/dplyr.html#summary-v",
    "href": "sessions/slides/dplyr.html#summary-v",
    "title": "Data transformation with dplyr",
    "section": "Summary V",
    "text": "Summary V\n\nbind_rows()\n\ncombine rows of multiple tibbles into one\n\nthe tibbles need to have the same columns\nadd an id column with the argument .id = \"id\"\nfunction bind_cols() works similarly just for columns\n\n\nleft_join()\n\ncombine tables based on common columns"
  },
  {
    "objectID": "sessions/slides/ggplot.html#a-ggplot-showcase-1",
    "href": "sessions/slides/ggplot.html#a-ggplot-showcase-1",
    "title": "Data visualization with ggplot2",
    "section": "A ggplot showcase",
    "text": "A ggplot showcase\n\n\n\n\nVisualization by Jake Kaupp, code available on Github"
  },
  {
    "objectID": "sessions/slides/ggplot.html#a-ggplot-showcase-2",
    "href": "sessions/slides/ggplot.html#a-ggplot-showcase-2",
    "title": "Data visualization with ggplot2",
    "section": "A ggplot showcase",
    "text": "A ggplot showcase\n\n\n\nVisualizations produced by the BBC News data team"
  },
  {
    "objectID": "sessions/slides/ggplot.html#a-ggplot-showcase-3",
    "href": "sessions/slides/ggplot.html#a-ggplot-showcase-3",
    "title": "Data visualization with ggplot2",
    "section": "A ggplot showcase",
    "text": "A ggplot showcase\n\n\n\nVisualization by Cédric Scherer, code available on Github"
  },
  {
    "objectID": "sessions/slides/ggplot.html#advantages-of-ggplot",
    "href": "sessions/slides/ggplot.html#advantages-of-ggplot",
    "title": "Data visualization with ggplot2",
    "section": "Advantages of ggplot",
    "text": "Advantages of ggplot\n\nConsistent grammar/structure\nFlexible structure allows you to produce any type of plots\nHighly customizable appearance (themes)\nMany extension packages that provide additional plot types, themes, colors, animation, …\n\nSee here for a list of ggplot extensions\n\nActive community that provides help and inspiration\nPerfect package for exploratory data analysis and beautiful plots"
  },
  {
    "objectID": "sessions/slides/ggplot.html#the-data",
    "href": "sessions/slides/ggplot.html#the-data",
    "title": "Data visualization with ggplot2",
    "section": "The data",
    "text": "The data\nData set and_vertebrates with measurements of a trout and 2 salamander species in different forest sections.\n\n\n\n\n\nyear: observation year\nsection: CC (clear cut forest) or OG (old growth forest)\nunittype: channel classification (C = Cascade, P = Pool, …)\nspecies: Species measured\nlength_1_mm: body length [mm]\nweight_g: body weight [g]\n\n\n\n\n\n\n\n\nCoastal giant salamander (terrestrial form)Andrews Forest Program by Lina DiGregorio via CC-BY from https://andrewsforest.oregonstate.edu\n\n\n\n\nReferences: Kaylor, M.J. and D.R. Warren. (2017) andGregory, S.V. and I. Arismendi. (2020) as provided in the lterdatasampler package."
  },
  {
    "objectID": "sessions/slides/ggplot.html#the-data-1",
    "href": "sessions/slides/ggplot.html#the-data-1",
    "title": "Data visualization with ggplot2",
    "section": "The data",
    "text": "The data\nData set and_vertebrates with measurements of a trout and 2 salamander species in different forest sections.\n\nlibrary(lterdatasampler)\nvertebrates &lt;- and_vertebrates |&gt;\n  select(year, section, unittype, species, length_1_mm, weight_g) |&gt;\n  filter(species != \"Cascade torrent salamander\")\nvertebrates\n#&gt; # A tibble: 32,191 × 6\n#&gt;     year section unittype species         length_1_mm weight_g\n#&gt;    &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt;\n#&gt;  1  1987 CC      R        Cutthroat trout          58     1.75\n#&gt;  2  1987 CC      R        Cutthroat trout          61     1.95\n#&gt;  3  1987 CC      R        Cutthroat trout          89     5.6 \n#&gt;  4  1987 CC      R        Cutthroat trout          58     2.15\n#&gt;  5  1987 CC      R        Cutthroat trout          93     6.9 \n#&gt;  6  1987 CC      R        Cutthroat trout          86     5.9 \n#&gt;  7  1987 CC      R        Cutthroat trout         107    10.5 \n#&gt;  8  1987 CC      R        Cutthroat trout         131    20.6 \n#&gt;  9  1987 CC      R        Cutthroat trout         103     9.55\n#&gt; 10  1987 CC      R        Cutthroat trout         117    13   \n#&gt; # ℹ 32,181 more rows"
  },
  {
    "objectID": "sessions/slides/ggplot.html#ggplotdata",
    "href": "sessions/slides/ggplot.html#ggplotdata",
    "title": "Data visualization with ggplot2",
    "section": "ggplot(data)",
    "text": "ggplot(data)\nThe ggplot() function initializes a ggplot object. Every ggplot needs this function.\n\n\n\n\nlibrary(ggplot2)\n# or library(tidyverse)\n\nggplot(data = vertebrates)\n\n\nEmpty plot because we did not specify the mapping of data variables"
  },
  {
    "objectID": "sessions/slides/ggplot.html#aesx-y",
    "href": "sessions/slides/ggplot.html#aesx-y",
    "title": "Data visualization with ggplot2",
    "section": "aes(x, y)",
    "text": "aes(x, y)\nThe aesthetics define how data variables are mapped plot properties.\n\n\n\n\nggplot(\n  data = vertebrates,\n  mapping = aes(\n    x = length_1_mm,\n    y = weight_g\n  )\n)\n\n\nMap variable length_1_mm to x-axis and weight_g to y-axis\nDefault scales are automatically adapted to range of data"
  },
  {
    "objectID": "sessions/slides/ggplot.html#aesx-y-1",
    "href": "sessions/slides/ggplot.html#aesx-y-1",
    "title": "Data visualization with ggplot2",
    "section": "aes(x, y)",
    "text": "aes(x, y)\nThe aesthetics define how data variables are mapped plot properties.\n\n\n\nggplot(\n  data = vertebrates,\n  mapping = aes(\n    x = length_1_mm,\n    y = weight_g\n  )\n)\n\nThis is the same but shorter:\n\nggplot(\n  vertebrates,\n  aes(\n    x = length_1_mm, \n    y = weight_g)\n)\n\nRemember argument matching by position?"
  },
  {
    "objectID": "sessions/slides/ggplot.html#geom_",
    "href": "sessions/slides/ggplot.html#geom_",
    "title": "Data visualization with ggplot2",
    "section": "geom_*",
    "text": "geom_*\ngeoms define how data points are represented. There are many different geoms to chose from\n\n\n\nfrom ggplot cheatsheet"
  },
  {
    "objectID": "sessions/slides/ggplot.html#geom_point",
    "href": "sessions/slides/ggplot.html#geom_point",
    "title": "Data visualization with ggplot2",
    "section": "geom_point",
    "text": "geom_point\n\n\n\nggplot(\n  data = vertebrates,\n  aes(\n    x = length_1_mm,\n    y = weight_g\n  )\n) +\n  geom_point()\n\n\nNew plot layers added with +\nWarning that points could not be plotted due to missing values\ndata and aes defined in ggplot call are inherited to all plot layers\n\n\n\n#&gt; Warning: Removed 13270 rows containing missing values or values outside the scale range\n#&gt; (`geom_point()`)."
  },
  {
    "objectID": "sessions/slides/ggplot.html#geom_point-1",
    "href": "sessions/slides/ggplot.html#geom_point-1",
    "title": "Data visualization with ggplot2",
    "section": "geom_point",
    "text": "geom_point\n\n\n\nggplot() +\n  geom_point(\n    data = vertebrates,\n    aes(\n      x = length_1_mm,\n      y = weight_g\n    )\n  )\n\n\ndata and aes can also be local to a layer:\n\n\nHere, it does not make a difference in the result.\n\n\n\n#&gt; Warning: Removed 13270 rows containing missing values or values outside the scale range\n#&gt; (`geom_point()`)."
  },
  {
    "objectID": "sessions/slides/ggplot.html#aescolor-mapping-color-to-a-variable",
    "href": "sessions/slides/ggplot.html#aescolor-mapping-color-to-a-variable",
    "title": "Data visualization with ggplot2",
    "section": "aes(color): mapping color to a variable",
    "text": "aes(color): mapping color to a variable\nLooks like there are two groups of data: Map color of points to a variable by adding it to aesthetics:\n\n\n\n\nggplot(\n  data = vertebrates,\n  aes(\n    x = length_1_mm,\n    y = weight_g,\n    color = species\n  )\n) +\n  geom_point()\n\n\nMap the species variable to the color aesthetic of the plot"
  },
  {
    "objectID": "sessions/slides/ggplot.html#aessize-mapping-size-to-a-variable",
    "href": "sessions/slides/ggplot.html#aessize-mapping-size-to-a-variable",
    "title": "Data visualization with ggplot2",
    "section": "aes(size): mapping size to a variable",
    "text": "aes(size): mapping size to a variable\nWe can do the same with size:\n\n\n\nggplot(\n  data = vertebrates,\n  aes(\n    x = length_1_mm,\n    y = weight_g,\n    size = species\n  )\n) +\n  geom_point()"
  },
  {
    "objectID": "sessions/slides/ggplot.html#aesshape-mapping-shape-to-a-variable",
    "href": "sessions/slides/ggplot.html#aesshape-mapping-shape-to-a-variable",
    "title": "Data visualization with ggplot2",
    "section": "aes(shape): mapping shape to a variable",
    "text": "aes(shape): mapping shape to a variable\nWe can do the same with shape:\n\n\n\nggplot(\n  data = vertebrates,\n  aes(\n    x = length_1_mm,\n    y = weight_g,\n    shape = species\n  )\n) +\n  geom_point()"
  },
  {
    "objectID": "sessions/slides/ggplot.html#combine-color-size-and-shape",
    "href": "sessions/slides/ggplot.html#combine-color-size-and-shape",
    "title": "Data visualization with ggplot2",
    "section": "Combine color, size and shape",
    "text": "Combine color, size and shape\nWe can also combine these aesthetics and map different variables\n\n\n\nggplot(\n  data = vertebrates,\n  aes(\n    x = length_1_mm,\n    y = weight_g,\n    color = unittype,\n    shape = species,\n    size = year\n  )\n) +\n  geom_point()\n\n\nThis is a bit too much for this plot, but sometimes can be useful"
  },
  {
    "objectID": "sessions/slides/ggplot.html#changing-the-scales-of-the-aesthetics",
    "href": "sessions/slides/ggplot.html#changing-the-scales-of-the-aesthetics",
    "title": "Data visualization with ggplot2",
    "section": "Changing the scales of the aesthetics",
    "text": "Changing the scales of the aesthetics\nThe scales onto which the aesthetic elements are mapped can be changed.\n\n\n\nggplot(\n  data = vertebrates,\n  aes(\n    x = length_1_mm,\n    y = weight_g,\n    color = species\n  )\n) +\n  geom_point()\n\n\nExponential relationship?\nHow does it look like on the log scale?"
  },
  {
    "objectID": "sessions/slides/ggplot.html#scale_x_log10",
    "href": "sessions/slides/ggplot.html#scale_x_log10",
    "title": "Data visualization with ggplot2",
    "section": "scale_x_log10",
    "text": "scale_x_log10\nThe scales onto which the aesthetic elements are mapped can be changed.\n\n\n\nggplot(\n  data = vertebrates,\n  aes(\n    x = length_1_mm,\n    y = weight_g,\n    color = species\n  )\n) +\n  geom_point() +\n  scale_x_log10() +\n  scale_y_log10()\n\n\nScales can be changed for all elements of aes:\n\n\nscale_aes-name_scale-type\nIn this example we scale the x and the y aesthetic to log10."
  },
  {
    "objectID": "sessions/slides/ggplot.html#geom_smooth",
    "href": "sessions/slides/ggplot.html#geom_smooth",
    "title": "Data visualization with ggplot2",
    "section": "geom_smooth",
    "text": "geom_smooth\nAdd a smoothing line that helps see patterns in the data\n\n\n\n\nggplot(\n  data = vertebrates,\n  aes(\n    x = length_1_mm,\n    y = weight_g,\n    color = species\n  )\n) +\n  geom_point(alpha = 0.3) +\n  geom_smooth(method = \"lm\") +\n  scale_x_log10() +\n  scale_y_log10()\n\n\nWith method = \"lm\", a linear regression line is added\nAll geoms done separately for species because color is defined globally\nAlpha makes points transparent (0-1)"
  },
  {
    "objectID": "sessions/slides/ggplot.html#geom_boxplot",
    "href": "sessions/slides/ggplot.html#geom_boxplot",
    "title": "Data visualization with ggplot2",
    "section": "geom_boxplot",
    "text": "geom_boxplot\nCompare groups using a boxplot\n\n\n\n\nggplot(\n  vertebrates,\n  aes(\n    x = species,\n    y = length_1_mm\n  )\n) +\n  geom_boxplot()"
  },
  {
    "objectID": "sessions/slides/ggplot.html#geom_boxplot-1",
    "href": "sessions/slides/ggplot.html#geom_boxplot-1",
    "title": "Data visualization with ggplot2",
    "section": "geom_boxplot",
    "text": "geom_boxplot\nCompare groups using a boxplot\n\n\n\nggplot(\n  vertebrates,\n  aes(\n    x = species,\n    y = length_1_mm\n  )\n) +\n  geom_boxplot(notch = TRUE)\n\n\nIf notches don’t overlap, the medians of the groups are likely different"
  },
  {
    "objectID": "sessions/slides/ggplot.html#geom_boxplot-2",
    "href": "sessions/slides/ggplot.html#geom_boxplot-2",
    "title": "Data visualization with ggplot2",
    "section": "geom_boxplot",
    "text": "geom_boxplot\nMap the unittype to the color aesthetic of the boxplot\n\n\n\n\nggplot(\n  vertebrates,\n  aes(\n    x = species,\n    y = length_1_mm,\n    color = unittype\n  )\n) +\n  geom_boxplot()"
  },
  {
    "objectID": "sessions/slides/ggplot.html#geom_boxplot-3",
    "href": "sessions/slides/ggplot.html#geom_boxplot-3",
    "title": "Data visualization with ggplot2",
    "section": "geom_boxplot",
    "text": "geom_boxplot\nMap the unittype to the fill aesthetic of the box\n\n\n\n\nggplot(\n  vertebrates,\n  aes(\n    x = species,\n    y = length_1_mm,\n    fill = unittype\n  )\n) +\n  geom_boxplot(notch = TRUE)"
  },
  {
    "objectID": "sessions/slides/ggplot.html#geom_histogram",
    "href": "sessions/slides/ggplot.html#geom_histogram",
    "title": "Data visualization with ggplot2",
    "section": "geom_histogram",
    "text": "geom_histogram\n\n\n\nggplot(\n  vertebrates,\n  aes(\n    x = length_1_mm,\n    fill = section\n  )\n) +\n  geom_histogram()\n\n\nCareful: By default the histogram is stacked for the different groups!"
  },
  {
    "objectID": "sessions/slides/ggplot.html#geom_histogram-1",
    "href": "sessions/slides/ggplot.html#geom_histogram-1",
    "title": "Data visualization with ggplot2",
    "section": "geom_histogram",
    "text": "geom_histogram\n\n\n\nggplot(\n  vertebrates,\n  aes(\n    x = length_1_mm,\n    fill = section\n  )\n) +\n  geom_histogram(\n    position = \"identity\",\n    alpha = 0.5\n  )\n\n\nChange the position of the histogram to \"identity\", if you don’t want it stacked\nalpha makes sure that you see overlapping areas"
  },
  {
    "objectID": "sessions/slides/ggplot.html#geom_tile",
    "href": "sessions/slides/ggplot.html#geom_tile",
    "title": "Data visualization with ggplot2",
    "section": "geom_tile",
    "text": "geom_tile\nYou can create a simple heatmap with geom_tile\n\n\n\n\nggplot(\n  vertebrates,\n  aes(\n    x = section,\n    y = species,\n    fill = weight_g\n  )\n) +\n  geom_tile()\n\n\nHere we would have to choose a different color scheme to see differences"
  },
  {
    "objectID": "sessions/slides/ggplot.html#small-multiples-with-facet_wrap",
    "href": "sessions/slides/ggplot.html#small-multiples-with-facet_wrap",
    "title": "Data visualization with ggplot2",
    "section": "Small multiples with facet_wrap",
    "text": "Small multiples with facet_wrap\nSplit your plots along one variable with facet_wrap\n\n\n\n\nggplot(\n  data = vertebrates,\n  aes(\n    x = length_1_mm,\n    y = weight_g,\n    color = species\n  )\n) +\n  geom_point() +\n  facet_wrap(~section)"
  },
  {
    "objectID": "sessions/slides/ggplot.html#small-multiples-with-facet_grid",
    "href": "sessions/slides/ggplot.html#small-multiples-with-facet_grid",
    "title": "Data visualization with ggplot2",
    "section": "Small multiples with facet_grid",
    "text": "Small multiples with facet_grid\nSplit your plots along two variables with facet_grid\n\n\n\n\nggplot(\n  data = vertebrates,\n  aes(\n    x = length_1_mm,\n    y = weight_g,\n    color = unittype\n  )\n) +\n  geom_point() +\n  facet_grid(section ~ species)\n\n\nfacet_grid(rows ~ columns)"
  },
  {
    "objectID": "sessions/slides/ggplot.html#change-appearance-of-points",
    "href": "sessions/slides/ggplot.html#change-appearance-of-points",
    "title": "Data visualization with ggplot2",
    "section": "Change appearance of points",
    "text": "Change appearance of points\n\n\n\n\nggplot(vertebrates, aes(\n  x = length_1_mm,\n  y = weight_g\n)) +\n  geom_point(\n    size = 4,\n    shape = 17,\n    color = \"blue\",\n    alpha = 0.5\n  )\n\n\n\n\n\n\n\n\n\n\n\nShape and color codes"
  },
  {
    "objectID": "sessions/slides/ggplot.html#change-color-scale",
    "href": "sessions/slides/ggplot.html#change-color-scale",
    "title": "Data visualization with ggplot2",
    "section": "Change color scale",
    "text": "Change color scale\nWe can also save a plot in a variable\n\n\n\ng &lt;- ggplot(vertebrates, aes(\n  x = length_1_mm,\n  y = weight_g,\n  color = species\n)) +\n  geom_point()\n\ng\n\n\n\nOther plot layers can still be added to g"
  },
  {
    "objectID": "sessions/slides/ggplot.html#scale_color_viridis_d",
    "href": "sessions/slides/ggplot.html#scale_color_viridis_d",
    "title": "Data visualization with ggplot2",
    "section": "scale_color_viridis_d",
    "text": "scale_color_viridis_d\nChange the colors of the color aesthetic:\n\n\n\n\ng +\n  scale_color_viridis_d(\n    option = \"cividis\"\n  )\n\n\n\nThe viridis color palette is designed for viewers with common forms of color blindness\nDifferent options of viridis color palettes: \"magma\", \"inferno\", \"plasma\", \"viridis\", \"cividis\""
  },
  {
    "objectID": "sessions/slides/ggplot.html#scale_color_manual",
    "href": "sessions/slides/ggplot.html#scale_color_manual",
    "title": "Data visualization with ggplot2",
    "section": "scale_color_manual",
    "text": "scale_color_manual\nWe can also manually specify colors:\n\n\n\ng +\n  scale_color_manual(\n    values = c(\n      \"darkolivegreen4\",\n      \"darkorchid3\"\n    )\n  )\n\n\nLength of color vector has to match number of levels in your aesthetic\n\n\n\n\nSpecify colors\n\nVia their name\nVia their Hex color codes (use websites to generate your own color palettes, e.g. here)"
  },
  {
    "objectID": "sessions/slides/ggplot.html#other-color-scales",
    "href": "sessions/slides/ggplot.html#other-color-scales",
    "title": "Data visualization with ggplot2",
    "section": "Other color scales",
    "text": "Other color scales\nYou can use the paletteer package to access color scales from many packages.\n\n\n\n# install.packages(\"paletteer\")\nlibrary(paletteer)\ng &lt;- g +\n  scale_color_paletteer_d(\n    palette = \"ggsci::default_uchicago\"\n  )\ng\n\n\nUse scale_color_paletteer_d for discrete and scale_color_paletteer_c for continuous color scales\nCheck out all palettes available here"
  },
  {
    "objectID": "sessions/slides/ggplot.html#scale_fill_-vs.-scale_color_",
    "href": "sessions/slides/ggplot.html#scale_fill_-vs.-scale_color_",
    "title": "Data visualization with ggplot2",
    "section": "scale_fill_* vs. scale_color_*",
    "text": "scale_fill_* vs. scale_color_*\n\n\n\nggplot(\n  vertebrates,\n  aes(\n    x = section,\n    y = length_1_mm,\n    color = unittype)) +\n  geom_boxplot() +\n  scale_color_paletteer_d(\n    palette = \"ggsci::default_uchicago\"\n  )\n\n\n\n\n\n\n\n\n\n\nggplot(\n  vertebrates,\n  aes(\n    x = section,\n    y = length_1_mm,\n    fill = unittype)) +\n  geom_boxplot() +\n  scale_fill_paletteer_d(\n    palette = \"ggsci::default_uchicago\"\n  )"
  },
  {
    "objectID": "sessions/slides/ggplot.html#labs-change-axis-and-legend-titles-and-add-plot-title",
    "href": "sessions/slides/ggplot.html#labs-change-axis-and-legend-titles-and-add-plot-title",
    "title": "Data visualization with ggplot2",
    "section": "labs: Change axis and legend titles and add plot title",
    "text": "labs: Change axis and legend titles and add plot title\n\ng &lt;- g +\n  labs(\n    x = \"Length [mm]\",\n    y = \"Weight [g]\",\n    color = \"Species\",\n    title = \"Length-Weight relationship\",\n    subtitle = \"There seems to be an exponential relationship\",\n    caption = \"Data from the `lterdatasampler` package\"\n  )\ng"
  },
  {
    "objectID": "sessions/slides/ggplot.html#labs-change-axis-and-legend-titles-and-add-plot-title-output",
    "href": "sessions/slides/ggplot.html#labs-change-axis-and-legend-titles-and-add-plot-title-output",
    "title": "Data visualization with ggplot2",
    "section": "labs: Change axis and legend titles and add plot title",
    "text": "labs: Change axis and legend titles and add plot title"
  },
  {
    "objectID": "sessions/slides/ggplot.html#theme_-change-appearance",
    "href": "sessions/slides/ggplot.html#theme_-change-appearance",
    "title": "Data visualization with ggplot2",
    "section": "theme_*: change appearance",
    "text": "theme_*: change appearance\nggplot2 offers many pre-defined themes that we can apply to change the appearance of a plot.\n\n\n\n\ng +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\ng +\n  theme_bw()"
  },
  {
    "objectID": "sessions/slides/ggplot.html#theme_-change-appearance-1",
    "href": "sessions/slides/ggplot.html#theme_-change-appearance-1",
    "title": "Data visualization with ggplot2",
    "section": "theme_*: change appearance",
    "text": "theme_*: change appearance\nggplot2 offers many pre-defined themes that we can apply to change the appearance of a plot.\n\n\n\ng +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\ng +\n  theme_dark()"
  },
  {
    "objectID": "sessions/slides/ggplot.html#theme-customize-theme",
    "href": "sessions/slides/ggplot.html#theme-customize-theme",
    "title": "Data visualization with ggplot2",
    "section": "theme(): customize theme",
    "text": "theme(): customize theme\nYou can manually change a theme or even create an entire theme yourself. The elements you can control in the theme are:\n\n\ntitles (plot, axis, legend, …)\nlabels\nbackground\nborders\ngrid lines\nlegends\n\n\n\nIf you want a full list of what you can customize, have a look at\n\n?theme\n\n\nLook here for an overview of the elements that you can change and the corresponding functions"
  },
  {
    "objectID": "sessions/slides/ggplot.html#theme-customize-theme-1",
    "href": "sessions/slides/ggplot.html#theme-customize-theme-1",
    "title": "Data visualization with ggplot2",
    "section": "theme(): customize theme",
    "text": "theme(): customize theme\nTo edit a theme, just add another theme() layer to your plot.\n\n\n\n\ng +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    axis.text = element_text(\n      face = \"bold\"\n    ),\n    plot.background = element_rect(\n      fill = \"lightgrey\",\n      color = \"darkred\"\n    )\n  )\n\n\nThe basic functioning of theme elements is:\n\ntheme(\n  element_name = element_function()\n)"
  },
  {
    "objectID": "sessions/slides/ggplot.html#theme_set-set-global-theme",
    "href": "sessions/slides/ggplot.html#theme_set-set-global-theme",
    "title": "Data visualization with ggplot2",
    "section": "theme_set(): set global theme",
    "text": "theme_set(): set global theme\nYou can set a global theme that will be applied to all ggplot objects in the current R session.\n\n# Globally set theme_minimal as the default theme\ntheme_set(theme_minimal())\n\nAdd this to the beginning of your script.\n\nYou can also specify some defaults, e.g. the text size:\n\ntheme_set(theme_minimal(base_size = 16))\n\nThis is very practical if you want to achieve a consistent look, e.g. for a scientific journal."
  },
  {
    "objectID": "sessions/slides/ggplot.html#ggsave",
    "href": "sessions/slides/ggplot.html#ggsave",
    "title": "Data visualization with ggplot2",
    "section": "ggsave()",
    "text": "ggsave()\nA ggplot object can be saved on disk in different formats.\nWithout specifications:\n\n# save plot g in img as my_plot.pdf\nggsave(filename = \"img/my_plot.pdf\", plot = g)\n# save plot g in img as my_plot.png\nggsave(filename = \"img/my_plot.png\", plot = g)\n\n\nOr with specifications:\n\n# save a plot named g in the img directory under the name my_plot.png\n# with width 16 cm and height 9 cm\nggsave(\n  filename = \"img/my_plot.png\",\n  plot = g,\n  width = 16,\n  heigth = 9,\n  units = \"cm\"\n)\n\nHave a look at ?ggsave to see all options."
  },
  {
    "objectID": "sessions/slides/intro-r.html#r-as-a-calculator",
    "href": "sessions/slides/intro-r.html#r-as-a-calculator",
    "title": "Introduction to R",
    "section": "R as a calculator",
    "text": "R as a calculator\nArithmetic operators\n\n\n\n\n\n\nAddition\n\n\n+\n\n\n\n\nSubtraction\n\n\n-\n\n\n\n\nMultiplication\n\n\n*\n\n\n\n\nDivision\n\n\n/\n\n\n\n\nModulo\n\n\n%%\n\n\n\n\nPower\n\n\n^\n\n\n\n\n\n# Addition\n2 + 2\n# Subtraction\n5.432 - 34234\n# Multiplication\n33 * 42\n# Division\n3 / 42\n# Modulo (Remainder)\n2 %% 2\n# Power\n2^2\n# Combine operations\n((2 + 2) * 5)^(10 %% 10)"
  },
  {
    "objectID": "sessions/slides/intro-r.html#r-as-a-calculator-1",
    "href": "sessions/slides/intro-r.html#r-as-a-calculator-1",
    "title": "Introduction to R",
    "section": "R as a calculator",
    "text": "R as a calculator\nRelational operators\n\n\n\n\n\n\nEqual to\n\n\n==\n\n\n\n\nNot equal to\n\n\n!=\n\n\n\n\nLess than\n\n\n&lt;\n\n\n\n\nGreater than\n\n\n&gt;\n\n\n\n\nLess or equal than\n\n\n&lt;=\n\n\n\n\nGreater or equal than\n\n\n&gt;=\n\n\n\n\n\n2 == 2\n#&gt; [1] TRUE\n2 != 2\n#&gt; [1] FALSE\n33 &lt;= 32\n#&gt; [1] FALSE\n20 &lt; 20\n#&gt; [1] FALSE"
  },
  {
    "objectID": "sessions/slides/intro-r.html#r-as-a-calculator-2",
    "href": "sessions/slides/intro-r.html#r-as-a-calculator-2",
    "title": "Introduction to R",
    "section": "R as a calculator",
    "text": "R as a calculator\nLogical operators\n\n\n\n\n\n\nNot\n\n\n!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n!TRUE\n#&gt; [1] FALSE\n!(3 &lt; 1)\n#&gt; [1] TRUE"
  },
  {
    "objectID": "sessions/slides/intro-r.html#r-as-a-calculator-3",
    "href": "sessions/slides/intro-r.html#r-as-a-calculator-3",
    "title": "Introduction to R",
    "section": "R as a calculator",
    "text": "R as a calculator\nLogical operators\n\n\n\n\n\n\nNot\n\n\n!\n\n\n\n\n\nAnd\n\n\n&\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(3 &lt; 1) & (3 == 3) # FALSE & TRUE = FALSE\n#&gt; [1] FALSE\n(1 &lt; 3) & (3 == 3) # TRUE & TRUE = TRUE\n#&gt; [1] TRUE\n(3 &lt; 1) & (3 != 3) # FALSE & FALSE = FALSE\n#&gt; [1] FALSE"
  },
  {
    "objectID": "sessions/slides/intro-r.html#r-as-a-calculator-4",
    "href": "sessions/slides/intro-r.html#r-as-a-calculator-4",
    "title": "Introduction to R",
    "section": "R as a calculator",
    "text": "R as a calculator\nLogical operators\n\n\n\n\n\n\nNot\n\n\n!\n\n\n\n\n\nAnd\n\n\n&\n\n\n\n\n\nOr\n\n\n|\n\n\n\n\n\n\n(3 &lt; 1) | (3 == 3) # FALSE | TRUE = TRUE\n#&gt; [1] TRUE\n(1 &lt; 3) | (3 == 3) # TRUE | TRUE = TRUE\n#&gt; [1] TRUE\n(3 &lt; 1) | (3 != 3) # FALSE | FALSE = FALSE\n#&gt; [1] FALSE"
  },
  {
    "objectID": "sessions/slides/intro-r.html#basic-r-syntax",
    "href": "sessions/slides/intro-r.html#basic-r-syntax",
    "title": "Introduction to R",
    "section": "Basic R Syntax",
    "text": "Basic R Syntax\n\nWhitespace does not matter\n\n\n\n# this\ndata&lt;-read_csv(\"data/my-data.csv\")\n\n# is the same as this\n\ndata &lt;- \n  read_csv(    \"data/my-data.csv\"   )\n\n\nThere are good practice rules however -&gt; More on that later\nRStudio will (often) tell you if something is incorrect\n\nFind  on the side of your script"
  },
  {
    "objectID": "sessions/slides/intro-r.html#comments-in-r",
    "href": "sessions/slides/intro-r.html#comments-in-r",
    "title": "Introduction to R",
    "section": "Comments in R",
    "text": "Comments in R\n\n# Reading and cleaning the data -----------------\n\ndata &lt;- read_csv(\"data/my-data.csv\")\n# clean all column headers \n# (found on https://stackoverflow.com/questions/68177507/)\ndata &lt;- janitor::clean_names(data)\n\n# Analysis --------------------------------------\n\n\nEverything that follows a # is a comment\nComments are not evaluated\nNotes that make code more readable or add information\n\n\n\n\nComments can be used for\n\nExplanation of code (if necessary)\nInclude links, names of authors, …\nMark different sections of your code ( try Ctrl/Cmd + Shift + R)"
  },
  {
    "objectID": "sessions/slides/intro-r.html#variables",
    "href": "sessions/slides/intro-r.html#variables",
    "title": "Introduction to R",
    "section": "Variables",
    "text": "Variables\n\nStore values under meaningful names to reuse them\nA variable has a name and value and is created using the assignment operator\n\n\n\nradius   &lt;-   5\n\n\n\n\nVariables are available in the global environment\nR is case sensitive: radius != Radius\nVariables can hold any R objects, e.g. numbers, tables with data, …\nChoose meaningful variable names\n\nMake your code easier to read"
  },
  {
    "objectID": "sessions/slides/intro-r.html#variables-1",
    "href": "sessions/slides/intro-r.html#variables-1",
    "title": "Introduction to R",
    "section": "Variables",
    "text": "Variables\n\n# create a variable\nradius &lt;- 5\n# use it in a calculation and save the result\n# pi is a built-in variable that comes with R\ncircumference &lt;- 2 * pi * radius\n# change value of variable radius\nradius &lt;- radius + 1\n\n\n\nIf you want to know which value stands behind a variable:\n\n# just use the name to print the value to the console\nradius \n\nor have a look at the “Environment” pane."
  },
  {
    "objectID": "sessions/slides/intro-r.html#atomic-data-types",
    "href": "sessions/slides/intro-r.html#atomic-data-types",
    "title": "Introduction to R",
    "section": "Atomic data types",
    "text": "Atomic data types\nThere are 6 so-called atomic data types in R. The 4 most important are:\n\nNumeric: There are two numeric data types:\n\nDouble: can be specified in decimal (1.243 or -0.2134), scientific notation (2.32e4) or hexadecimal (0xd3f1)\nInteger: numbers that are not represented by fraction. Must be followed by an L (1L, 2038459L, -5L)\n\n\n\nLogical: only two possible values TRUE and FALSE (abbreviation: T or F - but better use non-abbreviated form)\n\n\nCharacter: also called string. Sequence of characters surrounded by quotes (\"hello\" , \"sample_1\")"
  },
  {
    "objectID": "sessions/slides/intro-r.html#vectors",
    "href": "sessions/slides/intro-r.html#vectors",
    "title": "Introduction to R",
    "section": "Vectors",
    "text": "Vectors\nVectors are data structures that are built on top of atomic data types.\nImagine a vector as a collection of values that are all of the same data type.  \n\n\n\nImage from Advanced R book"
  },
  {
    "objectID": "sessions/slides/intro-r.html#creating-vectors",
    "href": "sessions/slides/intro-r.html#creating-vectors",
    "title": "Introduction to R",
    "section": "Creating vectors",
    "text": "Creating vectors\nUse the function c() to combine values into a vector\n\nlgl_var &lt;- c(TRUE, TRUE, FALSE)\ndbl_var &lt;- c(2.5, 3.4, 4.3)\nint_var &lt;- c(1L, 45L, 234L)\nchr_var &lt;- c(\"These are\", \"just\", \"some strings\")\n\n\nThere are many more options to create vectors\n\nseq() to create a sequence of numbers\n: creates a sequence of numbers with an increment of 1 (e.g. 1:10)\nrep() ro repeat values\n…"
  },
  {
    "objectID": "sessions/slides/intro-r.html#working-with-vectors-1",
    "href": "sessions/slides/intro-r.html#working-with-vectors-1",
    "title": "Introduction to R",
    "section": "Working with vectors",
    "text": "Working with vectors\nLet’s create some vectors to work with.\n\n# list of 10 biggest cities in Europe\ncities &lt;- c(\"Istanbul\", \"Moscow\", \"London\", \"Saint Petersburg\", \"Berlin\", \n            \"Madrid\", \"Kyiv\", \"Rome\", \"Bucharest\", \"Paris\")\n\npopulation &lt;- c(15.1e6, 12.5e6, 9e6, 5.4e6, 3.8e6, 3.2e6, 3e6, 2.8e6, 2.2e6, 2.1e6)\n\narea_km2 &lt;- c(2576, 2561, 1572, 1439,891,604, 839, 1285, 228, 105 )\n\n\n We can check the length of a vector using the length() function:\n\nlength(cities)\n#&gt; [1] 10\n\n\n\n\nData from Wikipedia"
  },
  {
    "objectID": "sessions/slides/intro-r.html#working-with-vectors-2",
    "href": "sessions/slides/intro-r.html#working-with-vectors-2",
    "title": "Introduction to R",
    "section": "Working with vectors",
    "text": "Working with vectors\nDivide population and area vector to calculate population density in each city: \n\npopulation / area_km2\n#&gt;  [1]  5861.801  4880.906  5725.191  3752.606  4264.871  5298.013  3575.685\n#&gt;  [8]  2178.988  9649.123 20000.000\n\n\nThe operation is performed separately for each element of the two vectors and the result is a vector.\n\n\nSame, if a vector is divided by vector of length 1 (i.e. a single number). Result is always a vector.\n\nmean_population &lt;- mean(population) # calculate the mean of population vector\nmean_population\n#&gt; [1] 5910000\npopulation / mean_population # divide population vector by the mean\n#&gt;  [1] 2.5549915 2.1150592 1.5228426 0.9137056 0.6429780 0.5414552 0.5076142\n#&gt;  [8] 0.4737733 0.3722504 0.3553299"
  },
  {
    "objectID": "sessions/slides/intro-r.html#working-with-vectors-3",
    "href": "sessions/slides/intro-r.html#working-with-vectors-3",
    "title": "Introduction to R",
    "section": "Working with vectors",
    "text": "Working with vectors\nWe can also work with relational and logical operators\n\npopulation &gt; mean_population\n#&gt;  [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nThe result is a vector containing TRUE and FALSE, depending on whether the city’s population is larger than the mean population or not.\n\n\n Logical and relational operators can be combined\n\n# population larger than mean population OR population larger than 3 million\npopulation &gt; mean_population | population &gt; 3e6\n#&gt;  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE"
  },
  {
    "objectID": "sessions/slides/intro-r.html#working-with-vectors-4",
    "href": "sessions/slides/intro-r.html#working-with-vectors-4",
    "title": "Introduction to R",
    "section": "Working with vectors",
    "text": "Working with vectors\nCheck whether elements occur in a vector:\n\ncities == \"Istanbul\"\n#&gt;  [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\n\nThe %in% operator checks whether multiple elements occur in a vector.\n\n# for each element of cities, checks whether that element is contained in to_check \nto_check &lt;- c(\"Istanbul\", \"Berlin\", \"Madrid\")\ncities %in% to_check # same as cities %in% c(\"Istanbul\", \"Berlin\", \"Madrid\")\n#&gt;  [1]  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\n\n\n\n%in% always returns a vector of the same length as the vector on the left side\n\n\n\n# for each element of to_check, check whether that element is contained in cities \nto_check %in% cities\n#&gt; [1] TRUE TRUE TRUE"
  },
  {
    "objectID": "sessions/slides/intro-r.html#indexing-vectors",
    "href": "sessions/slides/intro-r.html#indexing-vectors",
    "title": "Introduction to R",
    "section": "Indexing vectors",
    "text": "Indexing vectors\nYou can use square brackets [] to access specific elements from a vector.\nThe basic structure is:\n\nvector [ vector of indexes to select ]\n\n\n\n\ncities[5]\n#&gt; [1] \"Berlin\"\n\n\n\n\n\n# the three most populated cities\ncities[1:3] # same as cities[c(1,2,3)]\n#&gt; [1] \"Istanbul\" \"Moscow\"   \"London\"\n\n\n\n\n\n# the last entry of the cities vector\ncities[length(cities)] # same as cities[10]\n#&gt; [1] \"Paris\""
  },
  {
    "objectID": "sessions/slides/intro-r.html#indexing-vectors-1",
    "href": "sessions/slides/intro-r.html#indexing-vectors-1",
    "title": "Introduction to R",
    "section": "Indexing vectors",
    "text": "Indexing vectors\nChange the values of a vector at specified indexes using the assignment operator &lt;-\n\nImagine for example, that the population of\n\n\nIstanbul (index 1) increased to 20 Million\nRome (index 8) changed but is unknown\nParis (index 10) decreased by 200,000\n\n\n\n\n\n# Update Istanbul (1) and Rome(8)\npopulation[c(1, 8)] &lt;- c(20e6, NA) # NA means missing value\n# Update Paris (10)\npopulation[10] &lt;- population[10] - 200000 \n\n# Look at the result\npopulation\n#&gt;  [1] 20000000 12500000  9000000  5400000  3800000  3200000  3000000       NA\n#&gt;  [9]  2200000  1900000"
  },
  {
    "objectID": "sessions/slides/intro-r.html#indexing-vectors-2",
    "href": "sessions/slides/intro-r.html#indexing-vectors-2",
    "title": "Introduction to R",
    "section": "Indexing vectors",
    "text": "Indexing vectors\nYou can also index a vector using logical tests. The basic structure is:\n\nvector [ logical vector of same length ]\n\n\n\n\nmega_city &lt;- population &gt; mean_population\nmega_city\n#&gt;  [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\n\nWhich are the mega cities?\n\ncities[mega_city] # or short: cities[population &gt; mean_population]\n#&gt; [1] \"Istanbul\" \"Moscow\"   \"London\"\n\nReturn only the cities for which the comparison of their population against the mean population is TRUE"
  },
  {
    "objectID": "sessions/slides/intro-r.html#summary-i",
    "href": "sessions/slides/intro-r.html#summary-i",
    "title": "Introduction to R",
    "section": "Summary I",
    "text": "Summary I\n\n\nVariables have a name and a value and are created using the assignment operator &lt;-, e.g.\n\n\nradius &lt;- 5\n\n\nVectors are a collection of values of the same data type:\n\ncharacter (\"hello\")\nnumeric: integer (23L) and double (2.23)\nlogical (TRUE and FALSE)"
  },
  {
    "objectID": "sessions/slides/intro-r.html#summary-ii",
    "href": "sessions/slides/intro-r.html#summary-ii",
    "title": "Introduction to R",
    "section": "Summary II",
    "text": "Summary II\nCreate vectors\n\n# combine objects into vector\nc(1,2,3)\n\n# create a sequence of values\nseq(from = 3, to = 6, by = 0.5)\nseq(from = 3, to = 6, length.out = 10)\n2:10\n\n# repeat values from a vector\nrep(c(1,2), times = 2)\nrep(c(\"a\", \"b\"), each = 2)"
  },
  {
    "objectID": "sessions/slides/intro-r.html#summary-iii",
    "href": "sessions/slides/intro-r.html#summary-iii",
    "title": "Introduction to R",
    "section": "Summary III",
    "text": "Summary III\nIndexing and subsetting vectors\n\n# By index\nv[3]\nv[1:4]\nv[c(1,5,7)]\n\n# Logical indexing with 1 vector\nv[v &gt; 5]\nv[v != \"bird\" | v == \"rabbit\"]\nv[v %in% c(1,2,3)] # same as v[v == 1 | v == 2 | v == 3]\n\n# Logical indexing with two vectors of same length\nv[y == \"bird\"] # return the value in v for which index y == \"bird\"\nv[y == max(y)] # return the value in v for which y is the maximum of y"
  },
  {
    "objectID": "sessions/slides/intro-r.html#summary-iv",
    "href": "sessions/slides/intro-r.html#summary-iv",
    "title": "Introduction to R",
    "section": "Summary IV",
    "text": "Summary IV\nWorking with vectors\n\n# length\nlength(v)\n# rounding numbers\nround(v, digits = 2)\n# sum\nsum(v)\n# mean\nmean(v)\n# median\nmedian(v)\n# standard deviation\nsd(v)\n# find the min value\nmin(v)\n# find the max value"
  },
  {
    "objectID": "sessions/slides/readr.html#the-tidyverse-1",
    "href": "sessions/slides/readr.html#the-tidyverse-1",
    "title": "Import and Export Data with readr",
    "section": "The tidyverse",
    "text": "The tidyverse\n\nThe tidyverse is an opinonated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. (www.tidyverse.org)\n\nThese are the main packages from the tidyverse that we will use:"
  },
  {
    "objectID": "sessions/slides/readr.html#workflow-data-analysis",
    "href": "sessions/slides/readr.html#workflow-data-analysis",
    "title": "Import and Export Data with readr",
    "section": "Workflow data analysis",
    "text": "Workflow data analysis\n\n\n\n\nImage adapted from Wickham & Grolemund: R for Data Science"
  },
  {
    "objectID": "sessions/slides/readr.html#the-tidyverse-2",
    "href": "sessions/slides/readr.html#the-tidyverse-2",
    "title": "Import and Export Data with readr",
    "section": "The tidyverse",
    "text": "The tidyverse\nInstall the tidyverse once with:\n\ninstall.packages(\"tidyverse\")\n\nThen load and attach the packages at the beginning of your script:\n\nlibrary(tidyverse)\n\n\nYou can also install and load the tidyverse packages individually, but since we will use so many of them together, it’s easier to load and attach them together."
  },
  {
    "objectID": "sessions/slides/readr.html#readr",
    "href": "sessions/slides/readr.html#readr",
    "title": "Import and Export Data with readr",
    "section": "Readr",
    "text": "Readr\nreadr is a tidyverse package. To use it, you can load the tidyverse:\n\nlibrary(tidyverse) # or library(readr) \n\n\nThe most important functions are:\n\nread_csv/write_csv to read/write comma delimited files\nread_tsv/write_tsv to read/write tab delimited files\nread_delim/write_delim to read/write files with any delimiter"
  },
  {
    "objectID": "sessions/slides/readr.html#read-files-with-read_",
    "href": "sessions/slides/readr.html#read-files-with-read_",
    "title": "Import and Export Data with readr",
    "section": "Read files with read_*()",
    "text": "Read files with read_*()\nAll read_* functions take a path to the data file as a first argument:\n\nread_*(file = “path/to/your/file”, …)\n\n\n\nImport files with a readr function fitting the delimiter of your file:\n\ndat &lt;- read_csv(\"data/your_data.csv\") # comma delimiter\n\ndat &lt;- read_tsv(\"data/your_data.txt\") # tab delimiter\n\n\n\n\nUse read_delim for a generic type of delimiter:\n\ndat &lt;- read_delim(\"data/your_data.csv\", delim = \";\") # semicolon delimiter\n\ndat &lt;- read_delim(\"data/your_data.txt\", delim = \"----\") # ---- delimiter\n\n\n\nAll read_* functions return a tibble"
  },
  {
    "objectID": "sessions/slides/readr.html#read-files-with-read_-1",
    "href": "sessions/slides/readr.html#read-files-with-read_-1",
    "title": "Import and Export Data with readr",
    "section": "Read files with read_*()",
    "text": "Read files with read_*()\nThe read functions provide several options to modify the reading of data.\nHave a look at ?read_delim for all options.\n\nUseful if your data is not a “perfect table”"
  },
  {
    "objectID": "sessions/slides/readr.html#read-files-with-read_-2",
    "href": "sessions/slides/readr.html#read-files-with-read_-2",
    "title": "Import and Export Data with readr",
    "section": "Read files with read_*()",
    "text": "Read files with read_*()\n\n\nSpecify number of lines to skip reading with skip\n\n\nUseful if you have metadata on top of the file\n\n\n\n\n\n\n\n\n\n# without skipping first lines\nread_csv(file = \"data/meta_data_top.csv\")\n\n\n#&gt; # A tibble: 6 × 1\n#&gt;   Metadata              \n#&gt;   &lt;chr&gt;                 \n#&gt; 1 Date: June, 12, 1989  \n#&gt; 2 Author: Selina Baldauf\n#&gt; 3 Temperature, Rainfall \n#&gt; 4 1.5, 2                \n#&gt; 5 1, 0                  \n#&gt; 6 0.5, 0.6\n\n\n\n\n# skip meta data lines\nread_csv(\n  file = \"data/meta_data_top.csv\",\n  skip = 4\n)\n\n\n#&gt; # A tibble: 3 × 2\n#&gt;   Temperature Rainfall\n#&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n#&gt; 1         1.5      2  \n#&gt; 2         1        0  \n#&gt; 3         0.5      0.6"
  },
  {
    "objectID": "sessions/slides/readr.html#read-files-with-read_-3",
    "href": "sessions/slides/readr.html#read-files-with-read_-3",
    "title": "Import and Export Data with readr",
    "section": "Read files with read_*()",
    "text": "Read files with read_*()\n\n\nSpecify whether the data has a header column or not with col_names\n\n\nUseful if you don’t have column names or you want to change them\n\n\n\n\n\n\n\n\n\n# First line expected to be column names\nread_csv(file = \"data/no_col_names.csv\")\n\n\n#&gt; # A tibble: 2 × 2\n#&gt;   `1.5`   `2`\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1   1     0  \n#&gt; 2   0.5   0.6\n\n\n\n\n# Default column names are given\nread_csv(\n  file = \"data/no_col_names.csv\",\n  col_names = FALSE\n)\n\n\n#&gt; # A tibble: 3 × 2\n#&gt;      X1    X2\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1   1.5   2  \n#&gt; 2   1     0  \n#&gt; 3   0.5   0.6"
  },
  {
    "objectID": "sessions/slides/readr.html#read-files-with-read_-4",
    "href": "sessions/slides/readr.html#read-files-with-read_-4",
    "title": "Import and Export Data with readr",
    "section": "Read files with read_*()",
    "text": "Read files with read_*()\n\n\nSpecify whether the data has a header column or not with col_names\n\n\nUseful if you don’t have column names or you want to change them\n\n\n\n\n\n\n\n\n# First line expected to be column names\nread_csv(file = \"data/no_col_names.csv\")\n\n\n#&gt; # A tibble: 2 × 2\n#&gt;   `1.5`   `2`\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1   1     0  \n#&gt; 2   0.5   0.6\n\n\n\n# Specify custom column names\nread_csv(\n  file = \"data/no_col_names.csv\",\n  col_names = c(\"Temperature\", \"Rainfall\")\n)\n\n\n#&gt; # A tibble: 3 × 2\n#&gt;   Temperature Rainfall\n#&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n#&gt; 1         1.5      2  \n#&gt; 2         1        0  \n#&gt; 3         0.5      0.6"
  },
  {
    "objectID": "sessions/slides/readr.html#write-files-with-write_",
    "href": "sessions/slides/readr.html#write-files-with-write_",
    "title": "Import and Export Data with readr",
    "section": "Write files with write_*()",
    "text": "Write files with write_*()\nEvery read_* has a corresponding write_* function to export data from R.\n\nWrite data from R e.g.\n\nTo share transformed or summarized data\nSummarize complex raw data and continue working with summarized data\n…"
  },
  {
    "objectID": "sessions/slides/readr.html#write-files-with-write_-1",
    "href": "sessions/slides/readr.html#write-files-with-write_-1",
    "title": "Import and Export Data with readr",
    "section": "Write files with write_*()",
    "text": "Write files with write_*()\nAll write_* functions take the data to write as the first and the file to write to as the second argument:\n\nwrite_*(x = dat, file = “path/to/save/file.*”, …)\n\n\n\n\nwrite_csv(dat, file = \"data-clean/your_data.csv\") # comma delimiter\n\nwrite_tsv(dat, file = \"data-clean/your_data.txt\") # tab delimiter\n\n\n\n\nUse write_delim for a generic type of delimiter:\n\nwrite_delim(dat, file = \"data-clean/your_data.csv\", delim = \";\") # semicolon delimiter\n\nwrite_delim(dat, file = \"data-clean/your_data.txt\", delim = \"----\") # ---- delimiter"
  },
  {
    "objectID": "sessions/slides/readr.html#readxl",
    "href": "sessions/slides/readr.html#readxl",
    "title": "Import and Export Data with readr",
    "section": "Readxl",
    "text": "Readxl\nThe readxl package is part of the tidyverse, but you need to load it explicitly\n\nlibrary(readxl)\n\n\nUse the read_excel function to read an excel file:\n\ndat &lt;- read_excel(path = \"data/your_data.xlsx\")\n\n\n\nBy default, this reads the first sheet. You can read other sheets with\n\ndat &lt;- read_excel(path = \"data/your_data.xlsx\", sheet = \"sheetName\") # via sheet name\ndat &lt;- read_excel(path = \"data/your_data.xlsx\", sheet = 2) # via sheet number\n\n\n\n\nread_excel also has other functionality, like skipping rows etc.\nCheck out ?read_excel and the package documentation for more functionality"
  },
  {
    "objectID": "sessions/slides/readr.html#readxl-1",
    "href": "sessions/slides/readr.html#readxl-1",
    "title": "Import and Export Data with readr",
    "section": "Readxl",
    "text": "Readxl\nA little warning:\n\nReading from a text file (.txt or .csv) is more reliable\nBe careful with complicated excel sheets with formulas etc.\nAlways double check the data that you imported, e.g. by using the summary function and checking if the number of rows etc. is correct"
  },
  {
    "objectID": "sessions/slides/readr.html#absolute-vs.-relative-paths-in-r",
    "href": "sessions/slides/readr.html#absolute-vs.-relative-paths-in-r",
    "title": "Import and Export Data with readr",
    "section": "Absolute vs. relative paths in R",
    "text": "Absolute vs. relative paths in R\nAbsolute paths\nC:/Users/Selina/folder1/folder2/data/file_to_read.csv\nRelative paths\ndata/file_to_read.csv\n\nRelative paths are interpreted relative to the working directory\nCheck out where your working directory is with getwd()\nIn RStudio projects, the working directory is always the project root"
  },
  {
    "objectID": "sessions/slides/readr.html#absolute-vs.-relative-paths",
    "href": "sessions/slides/readr.html#absolute-vs.-relative-paths",
    "title": "Import and Export Data with readr",
    "section": "Absolute vs. relative paths",
    "text": "Absolute vs. relative paths\nWorking with R and RStudio, the best way is to:\n\nOrganize your work in an RStudio project\n\nThe project root is automatically the working directory\nAll your files (also your data) are in one place\n\nUse paths relative to the project root\n\n\nWhy?\n\nNo need to change the working directory\nPortable paths: will also work on other machines that copied the project\nMakes the code more readable\nLess error prone"
  },
  {
    "objectID": "sessions/slides/readr.html#data-format",
    "href": "sessions/slides/readr.html#data-format",
    "title": "Import and Export Data with readr",
    "section": "Data format",
    "text": "Data format\nFollow these guidelines to make data import to R easier and less frustrating\n\nIn general: prefer machine-readable file formats (.csv, .txt instead of .xlsx)\n\n\nSave an Excel spreadsheet as csv\n\nFile -&gt; Save As and select comma separated from the drop down menu\nFile -&gt; Export"
  },
  {
    "objectID": "sessions/slides/readr.html#data-format-1",
    "href": "sessions/slides/readr.html#data-format-1",
    "title": "Import and Export Data with readr",
    "section": "Data format",
    "text": "Data format\nFollow these guidelines to make data import to R easier and less frustrating\n\n\nIn general: prefer machine-readable file formats (.csv, .txt instead of .xlsx)\n\n\n\nNo white space in column headers\n\nUse a character as separator, e.g. species_name instead of species name\nIf this is unpractical, have a look at the function janitor::clean_names() from the janitor package\n\nNo special characters in column headers (ä,, ß, é, ê, %, °C, µ …)\nUse . as a decimal separator (not ,)"
  },
  {
    "objectID": "sessions/slides/readr.html#paths-and-file-names",
    "href": "sessions/slides/readr.html#paths-and-file-names",
    "title": "Import and Export Data with readr",
    "section": "Paths and file names",
    "text": "Paths and file names\n\nAvoid white space in paths and file names\n\ndata-raw/my_data.csv instead of data raw/my data.csv\n\nAvoid special characters in paths"
  },
  {
    "objectID": "sessions/slides/tests.html#overview-of-tests",
    "href": "sessions/slides/tests.html#overview-of-tests",
    "title": "Statistical tests",
    "section": "Overview of tests",
    "text": "Overview of tests\n\n\n\nPlease note the discussion going on about p-values as a basis for binary decisions. See e.g. here or here as a starting point"
  },
  {
    "objectID": "sessions/slides/tests.html#test-for-normal-distribution",
    "href": "sessions/slides/tests.html#test-for-normal-distribution",
    "title": "Statistical tests",
    "section": "Test for normal distribution",
    "text": "Test for normal distribution\nThere are various tests and the outcome might differ!\n\nShapiro-Wilk-Test\n\nHow much does variance of observed data differ from normal distribution\nSpecific test only for normal distribution\nHigh power, also for few data points\n\n\n\nVisual tests: QQ-Plot\n\nQuantiles of observed data plotted against quantiles of normal distribution\nScientist has to decide if normal or not"
  },
  {
    "objectID": "sessions/slides/tests.html#the-data",
    "href": "sessions/slides/tests.html#the-data",
    "title": "Statistical tests",
    "section": "The data",
    "text": "The data\nA tibble with two variables\n\n\nnormal: 200 normally distributed values with mean 50 and standard deviation 5\nnon_normal: 200 uniformly distributed values between 45 and 55\n\n\n\n\n\nmydata\n#&gt; # A tibble: 200 × 2\n#&gt;    normal non_normal\n#&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n#&gt;  1   47.2       54.9\n#&gt;  2   48.8       46.4\n#&gt;  3   57.8       54.1\n#&gt;  4   50.4       50.8\n#&gt;  5   50.6       49.0\n#&gt;  6   58.6       49.5\n#&gt;  7   52.3       52.1\n#&gt;  8   43.7       45.8\n#&gt;  9   46.6       48.4\n#&gt; 10   47.8       51.8\n#&gt; # ℹ 190 more rows"
  },
  {
    "objectID": "sessions/slides/tests.html#shapiro-wilk-test",
    "href": "sessions/slides/tests.html#shapiro-wilk-test",
    "title": "Statistical tests",
    "section": "Shapiro-Wilk-Test",
    "text": "Shapiro-Wilk-Test\n\\(H_0\\): Data does not differ from a normal distribution\n\n\n\n\nshapiro.test(mydata$normal)\n#&gt; \n#&gt;  Shapiro-Wilk normality test\n#&gt; \n#&gt; data:  mydata$normal\n#&gt; W = 0.99076, p-value = 0.2298\n\n\n\n\nW: test statistic\np-value: probability to observe the data if \\(H_0\\) was true\n\n\n\n\nThe data does not deviate significantly from a normal distribution (Shapiro-Wilk-Test, W = 0.991, p = 0.23).\n\n\n\n\nshapiro.test(mydata$non_normal)\n#&gt; \n#&gt;  Shapiro-Wilk normality test\n#&gt; \n#&gt; data:  mydata$non_normal\n#&gt; W = 0.95114, p-value = 2.435e-06\n\n\n\nThe data deviates significantly from a normal distribution (Shapiro-Wilk-Test, W = 0.95, p &lt; 0.001)."
  },
  {
    "objectID": "sessions/slides/tests.html#visual-test-with-qq-plot",
    "href": "sessions/slides/tests.html#visual-test-with-qq-plot",
    "title": "Statistical tests",
    "section": "Visual test with QQ-Plot",
    "text": "Visual test with QQ-Plot\nPoints should match the straight line. Small deviations are okay.\n\n\n\n# ggplot(\n#   mydata,\n#   aes(sample = normal)\n# ) +\n#   stat_qq() +\n#   stat_qq_line()\nggpubr::ggqqplot(mydata$normal)\n\n\n\n\n\n\n\n\n\n\n# ggplot(\n#   mydata,\n#   aes(sample = non_normal)\n# ) +\n#   stat_qq() +\n#   stat_qq_line()\nggpubr::ggqqplot(mydata$non_normal)"
  },
  {
    "objectID": "sessions/slides/tests.html#the-data-1",
    "href": "sessions/slides/tests.html#the-data-1",
    "title": "Statistical tests",
    "section": "The data",
    "text": "The data\nCounts of insects in agricultural units treated with different insecticides.\n\n\nCompare treatments A, B and C:\nCreate subsets before: count variable for each treatment as a vector\n\nTreatA &lt;- filter(\n  InsectSprays,\n  spray == \"A\")$count\nTreatB &lt;- filter(\n  InsectSprays,\n  spray == \"B\")$count\nTreatC &lt;- filter(\n  InsectSprays,\n  spray == \"C\")$count"
  },
  {
    "objectID": "sessions/slides/tests.html#test-for-equal-variance",
    "href": "sessions/slides/tests.html#test-for-equal-variance",
    "title": "Statistical tests",
    "section": "Test for equal variance",
    "text": "Test for equal variance\nFirst, test for normal distribution!\nF-Test\n\nNormal distribution of groups\nCalculates ratio of variances (if equal, ratio = 1)\np: How likely is ratio if variances were equal?\n\nLevene test\n\nNon-normal distribution of groups\nCompare difference between data sets with difference within data sets"
  },
  {
    "objectID": "sessions/slides/tests.html#test-for-equal-variance-1",
    "href": "sessions/slides/tests.html#test-for-equal-variance-1",
    "title": "Statistical tests",
    "section": "Test for equal variance",
    "text": "Test for equal variance\nFirst, test for normal distribution\n\nshapiro.test(TreatA)\n#&gt; \n#&gt;  Shapiro-Wilk normality test\n#&gt; \n#&gt; data:  TreatA\n#&gt; W = 0.95757, p-value = 0.7487\nshapiro.test(TreatB)\n#&gt; \n#&gt;  Shapiro-Wilk normality test\n#&gt; \n#&gt; data:  TreatB\n#&gt; W = 0.95031, p-value = 0.6415\nshapiro.test(TreatC)\n#&gt; \n#&gt;  Shapiro-Wilk normality test\n#&gt; \n#&gt; data:  TreatC\n#&gt; W = 0.92128, p-value = 0.2967\n\nResult: All 3 treatments are normally distributed."
  },
  {
    "objectID": "sessions/slides/tests.html#f-test",
    "href": "sessions/slides/tests.html#f-test",
    "title": "Statistical tests",
    "section": "F-Test",
    "text": "F-Test\n\\(H_0\\): Variances do not differ between groups\n\n\nvar.test(TreatA, TreatB)\n#&gt; \n#&gt;  F test to compare two variances\n#&gt; \n#&gt; data:  TreatA and TreatB\n#&gt; F = 1.2209, num df = 11, denom df = 11, p-value = 0.7464\n#&gt; alternative hypothesis: true ratio of variances is not equal to 1\n#&gt; 95 percent confidence interval:\n#&gt;  0.3514784 4.2411442\n#&gt; sample estimates:\n#&gt; ratio of variances \n#&gt;            1.22093\n\n\n\n\n\nF: test statistics, ratio of variances (if F = 1, variances are equal)\ndf: degrees of freedom of both groups\np-value: how likely is it to observe the data if \\(H_0\\) was true?\n\n\nVariances of sprays A & B don’t differ significantly (F-Test, \\(F_{11,11}\\) = 1.22, p = 0.75)"
  },
  {
    "objectID": "sessions/slides/tests.html#f-test-1",
    "href": "sessions/slides/tests.html#f-test-1",
    "title": "Statistical tests",
    "section": "F-Test",
    "text": "F-Test\n\\(H_0\\): Variances do not differ between groups\n\n\nvar.test(TreatA, TreatC)\n#&gt; \n#&gt;  F test to compare two variances\n#&gt; \n#&gt; data:  TreatA and TreatC\n#&gt; F = 7.4242, num df = 11, denom df = 11, p-value = 0.002435\n#&gt; alternative hypothesis: true ratio of variances is not equal to 1\n#&gt; 95 percent confidence interval:\n#&gt;   2.137273 25.789584\n#&gt; sample estimates:\n#&gt; ratio of variances \n#&gt;           7.424242\n\nVariances of sprays A & C differ significantly (F-Test, \\(F_{11,11}\\) = 7.42, p = 0.002)"
  },
  {
    "objectID": "sessions/slides/tests.html#test-for-equal-means-1",
    "href": "sessions/slides/tests.html#test-for-equal-means-1",
    "title": "Statistical tests",
    "section": "Test for equal means",
    "text": "Test for equal means\nt-test\n\nNormal distribution AND equal variance\nCompares if mean values are within range of standard error of each other\np: how likely is the difference if the means were equal\n\n\nWelch-Test\n\nNormal distribution but unequal variance\nCorrected t-test\n\n\n\nWilcoxon rank sum test\n\nNon-normal distribution and unequal variance\nCompares rank sums of the data\nNon-parametric"
  },
  {
    "objectID": "sessions/slides/tests.html#t-test",
    "href": "sessions/slides/tests.html#t-test",
    "title": "Statistical tests",
    "section": "t-test",
    "text": "t-test\n\\(H_0\\): The samples do not differ in their mean\n\nTreatment A and B: normally distributed and equal variance\n\nt.test(TreatA, TreatB, var.equal = TRUE)\n#&gt; \n#&gt;  Two Sample t-test\n#&gt; \n#&gt; data:  TreatA and TreatB\n#&gt; t = -0.45352, df = 22, p-value = 0.6546\n#&gt; alternative hypothesis: true difference in means is not equal to 0\n#&gt; 95 percent confidence interval:\n#&gt;  -4.643994  2.977327\n#&gt; sample estimates:\n#&gt; mean of x mean of y \n#&gt;  14.50000  15.33333\n\n\n\nt: test statistics (t = 0 means equal means)\ndf: degrees of freedom of t-statistics\np-value: how likely is it to observe the data if \\(H_0\\) was true?"
  },
  {
    "objectID": "sessions/slides/tests.html#t-test-1",
    "href": "sessions/slides/tests.html#t-test-1",
    "title": "Statistical tests",
    "section": "t-test",
    "text": "t-test\n\\(H_0\\): The samples do not differ in their mean\nTreatment A and B: normally distributed and equal variance\n\nt.test(TreatA, TreatB, var.equal = TRUE)\n#&gt; \n#&gt;  Two Sample t-test\n#&gt; \n#&gt; data:  TreatA and TreatB\n#&gt; t = -0.45352, df = 22, p-value = 0.6546\n#&gt; alternative hypothesis: true difference in means is not equal to 0\n#&gt; 95 percent confidence interval:\n#&gt;  -4.643994  2.977327\n#&gt; sample estimates:\n#&gt; mean of x mean of y \n#&gt;  14.50000  15.33333\n\nResult: The means of spray A and B don’t differ significantly (t = -0.45, df = 22, p = 0.66)"
  },
  {
    "objectID": "sessions/slides/tests.html#welch-test",
    "href": "sessions/slides/tests.html#welch-test",
    "title": "Statistical tests",
    "section": "Welch-Test",
    "text": "Welch-Test\n\\(H_0\\): The samples do not differ in their mean\n\nTreatment A and C: normally distributed and non-equal variance\n\nt.test(TreatA, TreatC, var.equal = FALSE)\n#&gt; \n#&gt;  Welch Two Sample t-test\n#&gt; \n#&gt; data:  TreatA and TreatC\n#&gt; t = 7.5798, df = 13.91, p-value = 2.655e-06\n#&gt; alternative hypothesis: true difference in means is not equal to 0\n#&gt; 95 percent confidence interval:\n#&gt;   7.885546 14.114454\n#&gt; sample estimates:\n#&gt; mean of x mean of y \n#&gt;      14.5       3.5\n\n\n\nResult: The means of spray A and C do differ significantly (t = 7.58, df = 13.9, p &lt; 0.001)"
  },
  {
    "objectID": "sessions/slides/tests.html#wilcoxon-rank-sum-test",
    "href": "sessions/slides/tests.html#wilcoxon-rank-sum-test",
    "title": "Statistical tests",
    "section": "Wilcoxon-rank-sum Test",
    "text": "Wilcoxon-rank-sum Test\n\\(H_0\\): The samples do not differ in their mean\n\nWe don’t need the Wilcoxon test to compare treatment A and B, but for the sake of an example:\n\nwilcox.test(TreatA, TreatB)\n#&gt; \n#&gt;  Wilcoxon rank sum test with continuity correction\n#&gt; \n#&gt; data:  TreatA and TreatB\n#&gt; W = 62, p-value = 0.5812\n#&gt; alternative hypothesis: true location shift is not equal to 0\n\n\n\nResult: The means of spray A and B do not differ significantly (W = 62, p = 0.58)"
  },
  {
    "objectID": "sessions/slides/tests.html#paired-values",
    "href": "sessions/slides/tests.html#paired-values",
    "title": "Statistical tests",
    "section": "Paired values",
    "text": "Paired values\nAre there pairs of data points?\nExample: samples of invertebrates across various rivers before and after sewage plants.\n\n\n\nFor each plant, there is a pair of data points (before and after the plant)\nQuestion: Is the change (before-after) significant\n\n\n\n\nUse paired = TRUE in the test.\n\nt.test(TreatA, TreatB, var.equal = TRUE, paired = TRUE)\nt.test(TreatA, TreatB, var.equal = FALSE, paired = TRUE)\nwilcox.test(TreatA, TreatB, paired = TRUE)\n\nCareful: your treatment vector both have to have the same order"
  },
  {
    "objectID": "sessions/slides/tests.html#plot-test-results-with-ggsignif",
    "href": "sessions/slides/tests.html#plot-test-results-with-ggsignif",
    "title": "Statistical tests",
    "section": "Plot test results with ggsignif",
    "text": "Plot test results with ggsignif\nThe ggsignif package offers a geom_signif() layer that can be added to a ggplot to annotate significance levels\n\n# install.packages(\"ggsignif\")\nlibrary(ggsignif)"
  },
  {
    "objectID": "sessions/slides/tests.html#plot-test-results-with-geom_signif",
    "href": "sessions/slides/tests.html#plot-test-results-with-geom_signif",
    "title": "Statistical tests",
    "section": "Plot test results with geom_signif()",
    "text": "Plot test results with geom_signif()\n\n\nggplot(\n  InsectSprays,\n  aes(x = spray, y = count)\n) +\n  geom_boxplot(notch = TRUE) +\n  geom_signif( \n    comparisons = list(\n      c(\"A\", \"B\"), \n      c(\"B\", \"C\"), \n      c(\"A\", \"C\") \n    ), \n    map_signif_level = TRUE, \n    y_position = c(23, 24, 25) \n  )\n\n\n\n\n\n\n\n\n\n\n\nBy default, a Wilcoxon test is performed"
  },
  {
    "objectID": "sessions/slides/tests.html#plot-test-results-with-geom_signif-1",
    "href": "sessions/slides/tests.html#plot-test-results-with-geom_signif-1",
    "title": "Statistical tests",
    "section": "Plot test results with geom_signif()",
    "text": "Plot test results with geom_signif()\n\n\n\nggplot(\n  InsectSprays,\n  aes(x = spray, y = count)\n) +\n  geom_boxplot(notch = TRUE) +\n  geom_signif(\n    comparisons = list(\n      c(\"A\", \"B\"),\n      c(\"B\", \"C\"),\n      c(\"A\", \"C\")\n    ),\n    test = \"t.test\", \n    test.args = list( \n      var.equal = TRUE \n    ), \n    map_signif_level = TRUE,\n    y_position = c(23, 24, 25)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntest: run specific test\ntest.args: pass additional arguments in a list\n?geom_signif for more options"
  },
  {
    "objectID": "sessions/slides/tests.html#plot-mean---se-using-stat_summary",
    "href": "sessions/slides/tests.html#plot-mean---se-using-stat_summary",
    "title": "Statistical tests",
    "section": "Plot mean +- se using stat_summary",
    "text": "Plot mean +- se using stat_summary\nAnother way to plot the results is to plot mean and standard error of the mean:\n\n\n\nggplot(\n  InsectSprays,\n  aes(x = spray, y = count)\n) +\n  stat_summary()\n\n\nBy default stat_summary adds mean and standard error of the mean as pointrange"
  },
  {
    "objectID": "sessions/slides/tests.html#plot-mean---se-using-stat_summary-1",
    "href": "sessions/slides/tests.html#plot-mean---se-using-stat_summary-1",
    "title": "Statistical tests",
    "section": "Plot mean +- se using stat_summary",
    "text": "Plot mean +- se using stat_summary\nAnother way to plot the results is to plot mean and standard error of the mean:\n\n\n\nggplot(\n  InsectSprays,\n  aes(x = spray, y = count)\n) +\n  stat_summary(\n    fun.data = mean_se,\n    geom = \"errorbar\"\n  ) +\n  stat_summary(\n    fun.y = mean,\n    geom = \"point\",\n    color = \"#28a87d\",\n    size = 4\n  )\n\n\n\nInside stat_summary, define summary function\n\nfun.data for errorbars, fun.y for points (e.g. mean)"
  },
  {
    "objectID": "sessions/slides/tests.html#plot-mean---se-using-stat_summary-2",
    "href": "sessions/slides/tests.html#plot-mean---se-using-stat_summary-2",
    "title": "Statistical tests",
    "section": "Plot mean +- se using stat_summary",
    "text": "Plot mean +- se using stat_summary\nAnother way to plot the results is to plot mean and standard error of the mean:\n\n\nggplot(\n  InsectSprays,\n  aes(x = spray, y = count)\n) +\n  stat_summary(\n    fun.data = mean_se,\n    geom = \"errorbar\",\n    width = 0.3\n  ) +\n  stat_summary(\n    fun.y = mean,\n    geom = \"bar\",\n    size = 4\n  )"
  },
  {
    "objectID": "sessions/slides/tests.html#plot-mean---se-using-stat_summary-3",
    "href": "sessions/slides/tests.html#plot-mean---se-using-stat_summary-3",
    "title": "Statistical tests",
    "section": "Plot mean +- se using stat_summary",
    "text": "Plot mean +- se using stat_summary\nJust like before, you can also add a geom_signif to a barplot:\n\n\nggplot(\n  InsectSprays,\n  aes(x = spray, y = count)\n) +\n  stat_summary(\n    fun.data = mean_se,\n    geom = \"errorbar\",\n    width = 0.3\n  ) +\n  stat_summary(\n    fun.y = mean,\n    geom = \"bar\"\n  ) +\n  ggsignif::geom_signif(\n    comparisons = list(\n      c(\"A\", \"B\"),\n      c(\"B\", \"C\"),\n      c(\"A\", \"C\")\n    ),\n    test = \"t.test\",\n    map_signif_level = TRUE,\n    y_position = c(17, 18, 19)\n  )"
  },
  {
    "objectID": "sessions/solutions/data-tibbles.html",
    "href": "sessions/solutions/data-tibbles.html",
    "title": "Solution to tibble tasks",
    "section": "",
    "text": "Use the vectors species, brainwt_kg, bodywt_kg from the last task and put them in a tibble.\n\n# install.packages(\"tibble\")\nlibrary(tibble)\n\nspecies &lt;- c(\n  \"MountainBeaver\", \"Cow\", \"GreyWolf\", \"Goat\",\n  \"GuineaPig\", \"Diplodocus\", \"AsianElephant\", \"Donkey\",\n  \"Horse\", \"PotarMonkey\", \"Cat\", \"Giraffe\",\n  \"Gorilla\", \"Human\", \"AfricanElephant\", \"Triceratops\",\n  \"RhesusMonkey\", \"Kangaroo\", \"GoldenHamster\", \"Mouse\",\n  \"Rabbit\", \"Sheep\", \"Jaguar\", \"Chimpanzee\",\n  \"Rat\", \"Brachiosaurus\", \"Mole\", \"Pig\"\n)\n\nbodywt_kg &lt;- c(\n  1.4, 465, 36.3, 27.7, 1., 11700, 2547, 187.1,\n  521, 10, 3.3, 529, 207, 62, 6654, 9400,\n  6.8, 35, 0.1, 0.02, 2.5, 55.5, 100, 52.2,\n  0.3, 87000, 0.1, 192\n)\n\nbrainwt_kg &lt;- c(\n  0.0081, 0.423, 0.1195, 0.115, 0.0055, 0.05, \n  4.603, 0.419, 0.655, 0.115, 0.0256, 0.68, \n  0.406, 1.32, 5.712, 0.07, 0.179, 0.056,\n  0.001, 0.0004, 0.0121, 0.175, 0.157, 0.44,\n  0.0019, 0.1545, 0.003, 0.18\n)\n\n# Create the tibble \nanimals &lt;- tibble(\n  species = species,\n  bodywt_kg = bodywt_kg,\n  brainwt_kg = brainwt_kg\n)"
  },
  {
    "objectID": "sessions/solutions/data-tibbles.html#create-a-tibble",
    "href": "sessions/solutions/data-tibbles.html#create-a-tibble",
    "title": "Solution to tibble tasks",
    "section": "",
    "text": "Use the vectors species, brainwt_kg, bodywt_kg from the last task and put them in a tibble.\n\n# install.packages(\"tibble\")\nlibrary(tibble)\n\nspecies &lt;- c(\n  \"MountainBeaver\", \"Cow\", \"GreyWolf\", \"Goat\",\n  \"GuineaPig\", \"Diplodocus\", \"AsianElephant\", \"Donkey\",\n  \"Horse\", \"PotarMonkey\", \"Cat\", \"Giraffe\",\n  \"Gorilla\", \"Human\", \"AfricanElephant\", \"Triceratops\",\n  \"RhesusMonkey\", \"Kangaroo\", \"GoldenHamster\", \"Mouse\",\n  \"Rabbit\", \"Sheep\", \"Jaguar\", \"Chimpanzee\",\n  \"Rat\", \"Brachiosaurus\", \"Mole\", \"Pig\"\n)\n\nbodywt_kg &lt;- c(\n  1.4, 465, 36.3, 27.7, 1., 11700, 2547, 187.1,\n  521, 10, 3.3, 529, 207, 62, 6654, 9400,\n  6.8, 35, 0.1, 0.02, 2.5, 55.5, 100, 52.2,\n  0.3, 87000, 0.1, 192\n)\n\nbrainwt_kg &lt;- c(\n  0.0081, 0.423, 0.1195, 0.115, 0.0055, 0.05, \n  4.603, 0.419, 0.655, 0.115, 0.0256, 0.68, \n  0.406, 1.32, 5.712, 0.07, 0.179, 0.056,\n  0.001, 0.0004, 0.0121, 0.175, 0.157, 0.44,\n  0.0019, 0.1545, 0.003, 0.18\n)\n\n# Create the tibble \nanimals &lt;- tibble(\n  species = species,\n  bodywt_kg = bodywt_kg,\n  brainwt_kg = brainwt_kg\n)"
  },
  {
    "objectID": "sessions/solutions/data-tibbles.html#explore-the-tibble",
    "href": "sessions/solutions/data-tibbles.html#explore-the-tibble",
    "title": "Solution to tibble tasks",
    "section": "2 Explore the tibble",
    "text": "2 Explore the tibble\nWhen you use the view function, the tibble will open in a new window. In this window, you also have some options to filter the data and sort rows. Check out these options as well.\n\nview(animals)\n\nPrint a summary of the table:\n\nsummary(animals)\n\n   species            bodywt_kg          brainwt_kg     \n Length:28          Min.   :    0.02   Min.   :0.00040  \n Class :character   1st Qu.:    3.10   1st Qu.:0.02223  \n Mode  :character   Median :   53.85   Median :0.13700  \n                    Mean   : 4278.44   Mean   :0.57452  \n                    3rd Qu.:  479.00   3rd Qu.:0.42000  \n                    Max.   :87000.00   Max.   :5.71200  \n\n\nHere a couple of other function you could use on a tibble:\n\n# Look at the structure of the tibble\nstr(animals)\n\ntibble [28 × 3] (S3: tbl_df/tbl/data.frame)\n $ species   : chr [1:28] \"MountainBeaver\" \"Cow\" \"GreyWolf\" \"Goat\" ...\n $ bodywt_kg : num [1:28] 1.4 465 36.3 27.7 1 ...\n $ brainwt_kg: num [1:28] 0.0081 0.423 0.1195 0.115 0.0055 ...\n\n# Number of rows\nnrow(animals)\n\n[1] 28\n\n# Number of columns\nncol(animals)\n\n[1] 3\n\n# Column names\nnames(animals)\n\n[1] \"species\"    \"bodywt_kg\"  \"brainwt_kg\""
  },
  {
    "objectID": "sessions/solutions/data-tibbles.html#index-filter-and-select",
    "href": "sessions/solutions/data-tibbles.html#index-filter-and-select",
    "title": "Solution to tibble tasks",
    "section": "3 Index, filter and select",
    "text": "3 Index, filter and select\n\nRows 1, 5, and 7 and the columns species and bodywt_kg\n\n\nanimals[c(1,5,7), c(\"species\", \"bodywt_kg\")]\n\n# A tibble: 3 × 2\n  species        bodywt_kg\n  &lt;chr&gt;              &lt;dbl&gt;\n1 MountainBeaver       1.4\n2 GuineaPig            1  \n3 AsianElephant     2547  \n\n\n\nFilter rows 1 to 10, all columns\n\n\nanimals[1:10, ]\n\n# A tibble: 10 × 3\n   species        bodywt_kg brainwt_kg\n   &lt;chr&gt;              &lt;dbl&gt;      &lt;dbl&gt;\n 1 MountainBeaver       1.4     0.0081\n 2 Cow                465       0.423 \n 3 GreyWolf            36.3     0.120 \n 4 Goat                27.7     0.115 \n 5 GuineaPig            1       0.0055\n 6 Diplodocus       11700       0.05  \n 7 AsianElephant     2547       4.60  \n 8 Donkey             187.      0.419 \n 9 Horse              521       0.655 \n10 PotarMonkey         10       0.115 \n\n\n\nSelect the column bodywt_kg as a vector using $\n\n\nanimals$bodywt_kg\n\n [1]     1.40   465.00    36.30    27.70     1.00 11700.00  2547.00   187.10\n [9]   521.00    10.00     3.30   529.00   207.00    62.00  6654.00  9400.00\n[17]     6.80    35.00     0.10     0.02     2.50    55.50   100.00    52.20\n[25]     0.30 87000.00     0.10   192.00"
  },
  {
    "objectID": "sessions/solutions/data-tibbles.html#extra",
    "href": "sessions/solutions/data-tibbles.html#extra",
    "title": "Solution to tibble tasks",
    "section": "4 Extra",
    "text": "4 Extra\n\nSelect the last column of the last row without using the row and column index (so don’t use any numbers in this command)\n\n\nanimals[nrow(animals), ncol(animals)]\n\n# A tibble: 1 × 1\n  brainwt_kg\n       &lt;dbl&gt;\n1       0.18\n\n\n\nCalculate the mean of the bodywt_kg column and save it in a variable\n\n\nmean_wt &lt;- mean(animals$bodywt_kg)\nmean_wt\n\n[1] 4278.44\n\n\n\nAdd a new column to the data called ratio_body_brain with the ratio of the columns bodywt_kg and brainwt_kg\n\n\nanimals$ratio_body_brain &lt;- animals$bodywt_kg / animals$brainwt_kg\nanimals\n\n# A tibble: 28 × 4\n   species        bodywt_kg brainwt_kg ratio_body_brain\n   &lt;chr&gt;              &lt;dbl&gt;      &lt;dbl&gt;            &lt;dbl&gt;\n 1 MountainBeaver       1.4     0.0081            173. \n 2 Cow                465       0.423            1099. \n 3 GreyWolf            36.3     0.120             304. \n 4 Goat                27.7     0.115             241. \n 5 GuineaPig            1       0.0055            182. \n 6 Diplodocus       11700       0.05           234000  \n 7 AsianElephant     2547       4.60              553. \n 8 Donkey             187.      0.419             447. \n 9 Horse              521       0.655             795. \n10 PotarMonkey         10       0.115              87.0\n# ℹ 18 more rows"
  },
  {
    "objectID": "sessions/solutions/empty.html",
    "href": "sessions/solutions/empty.html",
    "title": "",
    "section": "",
    "text": "Solution will be uploaded later"
  },
  {
    "objectID": "sessions/solutions/intro-r.html",
    "href": "sessions/solutions/intro-r.html",
    "title": "Solution to working with vectors",
    "section": "",
    "text": "You have the following three vectors:\nspecies &lt;- c(\n  \"MountainBeaver\", \"Cow\", \"GreyWolf\", \"Goat\",\n  \"GuineaPig\", \"Diplodocus\", \"AsianElephant\", \"Donkey\",\n  \"Horse\", \"PotarMonkey\", \"Cat\", \"Giraffe\",\n  \"Gorilla\", \"Human\", \"AfricanElephant\", \"Triceratops\",\n  \"RhesusMonkey\", \"Kangaroo\", \"GoldenHamster\", \"Mouse\",\n  \"Rabbit\", \"Sheep\", \"Jaguar\", \"Chimpanzee\",\n  \"Rat\", \"Brachiosaurus\", \"Mole\", \"Pig\"\n)\n\nbodywt_kg &lt;- c(\n  1.4, 465, 36.3, 27.7, 1., 11700, 2547, 187.1,\n  521, 10, 3.3, 529, 207, 62, 6654, 9400,\n  6.8, 35, 0.1, 0.02, 2.5, 55.5, 100, 52.2,\n  0.3, 87000, 0.1, 192\n)\n\nbrainwt_kg &lt;- c(\n  0.0081, 0.423, 0.1195, 0.115, 0.0055, 0.05, \n  4.603, 0.419, 0.655, 0.115, 0.0256, 0.68, \n  0.406, 1.32, 5.712, 0.07, 0.179, 0.056,\n  0.001, 0.0004, 0.0121, 0.175, 0.157, 0.44,\n  0.0019, 0.1545, 0.003, 0.18\n)\nanimals_to_check &lt;- c(\"Snail\", \"Goat\", \"Chimpanzee\", \"Rat\", \"Dragon\", \"Eagle\")\n\n# Goes through every element in animals_to_check and returns TRUE\n# if it appears in species\nanimals_to_check %in% species\n\n[1] FALSE  TRUE  TRUE  TRUE FALSE FALSE\nYou can see that Goat, Chimpanzee and Rat are contained in species.\nTo see the actual species name instead of just TRUE and FALSE, you have to index the vector:\nanimals_to_check[animals_to_check %in% species]\n\n[1] \"Goat\"       \"Chimpanzee\" \"Rat\"\nmean(brainwt_kg)\n\n[1] 0.5745214\n\nsd(brainwt_kg)\n\n[1] 1.334929\nspecies[brainwt_kg &gt; mean(brainwt_kg)]\n\n[1] \"AsianElephant\"   \"Horse\"           \"Giraffe\"         \"Human\"          \n[5] \"AfricanElephant\"\nbrain_body_ratio &lt;- brainwt_kg / bodywt_kg * 100\nStep 1: Look at the brain to body ratio of humans\nbrain_body_ratio[species == \"Human\"]\n\n[1] 2.129032\nStep 2: Compare it with the other animals\n# New variable for human brain to body ratio\nbbr_human &lt;- brain_body_ratio[species == \"Human\"]\n# Are there animals that have a larger brain to body ratio than humans?\nbrain_body_ratio &gt; bbr_human\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE  TRUE FALSE\n\n# Which are these animals\nspecies[brain_body_ratio &gt; bbr_human]\n\n[1] \"RhesusMonkey\" \"Mole\"        \n\n# or short\nspecies[brain_body_ratio &gt; brain_body_ratio[species == \"Human\"]]\n\n[1] \"RhesusMonkey\" \"Mole\""
  },
  {
    "objectID": "sessions/solutions/intro-r.html#extras",
    "href": "sessions/solutions/intro-r.html#extras",
    "title": "Solution to working with vectors",
    "section": "1 Extras",
    "text": "1 Extras\n\nRound the vector to 4 decimal places:\n\n\nbrain_body_ratio &lt;- round(brain_body_ratio, digits = 4)\nbrain_body_ratio\n\n [1] 0.5786 0.0910 0.3292 0.4152 0.5500 0.0004 0.1807 0.2239 0.1257 1.1500\n[11] 0.7758 0.1285 0.1961 2.1290 0.0858 0.0007 2.6324 0.1600 1.0000 2.0000\n[21] 0.4840 0.3153 0.1570 0.8429 0.6333 0.0002 3.0000 0.0938\n\n\n\nWhich animal has the smallest brain to body ratio?\n\n\nspecies[brain_body_ratio == min(brain_body_ratio)]\n\n[1] \"Brachiosaurus\"\n\n\nThe Brachiosaurus has a really small brain with a weight of just 0.1545 kg at a body weight of 8.7^{4} kg!\n\nAdd elements to the vector\n\n\nspecies_new &lt;- c(\"Eagle\", \"Snail\", \"Lion\")\nbrainwt_kg_new &lt;- c(0.0004, NA, 0.5)\nbodywt_kg_new &lt;- c(18, 0.01, 550)\n\nspecies &lt;- c(species, species_new)\nbrainwt_kg &lt;- c(brainwt_kg, brainwt_kg_new)\nbodywt_kg &lt;- c(bodywt_kg, bodywt_kg_new)\n\n\nWhat is the mean brain weight now?\n\n\nmean(brainwt_kg)\n\n[1] NA\n\n# na.rm = TRUE removes missing values before calculating the mean\nmean(brainwt_kg, na.rm = TRUE)\n\n[1] 0.5529"
  },
  {
    "objectID": "sessions/solutions/tests.html",
    "href": "sessions/solutions/tests.html",
    "title": "Solution to statistical test task",
    "section": "",
    "text": "First, create subsets of the flipper length of all species as vectors:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nadelie &lt;- filter(penguins, species == \"Adelie\")$flipper_length_mm\ngentoo &lt;- filter(penguins, species == \"Gentoo\")$flipper_length_mm\nchinstrap &lt;- filter(penguins, species == \"Chinstrap\")$flipper_length_mm\n\n\n\nWith Shapiro-Wilk\nThe Shapiro-Wilk test suggests that Adelie and Chinstrap are normally distributed, but Gentoo is not.\n\nshapiro.test(adelie)\n\n\n    Shapiro-Wilk normality test\n\ndata:  adelie\nW = 0.99339, p-value = 0.72\n\nshapiro.test(gentoo)\n\n\n    Shapiro-Wilk normality test\n\ndata:  gentoo\nW = 0.96219, p-value = 0.00162\n\nshapiro.test(chinstrap)\n\n\n    Shapiro-Wilk normality test\n\ndata:  chinstrap\nW = 0.98891, p-value = 0.8106\n\n\nWith QQ-plots\n\nlibrary(patchwork) # using patchwork to combine multiple plots into one\nch &lt;- ggpubr::ggqqplot(chinstrap) + labs(title = \"chinstrap\")\nad &lt;- ggpubr::ggqqplot(adelie) + labs(title = \"adelie\")\nge &lt;- ggpubr::ggqqplot(gentoo) + labs(title = \"gentoo\")\n\nch + ge + ad\n\n\n\n\n\n\n\n\n\n\n\nBoth are normally distributed, so we can compare variances for Chinstrap and Adelie penguins:\n\nvar.test(chinstrap, adelie)\n\n\n    F test to compare two variances\n\ndata:  chinstrap and adelie\nF = 1.1894, num df = 67, denom df = 150, p-value = 0.3854\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.8022092 1.8217141\nsample estimates:\nratio of variances \n          1.189396 \n\n\nThis indicates that the variances do not differ between Chinstrap and Adelie penguins. Therefore, we can use a t-test to compare mean flipper length:\n\nt.test(chinstrap, adelie)\n\n\n    Welch Two Sample t-test\n\ndata:  chinstrap and adelie\nt = 5.7804, df = 119.68, p-value = 6.049e-08\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n 3.859244 7.880530\nsample estimates:\nmean of x mean of y \n 195.8235  189.9536 \n\n\nThe t-test suggests, that the mean flipper length differs between Chinstrap and Adelie penguins.\n\n\n\nGentoo is not normally distributed, so we can use a Wilcoxon-rank-sum test to compare means:\n\nwilcox.test(chinstrap, gentoo)\n\n\n    Wilcoxon rank sum test with continuity correction\n\ndata:  chinstrap and gentoo\nW = 92, p-value &lt; 2.2e-16\nalternative hypothesis: true location shift is not equal to 0\n\n\nThe Wilcoxon tests suggests that the flipper lengths differ between Chinstrap and Gentoo penguins.\n\n\n\nGentoo is not normally distributed, so we can use a Wilcoxon-rank-sum test to compare means:\n\nwilcox.test(adelie, gentoo)\n\n\n    Wilcoxon rank sum test with continuity correction\n\ndata:  adelie and gentoo\nW = 26, p-value &lt; 2.2e-16\nalternative hypothesis: true location shift is not equal to 0\n\n\nThe Wilcoxon tests suggests that the flipper lengths differ between Adelie and Gentoo penguins.\n\n\n\nThe boxplot supports the findings of the statistical tests. Notches do not overlap.\n\npenguins |&gt; \n  ggplot(aes(x = species, y = flipper_length_mm)) +\n  geom_boxplot(notch = TRUE)\n\n\n\n\n\n\n\n\nSimilarly the standard errors of the means do not overlap between the species.\n\npenguins |&gt;\n  ggplot(aes(x = species, y = flipper_length_mm)) +\n  stat_summary() \n\n\n\n\n\n\n\n\nTo add the significance levels of the tests performed, I used the geom_signif() layer provided by the ggsignif package.\nSince I performed two different tests (t-test for the comparison of Chinstrap and Adelie penguins, Wilcoxon test for the other two comparisons), I added two different significance layers that distinguish the two tests.\nFor the boxplot:\n\nlibrary(ggsignif)\npenguins |&gt; \n  ggplot(aes(x = species, y = flipper_length_mm)) +\n  geom_boxplot(notch = TRUE) +\n  geom_signif(\n    comparisons = list(\n      c(\"Chinstrap\", \"Adelie\")\n    ),\n    test = \"t.test\",\n    test.args = list(var.equal = TRUE),\n    map_signif_level = TRUE\n  ) +\n  geom_signif(\n    comparisons = list(\n      c(\"Chinstrap\", \"Gentoo\"),\n      c(\"Gentoo\", \"Adelie\")\n    ),\n    test = \"wilcox.test\",\n    y_position = c(235, 240),\n    map_signif_level = TRUE\n  )\n\n\n\n\n\n\n\n\nFor a plot with mean and errorbar:\n\npenguins |&gt; \n  ggplot(aes(x = species, y = flipper_length_mm)) +\n  stat_summary() +\n  geom_signif(\n    comparisons = list(\n      c(\"Chinstrap\", \"Adelie\")\n    ),\n    test = \"t.test\",\n    test.args = list(var.equal = TRUE),\n    map_signif_level = TRUE,\n    y_position = 200,\n    tip_length = 0.01\n  ) +\n  geom_signif(\n    comparisons = list(\n      c(\"Chinstrap\", \"Gentoo\"),\n      c(\"Gentoo\", \"Adelie\")\n    ),\n    test = \"wilcox.test\",\n    y_position = c(216, 218),\n    map_signif_level = TRUE,\n    tip_length = 0.01\n  )"
  },
  {
    "objectID": "sessions/solutions/tests.html#compare-the-flipper-length-of-penguins-using-statistical-tests",
    "href": "sessions/solutions/tests.html#compare-the-flipper-length-of-penguins-using-statistical-tests",
    "title": "Solution to statistical test task",
    "section": "",
    "text": "First, create subsets of the flipper length of all species as vectors:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nadelie &lt;- filter(penguins, species == \"Adelie\")$flipper_length_mm\ngentoo &lt;- filter(penguins, species == \"Gentoo\")$flipper_length_mm\nchinstrap &lt;- filter(penguins, species == \"Chinstrap\")$flipper_length_mm\n\n\n\nWith Shapiro-Wilk\nThe Shapiro-Wilk test suggests that Adelie and Chinstrap are normally distributed, but Gentoo is not.\n\nshapiro.test(adelie)\n\n\n    Shapiro-Wilk normality test\n\ndata:  adelie\nW = 0.99339, p-value = 0.72\n\nshapiro.test(gentoo)\n\n\n    Shapiro-Wilk normality test\n\ndata:  gentoo\nW = 0.96219, p-value = 0.00162\n\nshapiro.test(chinstrap)\n\n\n    Shapiro-Wilk normality test\n\ndata:  chinstrap\nW = 0.98891, p-value = 0.8106\n\n\nWith QQ-plots\n\nlibrary(patchwork) # using patchwork to combine multiple plots into one\nch &lt;- ggpubr::ggqqplot(chinstrap) + labs(title = \"chinstrap\")\nad &lt;- ggpubr::ggqqplot(adelie) + labs(title = \"adelie\")\nge &lt;- ggpubr::ggqqplot(gentoo) + labs(title = \"gentoo\")\n\nch + ge + ad\n\n\n\n\n\n\n\n\n\n\n\nBoth are normally distributed, so we can compare variances for Chinstrap and Adelie penguins:\n\nvar.test(chinstrap, adelie)\n\n\n    F test to compare two variances\n\ndata:  chinstrap and adelie\nF = 1.1894, num df = 67, denom df = 150, p-value = 0.3854\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.8022092 1.8217141\nsample estimates:\nratio of variances \n          1.189396 \n\n\nThis indicates that the variances do not differ between Chinstrap and Adelie penguins. Therefore, we can use a t-test to compare mean flipper length:\n\nt.test(chinstrap, adelie)\n\n\n    Welch Two Sample t-test\n\ndata:  chinstrap and adelie\nt = 5.7804, df = 119.68, p-value = 6.049e-08\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n 3.859244 7.880530\nsample estimates:\nmean of x mean of y \n 195.8235  189.9536 \n\n\nThe t-test suggests, that the mean flipper length differs between Chinstrap and Adelie penguins.\n\n\n\nGentoo is not normally distributed, so we can use a Wilcoxon-rank-sum test to compare means:\n\nwilcox.test(chinstrap, gentoo)\n\n\n    Wilcoxon rank sum test with continuity correction\n\ndata:  chinstrap and gentoo\nW = 92, p-value &lt; 2.2e-16\nalternative hypothesis: true location shift is not equal to 0\n\n\nThe Wilcoxon tests suggests that the flipper lengths differ between Chinstrap and Gentoo penguins.\n\n\n\nGentoo is not normally distributed, so we can use a Wilcoxon-rank-sum test to compare means:\n\nwilcox.test(adelie, gentoo)\n\n\n    Wilcoxon rank sum test with continuity correction\n\ndata:  adelie and gentoo\nW = 26, p-value &lt; 2.2e-16\nalternative hypothesis: true location shift is not equal to 0\n\n\nThe Wilcoxon tests suggests that the flipper lengths differ between Adelie and Gentoo penguins.\n\n\n\nThe boxplot supports the findings of the statistical tests. Notches do not overlap.\n\npenguins |&gt; \n  ggplot(aes(x = species, y = flipper_length_mm)) +\n  geom_boxplot(notch = TRUE)\n\n\n\n\n\n\n\n\nSimilarly the standard errors of the means do not overlap between the species.\n\npenguins |&gt;\n  ggplot(aes(x = species, y = flipper_length_mm)) +\n  stat_summary() \n\n\n\n\n\n\n\n\nTo add the significance levels of the tests performed, I used the geom_signif() layer provided by the ggsignif package.\nSince I performed two different tests (t-test for the comparison of Chinstrap and Adelie penguins, Wilcoxon test for the other two comparisons), I added two different significance layers that distinguish the two tests.\nFor the boxplot:\n\nlibrary(ggsignif)\npenguins |&gt; \n  ggplot(aes(x = species, y = flipper_length_mm)) +\n  geom_boxplot(notch = TRUE) +\n  geom_signif(\n    comparisons = list(\n      c(\"Chinstrap\", \"Adelie\")\n    ),\n    test = \"t.test\",\n    test.args = list(var.equal = TRUE),\n    map_signif_level = TRUE\n  ) +\n  geom_signif(\n    comparisons = list(\n      c(\"Chinstrap\", \"Gentoo\"),\n      c(\"Gentoo\", \"Adelie\")\n    ),\n    test = \"wilcox.test\",\n    y_position = c(235, 240),\n    map_signif_level = TRUE\n  )\n\n\n\n\n\n\n\n\nFor a plot with mean and errorbar:\n\npenguins |&gt; \n  ggplot(aes(x = species, y = flipper_length_mm)) +\n  stat_summary() +\n  geom_signif(\n    comparisons = list(\n      c(\"Chinstrap\", \"Adelie\")\n    ),\n    test = \"t.test\",\n    test.args = list(var.equal = TRUE),\n    map_signif_level = TRUE,\n    y_position = 200,\n    tip_length = 0.01\n  ) +\n  geom_signif(\n    comparisons = list(\n      c(\"Chinstrap\", \"Gentoo\"),\n      c(\"Gentoo\", \"Adelie\")\n    ),\n    test = \"wilcox.test\",\n    y_position = c(216, 218),\n    map_signif_level = TRUE,\n    tip_length = 0.01\n  )"
  },
  {
    "objectID": "sessions/tasks/data-tibbles.html",
    "href": "sessions/tasks/data-tibbles.html",
    "title": "",
    "section": "",
    "text": "Before you start the task:\n\nInstall the tibble package by calling install.packages(\"tibble\") in the console.\n\nYou don’t need to put this command in your script as you only need to call it once to install the package\n\nOpen your script for the task and put library(tibble) on top\nExecute this line and the tibble package is loaded into your R session"
  },
  {
    "objectID": "sessions/tasks/data-tibbles.html#get-started-with-tibbles",
    "href": "sessions/tasks/data-tibbles.html#get-started-with-tibbles",
    "title": "",
    "section": "",
    "text": "Before you start the task:\n\nInstall the tibble package by calling install.packages(\"tibble\") in the console.\n\nYou don’t need to put this command in your script as you only need to call it once to install the package\n\nOpen your script for the task and put library(tibble) on top\nExecute this line and the tibble package is loaded into your R session"
  },
  {
    "objectID": "sessions/tasks/data-tibbles.html#create-a-tibble",
    "href": "sessions/tasks/data-tibbles.html#create-a-tibble",
    "title": "",
    "section": "2 Create a tibble",
    "text": "2 Create a tibble\nUse the vectors species, brainwt_kg, bodywt_kg from before and combine them in a tibble."
  },
  {
    "objectID": "sessions/tasks/data-tibbles.html#explore-the-tibble",
    "href": "sessions/tasks/data-tibbles.html#explore-the-tibble",
    "title": "",
    "section": "3 Explore the tibble",
    "text": "3 Explore the tibble\nExplore the tibble you created with the different functions that you learned in the presentation. You can for example try\n\nview() and explore what you can do in the view window that opens: searching, filtering, sorting columns\nsummary()\n…"
  },
  {
    "objectID": "sessions/tasks/data-tibbles.html#index-filter-and-select",
    "href": "sessions/tasks/data-tibbles.html#index-filter-and-select",
    "title": "",
    "section": "4 Index, filter and select",
    "text": "4 Index, filter and select\nNow let’s try some indexing on the data.\n\nRows 1, 5, and 7 and the columns species and bodywt_kg\nFilter rows 1 to 10, all columns\nSelect the column bodywt_kg as a vector"
  },
  {
    "objectID": "sessions/tasks/data-tibbles.html#extra",
    "href": "sessions/tasks/data-tibbles.html#extra",
    "title": "",
    "section": "5 Extra",
    "text": "5 Extra\n\nSelect the last column of the last row without using the row and column index (so don’t use any numbers in this command)\nCalculate the mean of the bodywt_kg column and save it in a variable\nAdd a new column to the data called ratio_body_brain with the ratio of the columns bodywt_kg and brainwt_kg"
  },
  {
    "objectID": "sessions/tasks/ggplot.html",
    "href": "sessions/tasks/ggplot.html",
    "title": "",
    "section": "",
    "text": "A helpful resource to consult for this task can be the ggplot2 cheatsheet.\nRemember to put library(tidyverse) (or library(ggplot2)) on top of your script to access the ggplot functions.\nTo practice plotting with the ggplot2 package, we will use a data set on 3 species of penguins on islands in Antarctica.\n\n\n\n\n\nArtwork by Allison Horst\n\n\n\n\nThe data is available from the palmerpenguins package. To get it, you have to:\n\nInstall the package with install.packages(\"palmerpenguins\")\nLoad the package at the beginning of your script with library(palmerpenguins)\n\nThe data set is called penguins:\n\nThe data set is available after you loaded the package\nJust type penguins in the console and you should see the penguins tibble\nFind a description of the variables in the help page ?penguins\n\nTake a moment to get familiar with the data set and its variables."
  },
  {
    "objectID": "sessions/tasks/ggplot.html#get-started",
    "href": "sessions/tasks/ggplot.html#get-started",
    "title": "",
    "section": "",
    "text": "A helpful resource to consult for this task can be the ggplot2 cheatsheet.\nRemember to put library(tidyverse) (or library(ggplot2)) on top of your script to access the ggplot functions.\nTo practice plotting with the ggplot2 package, we will use a data set on 3 species of penguins on islands in Antarctica.\n\n\n\n\n\nArtwork by Allison Horst\n\n\n\n\nThe data is available from the palmerpenguins package. To get it, you have to:\n\nInstall the package with install.packages(\"palmerpenguins\")\nLoad the package at the beginning of your script with library(palmerpenguins)\n\nThe data set is called penguins:\n\nThe data set is available after you loaded the package\nJust type penguins in the console and you should see the penguins tibble\nFind a description of the variables in the help page ?penguins\n\nTake a moment to get familiar with the data set and its variables."
  },
  {
    "objectID": "sessions/tasks/ggplot.html#exploratory-plots",
    "href": "sessions/tasks/ggplot.html#exploratory-plots",
    "title": "",
    "section": "2 Exploratory plots",
    "text": "2 Exploratory plots\nExplore the data set and it’s variables with ggplot. Below, you find some suggestions for plots. You can start with the plot type your are most interested in and then continue from there. You don’t have to finish all the plots If you have your own ideas for interesting plots with the penguin data set, feel free to deviate from the tasks.\nIn this exploratory section, don’t worry about the beauty of your plots. This task is about exploring the data and testing different visualization options.\n\n2.1 Relationship between bill length and bill depth (scatterplot)\nWhat is the relationship between bill length and bill depth?\n\nCreate a scatterplot with bill length on the x-axis and bill depth on the y-axis\nCan you add a regression line?\nAdd species as color aesthetic. Does your interpretation of the data change?\n\nWhat is the difference between adding color as a global aesthetic or as a local aesthetic of the point layer?\n\nAdd species as shape aesthetic to distinguish the species\n\n\n\n2.2 Difference in flipper length between species (boxplot)\nIs there a difference in flipper length between the species?\n\nCreate a boxplot of the flipper length (y-axis) for the different species (x-axis)\nTry adding notches to the boxplots\nExtra: Add a layer with geom_point(). Try setting position = position_jitter() as argument in the point layer. What does it do?\n\n\n\n2.3 Differences between body mass of male and female penguins (boxplot)\nAre male penguins heavier than female penguins? And is this different between the 3 species?\n\nCreate a boxplot with body mass on the y axis and sex on the x axis\nAdd the difference between penguin species to this plot. Try the different options ggplot offers\n\nSpecies as color aesthetic\nSpecies as fill aesthetic\nSpecies as facet using facet_wrap\n\nExtra: What happens if you use geom_violin instead of geom_boxplot? Can you combine both geoms in one plot?\n\n\n\n2.4 Distribution of flipper length between species (histogram)\nMake a histogram of the the flipper length separated by species.\nTry different methods of separating the species (color or facet).\nCompare stacked and overlapping histograms.\n\n\n2.5 Penguin flipper length by species and sex (heatmap)\nCreate a heat map that shows:\n\nThe categories sex and species on x- and y-axis\nThe flipper length as color"
  },
  {
    "objectID": "sessions/tasks/ggplot.html#beautify-the-plots",
    "href": "sessions/tasks/ggplot.html#beautify-the-plots",
    "title": "",
    "section": "3 Beautify the plots",
    "text": "3 Beautify the plots\nFirst, choose one of the tasks 1.3.1 or 1.3.2, then do task 1.4 on saving plots. If you still have time, you can come back to the task you didn’t do.\nBut also here, if you have other ideas, feel free to deviate from the tasks.\n\n3.1 Beautify the plots from Task 1\nTake a plot you did in the previous task and make it look nicer.\nHere’s a list of ideas:\n\nAdd a theme layer\nCustomize the theme, e.g.\n\nChange the position of the legend\nMake the axis titles bold\n\nChange the color/fill scale of the plot\n\nUse scale_color_manual or scale_fill_manual\nTry scale_color_viridis_d() or scale_fill_viridis_d() with different options\nTry a color scale from the paletteer package\n\nFirst you have to install the package, then have a look at the available palettes\n\n\nChange the labels of the x- and y-axis and add a title to the plot\nMake the points transparent, give them a different shape, …\n\n\n\n3.2 Can you reproduce this plot?\nTake a look at this plot:\n\n\n\n\n\nVisualization from the palmerpenguins package\n\n\n\n\nIt is similar to the one from Task 1.3.1 but more beautiful. Can you reproduce this plot?\nThe colors that are used are:\n\npenguin_cols &lt;- c(\"darkorange\", \"purple\", \"cyan4\")"
  },
  {
    "objectID": "sessions/tasks/ggplot.html#save-one-of-the-plots-on-your-machine",
    "href": "sessions/tasks/ggplot.html#save-one-of-the-plots-on-your-machine",
    "title": "",
    "section": "4 Save one of the plots on your machine",
    "text": "4 Save one of the plots on your machine\nSave one of the plots you produced in a variable and then use ggsave to save the plot on your machine. Save the plot in a dedicated plot directory in your RStudio project.\nNote: Make sure the path where you save the image exists. If you e.g. want to save in img/, then you first have to create the img folder in your project directory. For this you can use the Files pane of RStudio."
  },
  {
    "objectID": "sessions/tasks/ggplot.html#references",
    "href": "sessions/tasks/ggplot.html#references",
    "title": "",
    "section": "5 References",
    "text": "5 References\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi: 10.5281/zenodo.3960218."
  },
  {
    "objectID": "sessions/tasks/intro-rstudio.html",
    "href": "sessions/tasks/intro-rstudio.html",
    "title": "",
    "section": "",
    "text": "Before you get started, there is an important setting that you should change in RStudio. By default, RStudio will save the workspace of your current session in an .Rdata file. This would allow you to start the next session exactly where you left it by loading the .Rdata file.\nThis is not a good default. We always want to start R from a clean slate to ensure reproducibility and minimize error potential.\nIn RStudio go to Tools -&gt; Global Options -&gt; General and\n\nRemove the check mark for “Restore .RData into workspace at startup”\nNever “Save workspace to .RData on exit”"
  },
  {
    "objectID": "sessions/tasks/intro-rstudio.html#change-settings",
    "href": "sessions/tasks/intro-rstudio.html#change-settings",
    "title": "",
    "section": "",
    "text": "Before you get started, there is an important setting that you should change in RStudio. By default, RStudio will save the workspace of your current session in an .Rdata file. This would allow you to start the next session exactly where you left it by loading the .Rdata file.\nThis is not a good default. We always want to start R from a clean slate to ensure reproducibility and minimize error potential.\nIn RStudio go to Tools -&gt; Global Options -&gt; General and\n\nRemove the check mark for “Restore .RData into workspace at startup”\nNever “Save workspace to .RData on exit”"
  },
  {
    "objectID": "sessions/tasks/intro-rstudio.html#create-an-rstudio-project",
    "href": "sessions/tasks/intro-rstudio.html#create-an-rstudio-project",
    "title": "",
    "section": "2 Create an RStudio project",
    "text": "2 Create an RStudio project\nCreate an RStudio project for all the scripts, notes, data, etc. from this workshop:\n\nCreate a project in a directory of your choice following the instructions from the slides\nUse the Files pane in RStudio to create a basic folder structure in your project which will be filled with files in the next days:\n\n\nFolder data/ for all data files\nFolder R/ for all R scripts\nFolder docs/ for other documents (e.g. lecture notes or slides)\nYou can always change the structure of your project later\n\nYou can add files to your project either directly in RStudio, or in the file explorer of your operating system."
  },
  {
    "objectID": "sessions/tasks/intro-rstudio.html#add-an-r-script-to-the-project",
    "href": "sessions/tasks/intro-rstudio.html#add-an-r-script-to-the-project",
    "title": "",
    "section": "3 Add an R script to the project",
    "text": "3 Add an R script to the project\n\nCreate a new R script and save it in the R/ folder of your project\nCopy and paste the code from below into your script\n\nDon’t worry if you don’t understand the code yet, we will learn all this later\n\nRun the code in the script line by line. Try both, running code using the Run button (in the top right corner of your script pane) and the keyboard shortcut Ctrl/Cmd + Enter\n\nFor each line that you run, observe what is happening to the different panes (console, environment, …) in RStudio. Can you explain what is happening?\n\n\n\n# Look at the first lines of the iris dataset\nhead(iris)\n# What is the iris dataset -&gt; Call the help\n?iris\n# How many rows and columns does the data set have?\nrownum &lt;- nrow(iris)\ncolnum &lt;- ncol(iris)\nprint(paste0(\"The iris dataset has \", rownum, \" rows and \", colnum, \" columns.\"))\n# Some summary statistics on the iris data set\nsummary(iris)\n\n# create a plot\nplot(iris$Petal.Length, iris$Petal.Width,\n  xlab = \"Petal Length\",\n  ylab = \"Petal Width\",\n  main = \"Petal Width vs Petal Length\",\n  pch = 20,\n  col = ifelse(iris$Species == \"setosa\", \"coral1\",\n    ifelse(iris$Species == \"virginica\", \"cyan4\",\n      ifelse(iris$Species == \"versicolor\",\n        \"darkgoldenrod2\", \"grey\"\n      )\n    )\n  )\n)\n# add a legend\nlegend(\"bottomright\", c(\"setosa\", \"virginica\", \"versicolor\"),\n  col = c(\"coral1\", \"cyan4\", \"darkgoldenrod2\"), pch = 20\n)"
  },
  {
    "objectID": "sessions/tasks/intro-rstudio.html#extras",
    "href": "sessions/tasks/intro-rstudio.html#extras",
    "title": "",
    "section": "4 Extras",
    "text": "4 Extras\n\nGo back to the Global options and check out the Appearance section. If you want you can change the look of RStudio there"
  },
  {
    "objectID": "sessions/tasks/tests.html",
    "href": "sessions/tasks/tests.html",
    "title": "",
    "section": "",
    "text": "We will again use the penguins tibble from the palmerpenguins package for this task.\nSo before you get started with the exercise, make sure that you load the palmerpenguins package and the tidyverse\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)"
  },
  {
    "objectID": "sessions/tasks/tests.html#get-started",
    "href": "sessions/tasks/tests.html#get-started",
    "title": "",
    "section": "",
    "text": "We will again use the penguins tibble from the palmerpenguins package for this task.\nSo before you get started with the exercise, make sure that you load the palmerpenguins package and the tidyverse\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)"
  },
  {
    "objectID": "sessions/tasks/tests.html#compare-the-flipper-length-of-penguins-using-statistical-tests",
    "href": "sessions/tasks/tests.html#compare-the-flipper-length-of-penguins-using-statistical-tests",
    "title": "",
    "section": "2 Compare the flipper length of penguins using statistical tests",
    "text": "2 Compare the flipper length of penguins using statistical tests\nQuestion: Does the mean flipper length differ between the 3 penguin species?\nDo separate comparisons for\n\nGentoo vs. Adelie\nGentoo vs. Chinstrap\nAdelie vs. Chinstrap\n\nBefore you start, create a subset of each species as a vector.\nFor this, you can use the $ operator:\n\nadelie &lt;- filter(penguins, species == \"Adelie\")$flipper_length_mm\nchinstrap &lt;- filter(penguins, species == \"Chinstrap\")$flipper_length_mm\ngentoo &lt;- filter(penguins, species == \"Gentoo\")$flipper_length_mm\n\nFollow the decision tree for statistical tests:"
  },
  {
    "objectID": "sessions/tasks/tests.html#extra",
    "href": "sessions/tasks/tests.html#extra",
    "title": "",
    "section": "3 Extra",
    "text": "3 Extra\nCreate a plot to show the results of your tests. Choose one of the following:\n\nCreate a boxplot with notches to visually compare differences in flipper length between species\nMake a plot showing the mean and standard error of the mean as pointrange or point with errorbars\n\nAdd a geom_signif() layer to the plot you just created to indicate your test results"
  }
]