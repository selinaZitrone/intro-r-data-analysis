{
  "articles": [
    {
      "path": "01_solutions_controller.html",
      "title": "Solutions for day 1",
      "author": [],
      "contents": "\r\n\r\nContents\r\n2\r\nWorking with vectors\r\nExtras\r\n\r\n3 Tibbles\r\n3.2 Creating\r\na tibble\r\n3.3\r\nExploring the tibble\r\n3.4 Indexing and selecting\r\n\r\n4 Reading and writing tibbles\r\n3.1 Create a tibble and write\r\nit\r\n3.2 Read data\r\ninto R\r\n\r\nReference\r\n\r\nDownload an R script with the solutions from day 1 from\r\nhere.\r\n\r\n2 Working with vectors\r\n\r\n\r\n\r\nYou have the following three vectors:\r\n\r\n\r\nspecies <- c(\r\n  \"MountainBeaver\", \"Cow\", \"GreyWolf\", \"Goat\",\r\n  \"GuineaPig\", \"Diplodocus\", \"AsianElephant\", \"Donkey\",\r\n  \"Horse\", \"PotarMonkey\", \"Cat\", \"Giraffe\",\r\n  \"Gorilla\", \"Human\", \"AfricanElephant\", \"Triceratops\",\r\n  \"RhesusMonkey\", \"Kangaroo\", \"GoldenHamster\", \"Mouse\",\r\n  \"Rabbit\", \"Sheep\", \"Jaguar\", \"Chimpanzee\",\r\n  \"Rat\", \"Brachiosaurus\", \"Mole\", \"Pig\"\r\n)\r\n\r\nbodywt_kg <- c(\r\n  1.4, 465, 36.3, 27.7, 1., 11700, 2547, 187.1,\r\n  521, 10, 3.3, 529, 207, 62, 6654, 9400,\r\n  6.8, 35, 0.1, 0.02, 2.5, 55.5, 100, 52.2,\r\n  0.3, 87000, 0.1, 192\r\n)\r\n\r\nbrainwt_g <- c(\r\n  8.1, 423, 119.5, 115, 5.5, 50, 4603, 419, 655, 115, 25.6,\r\n  680, 406, 1320, 5712, 70, 179, 56, 1, 0.4, 12.1, 175,\r\n  157, 440, 1.9, 154.5, 3, 180\r\n)\r\n\r\n\r\nCheck which of the following animals are contained in the\r\nspecies vector:\r\nNote: If you use %in% to check if elements are contained\r\nin a vector, the result vector is of the same length as the vector that\r\nis before the %in%\r\n\r\n\r\nanimals_to_check <- c(\"Snail\", \"Goat\", \"Chimpanzee\", \"Rat\", \"Dragon\", \"Eagle\")\r\n# Goes through every element in species and returns TRUE if it appears in animals_to_check\r\nspecies %in% animals_to_check\r\n\r\n [1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r\n[12] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r\n[23] FALSE  TRUE  TRUE FALSE FALSE FALSE\r\n\r\n# Goes through every element in animals_to_check and returns TRUE if it appears in species\r\nanimals_to_check %in% species\r\n\r\n[1] FALSE  TRUE  TRUE  TRUE FALSE FALSE\r\n\r\nConvert brain weight from g to kg:\r\nNote: dividing a vector of length n by a vector of length 1 (i.e. a\r\nsingle number), the result is a vector of length n again.\r\n\r\n\r\nbrainwt_kg <- brainwt_g / 1000\r\n\r\n\r\nCalculate mean and standard deviation of brain weight:\r\n\r\n\r\nmean(brainwt_kg)\r\n\r\n[1] 0.5745214\r\n\r\nsd(brainwt_kg)\r\n\r\n[1] 1.334929\r\n\r\nWhich species have brain weight larger than the mean brain weight of\r\nall species?\r\n\r\n\r\nspecies[brainwt_kg > mean(brainwt_kg)]\r\n\r\n[1] \"AsianElephant\"   \"Horse\"           \"Giraffe\"        \r\n[4] \"Human\"           \"AfricanElephant\"\r\n\r\nCalculate the ratio brain weight / body weight in percent and save\r\nit in a vector:\r\n\r\n\r\nbrain_body_ratio <- brainwt_kg / bodywt_kg * 100\r\n\r\n\r\nWhich\r\nanimals have a larger brain to body weight ratio than humans?\r\nStep 1: Look at the brain to body ratio of humans\r\n\r\n\r\nbrain_body_ratio[species == \"Human\"]\r\n\r\n[1] 2.129032\r\n\r\nStep 2: Compare it with the other animals\r\n\r\n\r\n# New variable for human brain to body ratio\r\nbbr_human <- brain_body_ratio[species == \"Human\"]\r\n# Are there animals that have a larger brain to body ratio than humans?\r\nbrain_body_ratio > bbr_human\r\n\r\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r\n[12] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\r\n[23] FALSE FALSE FALSE FALSE  TRUE FALSE\r\n\r\n# Which are these animals\r\nspecies[brain_body_ratio > bbr_human]\r\n\r\n[1] \"RhesusMonkey\" \"Mole\"        \r\n\r\n\r\n# or short\r\nspecies[brain_body_ratio > brain_body_ratio[species == \"Human\"]]\r\n\r\n[1] \"RhesusMonkey\" \"Mole\"        \r\n\r\nExtras\r\nRound the vector to 4 decimal places:\r\n\r\n\r\nbrain_body_ratio <- round(brain_body_ratio, digits = 4)\r\n\r\n\r\nWhich animal has the smallest brain to body ratio?\r\n\r\n\r\nspecies[brain_body_ratio == min(brain_body_ratio)]\r\n\r\n[1] \"Brachiosaurus\"\r\n\r\nThe Brachiosaurus has a really small brain with a weight of just\r\n154.5 g at a body weight of 87000 kg!\r\nAdd elements to the vector\r\n\r\n\r\nspecies_new <- c(\"Eagle\", \"Snail\", \"Lion\")\r\nbrainwt_g_new <- c(40, NA, 500)\r\nbodywt_kg_new <- c(18, 0.01, 550)\r\n\r\nspecies <- c(species, species_new)\r\nbrainwt_g <- c(brainwt_g, brainwt_g_new)\r\nbodywt_kg <- c(bodywt_kg, bodywt_kg_new)\r\n\r\n\r\nWhat is the mean brain weight now?\r\n\r\n\r\nmean(brainwt_g)\r\n\r\n[1] NA\r\n\r\n# na.rm = TRUE removes missing values before calculating the mean\r\nmean(brainwt_g, na.rm = TRUE)\r\n\r\n[1] 554.22\r\n\r\n\r\n\r\n[1] FALSE\r\n\r\n3 Tibbles\r\n3.2 Creating a tibble\r\nUse the vectors species, brainwt_kg,\r\nbodywt_kg from the last task and put them in a tibble.\r\n\r\n\r\n# install.packages(\"tibble\")\r\nlibrary(tibble)\r\n\r\nspecies <- c(\r\n  \"MountainBeaver\", \"Cow\", \"GreyWolf\", \"Goat\",\r\n  \"GuineaPig\", \"Diplodocus\", \"AsianElephant\", \"Donkey\",\r\n  \"Horse\", \"PotarMonkey\", \"Cat\", \"Giraffe\",\r\n  \"Gorilla\", \"Human\", \"AfricanElephant\", \"Triceratops\",\r\n  \"RhesusMonkey\", \"Kangaroo\", \"GoldenHamster\", \"Mouse\",\r\n  \"Rabbit\", \"Sheep\", \"Jaguar\", \"Chimpanzee\",\r\n  \"Rat\", \"Brachiosaurus\", \"Mole\", \"Pig\"\r\n)\r\n\r\nbodywt_kg <- c(\r\n  1.4, 465, 36.3, 27.7, 1., 11700, 2547, 187.1,\r\n  521, 10, 3.3, 529, 207, 62, 6654, 9400,\r\n  6.8, 35, 0.1, 0.02, 2.5, 55.5, 100, 52.2,\r\n  0.3, 87000, 0.1, 192\r\n)\r\n\r\nbrainwt_g <- c(\r\n  8.1, 423, 119.5, 115, 5.5, 50, 4603, 419, 655, 115, 25.6,\r\n  680, 406, 1320, 5712, 70, 179, 56, 1, 0.4, 12.1, 175,\r\n  157, 440, 1.9, 154.5, 3, 180\r\n)\r\n# Creating the tibble \r\nanimals <- tibble(\r\n  species = species,\r\n  bodywt_kg = bodywt_kg,\r\n  brainwt_kg = brainwt_g / 1000\r\n)\r\n\r\n\r\n3.3 Exploring the tibble\r\nIn the view window that opens, you have some options to filter the\r\ndata and sort rows.\r\n\r\n\r\nview(animals)\r\n\r\n\r\n\r\n\r\nsummary(animals)\r\n\r\n   species            bodywt_kg          brainwt_kg     \r\n Length:28          Min.   :    0.02   Min.   :0.00040  \r\n Class :character   1st Qu.:    3.10   1st Qu.:0.02223  \r\n Mode  :character   Median :   53.85   Median :0.13700  \r\n                    Mean   : 4278.44   Mean   :0.57452  \r\n                    3rd Qu.:  479.00   3rd Qu.:0.42000  \r\n                    Max.   :87000.00   Max.   :5.71200  \r\n\r\nstr(animals)\r\n\r\ntibble [28 x 3] (S3: tbl_df/tbl/data.frame)\r\n $ species   : chr [1:28] \"MountainBeaver\" \"Cow\" \"GreyWolf\" \"Goat\" ...\r\n $ bodywt_kg : num [1:28] 1.4 465 36.3 27.7 1 ...\r\n $ brainwt_kg: num [1:28] 0.0081 0.423 0.1195 0.115 0.0055 ...\r\n\r\nnrow(animals)\r\n\r\n[1] 28\r\n\r\nncol(animals)\r\n\r\n[1] 3\r\n\r\nnames(animals)\r\n\r\n[1] \"species\"    \"bodywt_kg\"  \"brainwt_kg\"\r\n\r\n3.4 Indexing and selecting\r\nRows 1, 5, and 7 and the columns species and\r\nbodywt_kg\r\n\r\n\r\nanimals[c(1,5,7), c(\"species\", \"bodywt_kg\")]\r\n\r\n# A tibble: 3 x 2\r\n  species        bodywt_kg\r\n  <chr>              <dbl>\r\n1 MountainBeaver       1.4\r\n2 GuineaPig            1  \r\n3 AsianElephant     2547  \r\n\r\nSelect rows 1 to 10, all columns\r\n\r\n\r\nanimals[1:10, ]\r\n\r\n# A tibble: 10 x 3\r\n   species        bodywt_kg brainwt_kg\r\n   <chr>              <dbl>      <dbl>\r\n 1 MountainBeaver       1.4     0.0081\r\n 2 Cow                465       0.423 \r\n 3 GreyWolf            36.3     0.120 \r\n 4 Goat                27.7     0.115 \r\n 5 GuineaPig            1       0.0055\r\n 6 Diplodocus       11700       0.05  \r\n 7 AsianElephant     2547       4.60  \r\n 8 Donkey             187.      0.419 \r\n 9 Horse              521       0.655 \r\n10 PotarMonkey         10       0.115 \r\n\r\nSelect the column bodywt_kg as a vector using\r\n$\r\n\r\n\r\nanimals$bodywt_kg\r\n\r\n [1]     1.40   465.00    36.30    27.70     1.00 11700.00  2547.00\r\n [8]   187.10   521.00    10.00     3.30   529.00   207.00    62.00\r\n[15]  6654.00  9400.00     6.80    35.00     0.10     0.02     2.50\r\n[22]    55.50   100.00    52.20     0.30 87000.00     0.10   192.00\r\n\r\nExtra\r\nSelect the last column of the last row without using the row and\r\ncolumn index (so don’t use any numbers in this command)\r\n\r\n\r\nanimals[nrow(animals), ncol(animals)]\r\n\r\n# A tibble: 1 x 1\r\n  brainwt_kg\r\n       <dbl>\r\n1       0.18\r\n\r\nCalculate the mean of the bodywt_kg column and save it\r\nin a variable\r\n\r\n\r\nmean_wt <- mean(animals$bodywt_kg)\r\nmean_wt\r\n\r\n[1] 4278.44\r\n\r\nAdd a new column to the data called ratio_body_brain\r\nwith the ratio of the columns bodywt_kg and\r\nbrainwt_kg\r\n\r\n\r\nanimals$ratio_body_brain <- animals$bodywt_kg / animals$brainwt_kg\r\nanimals\r\n\r\n# A tibble: 28 x 4\r\n   species        bodywt_kg brainwt_kg ratio_body_brain\r\n   <chr>              <dbl>      <dbl>            <dbl>\r\n 1 MountainBeaver       1.4     0.0081            173. \r\n 2 Cow                465       0.423            1099. \r\n 3 GreyWolf            36.3     0.120             304. \r\n 4 Goat                27.7     0.115             241. \r\n 5 GuineaPig            1       0.0055            182. \r\n 6 Diplodocus       11700       0.05           234000  \r\n 7 AsianElephant     2547       4.60              553. \r\n 8 Donkey             187.      0.419             447. \r\n 9 Horse              521       0.655             795. \r\n10 PotarMonkey         10       0.115              87.0\r\n# ... with 18 more rows\r\n\r\n\r\n\r\n[1] FALSE\r\n\r\n4 Reading and writing tibbles\r\n3.1 Create a tibble and write\r\nit\r\nLoad the package and create the tibble:\r\n\r\n\r\nlibrary(tidyverse)\r\n\r\nspecies <- c(\r\n  \"MountainBeaver\", \"Cow\", \"GreyWolf\", \"Goat\",\r\n  \"GuineaPig\", \"Diplodocus\", \"AsianElephant\", \"Donkey\",\r\n  \"Horse\", \"PotarMonkey\", \"Cat\", \"Giraffe\",\r\n  \"Gorilla\", \"Human\", \"AfricanElephant\", \"Triceratops\",\r\n  \"RhesusMonkey\", \"Kangaroo\", \"GoldenHamster\", \"Mouse\",\r\n  \"Rabbit\", \"Sheep\", \"Jaguar\", \"Chimpanzee\",\r\n  \"Rat\", \"Brachiosaurus\", \"Mole\", \"Pig\"\r\n)\r\n\r\nbodywt_kg <- c(\r\n  1.4, 465, 36.3, 27.7, 1., 11700, 2547, 187.1,\r\n  521, 10, 3.3, 529, 207, 62, 6654, 9400,\r\n  6.8, 35, 0.1, 0.02, 2.5, 55.5, 100, 52.2,\r\n  0.3, 87000, 0.1, 192\r\n)\r\n\r\nbrainwt_g <- c(\r\n  8.1, 423, 119.5, 115, 5.5, 50, 4603, 419, 655, 115, 25.6,\r\n  680, 406, 1320, 5712, 70, 179, 56, 1, 0.4, 12.1, 175,\r\n  157, 440, 1.9, 154.5, 3, 180\r\n)\r\n# Creating the tibble \r\nanimals <- tibble(\r\n  species = species,\r\n  bodywt_kg = bodywt_kg,\r\n  brainwt_kg = brainwt_g / 1000\r\n)\r\n\r\n\r\n\r\nWriting the data to disk:\r\nNote: In order for this command to work, the /data\r\ndirectory must already be present in your working directory.\r\n\r\n\r\nwrite_csv(x = animals, file = \"./data/animals.csv\") # write as csv\r\nwrite_tsv(x = animals, file = \"./data/animals.txt\") # write as txt\r\n\r\n\r\n3.2 Read data into R\r\nRead the same data back into R:\r\n\r\n\r\nanimals_csv <- read_csv(\"./data/animals.csv\") # read the csv\r\nanimals_tsv <- read_tsv(\"./data/animals.txt\") # read the txt\r\n\r\n\r\nIf you use the Files pane to open data files, you can\r\nview them in R Studio. For csv files, you have the additional option to\r\nclick on an Import Dataset button.\r\n\r\n\r\n\r\nIf you click on this button, have the possibility to import the data\r\nset via a graphical user interface.\r\n\r\n\r\n\r\nThis is quite useful because you can preview your data and make sure\r\nthat all the options are set correctly for importing. You can do this if\r\nyou are not sure about the correct read_*() function\r\narguments.\r\nJust play with these different options of reading data into R and\r\nfind one that fits you best.\r\n\r\n\r\n[1] FALSE\r\n\r\nReference\r\nWolfram Research, “Sample Data: Animal Weights” from the Wolfram Data\r\nRepository (2016) https://doi.org/10.24097/wolfram.43616.data\r\n\r\n\r\n\r\n",
      "last_modified": "2022-08-26T15:50:00+02:00"
    },
    {
      "path": "01_tasks_controller.html",
      "title": "Tasks for day 1",
      "author": [],
      "contents": "\r\n\r\nContents\r\n1 Set up an RStudio project\r\n1.1 Change\r\nsettings\r\n1.2 Create an RStudio\r\nproject\r\n1.3 Add an R script to the\r\nproject\r\n\r\n2\r\nWorking with vectors\r\n3 Tibbles\r\n3.1 Getting started with\r\ntibbles\r\n3.2 Creating\r\na tibble\r\n3.3\r\nExploring the tibble\r\n3.4 Indexing and selecting\r\n\r\n4 Reading and writing tibbles\r\n3.1 Getting\r\nstarted with readr and the tidyverse\r\n3.2 Write a tibble to disk\r\n3.3 Read data\r\ninto R\r\n\r\nReference\r\n\r\n1 Set up an RStudio project\r\n1.1 Change settings\r\nBefore you get started, there is an important setting that you should\r\nchange in RStudio. By default, RStudio will save the workspace of your\r\ncurrent session in an .Rdata file. This would allow you to\r\nstart the next session exactly where you left it by loading the\r\n.Rdata file.\r\nThis is not a good default. We always want to start R from a clean\r\nslate to ensure reproducibility and minimize error potential.\r\nIn RStudio go to\r\nTools -> Global Options -> General and\r\nRemove the check mark for “Restore .RData into\r\nworkspace at startup”\r\nNever save workspace to .RData on\r\nexit\r\n\r\n\r\n\r\n1.2 Create an RStudio project\r\nCreate an RStudio project for all the scripts, notes, data, etc. from\r\nthis workshop.\r\nCreate a project in a directory of your choice following the\r\ninstructions from the slides\r\nUse the File pane in RStudio to create a basic folder\r\nstructure in your project which will be filled with files in the next\r\ndays\r\nE.g. create the folders data, R,\r\ndocuments,…\r\nYou can always change the structure of your project later, but for\r\nnow, we want some basic folders that we can navigate\r\n\r\nYou can add files to your project either directly in RStudio, or in\r\nthe file explorer of your operating system.\r\n1.3 Add an R script to the\r\nproject\r\nCreate a new R script and save it in the appropriate folder of your\r\nproject (e.g. scripts or R)\r\nCopy and paste the code from below into your script\r\nDon’t worry if you don’t understand the code yet, we will learn all\r\nthis later\r\n\r\nRun the code in the script line by line. Try both, running code\r\nusing the Run button (in the top right corner of your\r\nscript pane) and the keyboard shortcut\r\nCtrl/Cmd + Enter/Return\r\nFor each line that you run, observe what is happening to the\r\ndifferent panes (console, environment, …) in RStudio. Can you explain\r\nwhat is happening?\r\n\r\n\r\n\r\n# Look at the first lines of the iris dataset\r\nhead(iris)\r\n# What is the iris dataset -> Call the help\r\n?iris\r\n# How many rows and columns does the data set have?\r\nrownum <- nrow(iris)\r\ncolnum <- ncol(iris)\r\nprint(paste0(\"The iris dataset has \", rownum, \" rows and \", colnum, \" columns.\"))\r\n# Some summary statistics on the iris data set\r\nsummary(iris)\r\n\r\n# create a plot\r\nplot(iris$Petal.Length, iris$Petal.Width,\r\n  xlab = \"Petal Length\",\r\n  ylab = \"Petal Width\",\r\n  main = \"Petal Width vs Petal Length\",\r\n  pch = 20,\r\n  col = ifelse(iris$Species == \"setosa\", \"coral1\",\r\n    ifelse(iris$Species == \"virginica\", \"cyan4\",\r\n      ifelse(iris$Species == \"versicolor\",\r\n        \"darkgoldenrod2\", \"grey\"\r\n      )\r\n    )\r\n  )\r\n)\r\n# add a legend\r\nlegend(\"bottomright\", c(\"setosa\", \"virginica\", \"versicolor\"),\r\n  col = c(\"coral1\", \"cyan4\", \"darkgoldenrod2\"), pch = 20\r\n)\r\n\r\n\r\n\r\n\r\n2 Working with vectors\r\n\r\n\r\nYou have the following three vectors:\r\nspecies: name of the species\r\nbodywt_kg: body weight of the species in kg\r\nbrainwt_g: brain weight of the species in g\r\n\r\n\r\nspecies <- c(\r\n  \"MountainBeaver\", \"Cow\", \"GreyWolf\", \"Goat\",\r\n  \"GuineaPig\", \"Diplodocus\", \"AsianElephant\", \"Donkey\",\r\n  \"Horse\", \"PotarMonkey\", \"Cat\", \"Giraffe\",\r\n  \"Gorilla\", \"Human\", \"AfricanElephant\", \"Triceratops\",\r\n  \"RhesusMonkey\", \"Kangaroo\", \"GoldenHamster\", \"Mouse\",\r\n  \"Rabbit\", \"Sheep\", \"Jaguar\", \"Chimpanzee\",\r\n  \"Rat\", \"Brachiosaurus\", \"Mole\", \"Pig\"\r\n)\r\n\r\nbodywt_kg <- c(\r\n  1.4, 465, 36.3, 27.7, 1., 11700, 2547, 187.1,\r\n  521, 10, 3.3, 529, 207, 62, 6654, 9400,\r\n  6.8, 35, 0.1, 0.02, 2.5, 55.5, 100, 52.2,\r\n  0.3, 87000, 0.1, 192\r\n)\r\n\r\nbrainwt_g <- c(\r\n  8.1, 423, 119.5, 115, 5.5, 50, 4603, 419, 655, 115, 25.6,\r\n  680, 406, 1320, 5712, 70, 179, 56, 1, 0.4, 12.1, 175,\r\n  157, 440, 1.9, 154.5, 3, 180\r\n)\r\n\r\n\r\nCopy and paste the vectos into your R script and solve the following\r\ntasks.\r\nTasks\r\nCheck which of the following animals are contained in the\r\nspecies vector:\r\n\r\n\r\nanimals_to_check <- c(\"Snail\", \"Goat\", \"Chimpanzee\", \"Rat\", \"Dragon\", \"Eagle\")\r\n\r\n\r\nConvert brain weight from g to kg and save the result in a new\r\nvector brainwt_kg\r\nCalculate mean and standard deviation of the brain weight\r\nHint: have a look at the summary slides to find the functions\r\n\r\nWhich species have a brain weight larger than the mean brain weight\r\nof all species?\r\nCalculate the ratio of brain weight to body weight in percent for\r\nall animals and save the result in a new vector\r\nAre there any animals with a larger brain to body weight ratio than\r\nhumans? If yes, which ones?\r\nHint: calculate the ratio for humans and save it in a separate\r\nvariable first\r\n\r\nExtras\r\nRound the ratio vector to 4 decimal places with the\r\nround function\r\nType ?round into the console to open the help of the\r\nround function\r\n\r\nWhich animal has the smallest brain to body weight ratio?\r\nHint: have a look at the min function\r\n\r\nAdd the following three animals to the data vectors\r\n\r\n\r\nspecies_new <- c(\"Eagle\", \"Snail\", \"Lion\")\r\nbrainwt_g_new <- c(40, NA, 500)\r\nbodywt_kg_new <- c(18, 0.01, 550)\r\n\r\n\r\nNow calculate the mean brain weight again. Can you explain what\r\nhappens? Can you fix it?\r\nHint: have a look at ?mean\r\n\r\n3 Tibbles\r\n3.1 Getting started with\r\ntibbles\r\nBefore you start the task:\r\nInstall the tibble package by calling\r\ninstall.packages(\"tibble\") in the console.\r\nOpen your script for the task and put library(tibble)\r\non top\r\nExecute this line and the tibble package is loaded into your R\r\nsession and ready to use\r\n3.2 Creating a tibble\r\nUse the vectors species, brainwt_kg,\r\nbodywt_kg from before and combine them in a tibble.\r\n3.3 Exploring the tibble\r\nExplore the tibble you created with the different functions that you\r\nlearned in the presentation. You can for example try\r\nview() and explore what you can do in the view window\r\nthat opens: searching, filtering, sorting columns\r\nstr() to view the structure of the data\r\nsummary()\r\n…\r\n3.4 Indexing and selecting\r\nNow let’s try some indexing on the data.\r\nSelect\r\nRows 1, 5, and 7 and the columns species and\r\nbodywt_kg\r\nselect rows 1 to 10, all columns\r\nselect the column bodywt_kg as a vector\r\nExtra\r\nSelect the last column of the last row without using the row and\r\ncolumn index (so don’t use any numbers in this command)\r\nCalculate the mean of the bodywt_kg column and save it\r\nin a variable\r\nAdd a new column to the data called ratio_body_brain\r\nwith the ratio of the columns bodywt_kg and\r\nbrainwt_kg\r\n\r\n4 Reading and writing tibbles\r\n3.1 Getting\r\nstarted with readr and the tidyverse\r\nBefore you start, make sure to install the tidyverse\r\npackages by calling\r\n\r\n\r\ninstall.packages(\"tidyverse\")\r\n\r\n\r\nThis will install readr along with other tidyverse packages.\r\nRemember to put library(tidyverse) (or\r\nlibrary(readr)) on top of your script to access the readr\r\nfunctions.\r\n3.2 Write a tibble to disk\r\nLet’s use the animals tibble from the previous task and\r\nwrite it into the data folder in our project.\r\nBefore writing the tibble\r\nCreate a data sub-directory in your RStudio project (if\r\nyou don’t have one yet)\r\nHint: You can do that from within RStudio by using the\r\nNew Folder button in the Files pane\r\n\r\nNow write the animals tibble to that /data\r\nsub-directory as animals.csv using a comma separator.\r\nCheck if the file was written into the correct folder.\r\n3.3 Read data into R\r\nNow, try to read the data set back into R using the appropriate\r\nread_* function.\r\nExtra\r\nNavigate to your data directory using the\r\nFiles pane of RStudio. Click on both the .csv\r\nfile that you just saved there. What can you do? Try the\r\nImport Dataset button and see what you can do there.\r\n\r\nReference\r\nWolfram Research, “Sample Data: Animal Weights” from the Wolfram Data\r\nRepository (2016) https://doi.org/10.24097/wolfram.43616.data\r\n\r\n\r\n\r\n",
      "last_modified": "2022-08-26T15:50:02+02:00"
    },
    {
      "path": "02_solutions_controller.html",
      "title": "Solutions for day 2",
      "author": [],
      "contents": "\r\n\r\nContents\r\n1 ggplot2\r\n1.1 and\r\n1.2 Getting started with ggplot and palmerpenguins\r\n1.3\r\nExploratory plotting\r\n1.4\r\nBeautify the plots\r\n1.5 Save one of the plots\r\non your machine\r\nSome more\r\nexamples\r\nThe\r\nplotly package\r\nReferences\r\n\r\n2 dplyr\r\n2.2 Data transformation with\r\ndplyr\r\nExtras\r\n\r\n3 tidyr\r\n4.1 Getting started with\r\ntidyr\r\n4.2 Let’s tidy some data sets\r\n\r\n\r\nDownload an R script with the solutions from day 1 from\r\nhere.\r\n\r\n1 ggplot2\r\n1.1 and\r\n1.2 Getting started with ggplot and palmerpenguins\r\n\r\n\r\n# install.packages(\"tidyverse\")\r\n# install.packages(\"palmerpenguins\")\r\nlibrary(tidyverse)\r\nlibrary(palmerpenguins)\r\n\r\n\r\nHave a look at the penguin data set\r\n\r\n\r\npenguins\r\n\r\n\r\n\r\n# A tibble: 344 x 8\r\n  species island    bill_length_mm bill_~1 flipp~2 body_~3 sex    year\r\n  <fct>   <fct>              <dbl>   <dbl>   <int>   <int> <fct> <int>\r\n1 Adelie  Torgersen           39.1    18.7     181    3750 male   2007\r\n2 Adelie  Torgersen           39.5    17.4     186    3800 fema~  2007\r\n3 Adelie  Torgersen           40.3    18       195    3250 fema~  2007\r\n4 Adelie  Torgersen           NA      NA        NA      NA <NA>   2007\r\n5 Adelie  Torgersen           36.7    19.3     193    3450 fema~  2007\r\n6 Adelie  Torgersen           39.3    20.6     190    3650 male   2007\r\n# ... with 338 more rows, and abbreviated variable names\r\n#   1: bill_depth_mm, 2: flipper_length_mm, 3: body_mass_g\r\n\r\n1.3 Exploratory plotting\r\n1.3.1\r\nRelationship between bill length and bill depth (scatterplot)\r\nWhat is the relationship between bill length and bill depth?\r\nCreate a scatterplot with bill length on the x-axis and bill depth\r\non the y-axis\r\nCan you add a regression line?\r\nAdd species as color aesthetic. Does your interpretation of the data\r\nchange?\r\nWhat is the difference between adding color as a global aesthetic or\r\nas a local aesthetic of the point layer?\r\n\r\nAdd species as shape aesthetic as well to distinguish the\r\nspecies\r\n\r\n\r\n# Bill length vs. bill depth scatterplot with regression line\r\nggplot(\r\n  data = penguins,\r\n  aes(\r\n    x = bill_length_mm,\r\n    y = bill_depth_mm\r\n  )\r\n) +\r\n  geom_point() +\r\n  geom_smooth(method = \"lm\", se = FALSE)\r\n\r\n\r\n\r\n\r\n\r\n# or short\r\nggplot(penguins, aes(bill_length_mm, bill_depth_mm)) +\r\n  geom_point() +\r\n  geom_smooth(method = \"lm\", se = FALSE)\r\n\r\n\r\nIf we add the color aesthetic locally to the point layer, only this\r\nlayer will be affected by it. The regression line is not separated by\r\nspecies but still calculated and plotted for all data points\r\ntogether:\r\n\r\n\r\n# Bill length vs. bill depth scatterplot with regression line\r\n# color as aesthetic local to the point layer\r\nggplot(penguins, aes(bill_length_mm, bill_depth_mm)) +\r\n  geom_point(aes(color = species)) +\r\n  geom_smooth(method = \"lm\", se = FALSE)\r\n\r\n\r\n\r\nWe can see an example of the Simpson’s paradox here. If you don’t\r\nconsider species, it looks like the bill depth decreases with bill\r\nlength. But after separating the data by species, we see that the effect\r\nis actually the opposite.\r\nTo draw separate regression lines for the species, we need to either\r\nadd the color aesthetic to the smooth layer as well, or define the color\r\naesthetic gloablly in the top layer ggplot call.\r\n\r\n\r\n# Option A: Define color aesthetic in smooth layer as well\r\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +\r\n  geom_point(aes(color = species)) +\r\n  geom_smooth(aes(color = species),\r\n    method = \"lm\", se = FALSE\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\n1.3.2\r\nDifference in flipper length between species (boxplot)\r\nIs there a difference in flipper length between the species?\r\nCreate a boxplot of the flipper length (y-axis) for the different\r\nspecies (x-axis)\r\nTry adding notches to the boxplots by setting\r\nnotch = TRUE in the boxplot layer\r\nExtra: Add a layer with geom_point().\r\nTry setting position = position_jitter() as argument in the\r\npoint layer. What does it do?\r\n\r\n\r\n# Basic boxplot of flipper length with notches\r\nggplot(penguins, aes(species, flipper_length_mm)) +\r\n  geom_boxplot(notch = TRUE)\r\n\r\n\r\n\r\nA geom_point with\r\nposition = position_jitter() will add the individual data\r\npoints to the plot. It’s important to set a seed here to get the same\r\nresult for the point position on the x-axis every time. Otherwise your\r\nplot is not reproducible.\r\n\r\n\r\nggplot(penguins, aes(species, flipper_length_mm)) +\r\n  geom_boxplot() +\r\n  geom_point(position = position_jitter(seed = 123))\r\n\r\n\r\n\r\n1.3.3\r\nDifferences between body mass of male and female penguins (boxplot)\r\nAre male penguins heavier than female penguins? And is this different\r\nbetween the 3 species?\r\nCreate a boxplot with body mass on the y axis and sex on the x\r\naxis\r\nAdd the difference between penguin species to this plot. Try the\r\ndifferent options ggplot offers\r\nspecies as color aesthetic\r\nspecies as fill aesthetic\r\nspecies as facet using facet_wrap\r\n\r\nExtra: What happens if you use\r\ngeom_violin instead of geom_boxplot? Can you\r\ncombine both geoms in one plot?\r\n\r\n\r\n# Basic boxplot of body mass for penguins of different sex\r\nggplot(penguins, aes(x = sex, y = body_mass_g)) +\r\n  geom_boxplot()\r\n\r\n\r\n\r\nSpecies as color aesthetic:\r\n\r\n\r\nggplot(penguins, aes(x = sex, \r\n                     y = body_mass_g)) +\r\n  geom_boxplot(aes(color = species))\r\n\r\n\r\n\r\nSpecies as fill aesthetic\r\n\r\n\r\nggplot(penguins, aes(x = sex, y = body_mass_g)) +\r\n  geom_boxplot(aes(fill = species))\r\n\r\n\r\n\r\nSpecies as facets:\r\n\r\n\r\nggplot(penguins, aes(x = sex, y = body_mass_g)) +\r\n  geom_boxplot() +\r\n  facet_wrap(~species)\r\n\r\n\r\n\r\nWith geom_violin\r\n\r\n\r\nggplot(penguins, aes(x = sex, y = body_mass_g)) +\r\n  geom_violin() +\r\n  geom_boxplot(width = .4) +\r\n  facet_wrap(~species)\r\n\r\n\r\n\r\n1.4 Beautify the plots\r\n1.4.1 Beatuify plots from 1.3\r\nHere are just some examples of how to make the plots from before\r\nprettier. Of course there a many other options as well.\r\nExample one: Boxplot of flipper length and\r\nspecies\r\n\r\n\r\nggplot(penguins, aes(species, flipper_length_mm, color = species)) +\r\n  geom_boxplot(width = 0.3) +\r\n  geom_point(\r\n    alpha = 0.5,\r\n    position = position_jitter(width = 0.2, seed = 123)\r\n  ) +\r\n  ggsci::scale_color_uchicago() +\r\n  labs(x = \"Species\", y = \"Flipper length (mm)\") +\r\n  theme_minimal() +\r\n  theme(legend.position = \"none\")\r\n\r\n\r\n\r\nWhat was changed compared to the basic plot?\r\nAdd color for each species by setting a global color\r\naesthetic\r\nMake boxes and jitter points less wide by setting width\r\nfor both layers\r\nMake jitter points slightly transparent by specifying\r\nalpha = 0.5 for the jitter layer\r\nChange the color to nicer colors from the ggsci\r\npackage\r\nChange from default theme to theme_minimal()\r\nRemove the legend with legend.position = \"none\"\r\nChange the axis labels with labs()\r\nExample two: Reproducing the plot from the\r\npresentation\r\nThe following code is adapted from the palmerpengins\r\npackage website.\r\n\r\n\r\nggplot(\r\n  data = penguins,\r\n  aes(\r\n    x = bill_length_mm,\r\n    y = bill_depth_mm,\r\n    color = species,\r\n    shape = species\r\n  )\r\n) +\r\n  geom_point(size = 3, alpha = 0.8) +\r\n  geom_smooth(method = \"lm\", se = FALSE) +\r\n  scale_color_manual(values = c(\"darkorange\", \"purple\", \"cyan4\")) +\r\n  labs(\r\n    title = \"Penguin bill dimensions\",\r\n    subtitle = \"Bill length and depth for Adelie, Chinstrap and Gentoo Penguins at Palmer Station LTER\",\r\n    x = \"Bill length (mm)\",\r\n    y = \"Bill depth (mm)\",\r\n    color = \"Penguin species\",\r\n    shape = \"Penguin species\"\r\n  ) +\r\n  theme_minimal() +\r\n  theme(\r\n    legend.position = c(0.85, 0.15),\r\n    legend.background = element_rect(fill = \"white\", color = NA)\r\n  )\r\n\r\n\r\n\r\nWhat was changed compared to the basic plot?\r\nMake points larger and slightly transparent by setting\r\nsize and alpha for the point layer\r\nChange to custom color scale\r\nAdd title and subtitle with labs\r\nChange title of x-axis, y-axis and legend for color and shape\r\naesthetic with labs\r\nUse theme_minimal() instead of default theme\r\nChange legend position to bottom right corner within the plot\r\nPositions are relative to the bottom left corner of the plot\r\n0.85 (85% of plot width) to the right\r\n0.15 (15% of plot height) towards the top\r\n\r\n1.5 Save one of the plots\r\non your machine\r\nExample with one of the plots from above:\r\n\r\n\r\nflipper_box <- ggplot(penguins, aes(species, flipper_length_mm, color = species)) +\r\n  geom_boxplot(width = 0.3) +\r\n  geom_jitter(alpha = 0.5, position = position_jitter(width = 0.2, seed = 123)) +\r\n  ggsci::scale_color_uchicago() +\r\n  labs(x = \"Species\", y = \"Flipper length (mm)\") +\r\n  theme_minimal() +\r\n  theme(legend.position = \"none\")\r\n\r\n\r\n\r\n\r\n# save as png in /img directory of the project\r\nggsave(filename = \"./img/flipper_box.png\", flipper_box)\r\n# save as pdf in /img directory of the project\r\nggsave(filename = \"./img/flipper_box.pdf\", flipper_box)\r\n\r\n\r\nSome more examples\r\nHistogram\r\n\r\n\r\nggplot(penguins, aes(x = flipper_length_mm, fill = species)) +\r\n  geom_histogram(alpha = 0.6) +\r\n  ggsci::scale_fill_d3() +\r\n  labs(\r\n    y = \"Frequency\",\r\n    x = \"Flipper length [mm]\",\r\n    fill = \"Penguin species\"\r\n  ) +\r\n  theme_minimal()\r\n\r\n\r\n\r\nHeat map\r\nFor the penguin data set a heat map does not make that much sense.\r\nBut an example would be:\r\n\r\n\r\nggplot(penguins, aes(\r\n  x = species,\r\n  y = sex,\r\n  fill = flipper_length_mm\r\n)) +\r\n  geom_tile() +\r\n  scale_fill_viridis_c() +\r\n  theme_classic()\r\n\r\n\r\n\r\nThe plotly package\r\nYou can use the plotly package to create interactive\r\nplots where you can e.g. hover over an area of your plot with the mouse\r\nand the respective values will be displayed.\r\nTo get started, you have to install the plotly package\r\n\r\n\r\ninstall.packages(\"plotly\")\r\n\r\n\r\nYou can use any ggplot and wrap it in the ggplotly\r\nfunction from the plotly package to make it interactive,\r\ne.g.\r\n\r\n\r\nplotly::ggplotly(flipper_box)\r\n\r\n\r\n\r\nReferences\r\nCheck out the package\r\nwebsite of the palmerpenguin package. They have more\r\nnice examples of data visualizations that you can do with ggplot.\r\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer\r\nArchipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi:\r\n10.5281/zenodo.3960218.\r\n\r\n\r\n[1] FALSE\r\n\r\n2 dplyr\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(palmerpenguins)\r\n\r\n\r\n\r\n\r\n\r\n2.2 Data transformation with\r\ndplyr\r\nFind all penguins that …\r\n… have a bill length between 40 and 45 mm.\r\n\r\n\r\nfilter(penguins, between(bill_length_mm, 40, 45))\r\n\r\n# A tibble: 77 x 8\r\n   species island    bill_length~1 bill_~2 flipp~3 body_~4 sex    year\r\n   <fct>   <fct>             <dbl>   <dbl>   <int>   <int> <fct> <int>\r\n 1 Adelie  Torgersen          40.3    18       195    3250 fema~  2007\r\n 2 Adelie  Torgersen          42      20.2     190    4250 <NA>   2007\r\n 3 Adelie  Torgersen          41.1    17.6     182    3200 fema~  2007\r\n 4 Adelie  Torgersen          42.5    20.7     197    4500 male   2007\r\n 5 Adelie  Biscoe             40.6    18.6     183    3550 male   2007\r\n 6 Adelie  Biscoe             40.5    17.9     187    3200 fema~  2007\r\n 7 Adelie  Biscoe             40.5    18.9     180    3950 male   2007\r\n 8 Adelie  Dream              40.9    18.9     184    3900 male   2007\r\n 9 Adelie  Dream              42.2    18.5     180    3550 fema~  2007\r\n10 Adelie  Dream              40.8    18.4     195    3900 male   2007\r\n# ... with 67 more rows, and abbreviated variable names\r\n#   1: bill_length_mm, 2: bill_depth_mm, 3: flipper_length_mm,\r\n#   4: body_mass_g\r\n\r\n# same as \r\n# filter(penguins, bill_length_mm < 45 & bill_length_mm > 40)\r\n\r\n\r\n… for which we know the sex.\r\n\r\n\r\nfilter(penguins, !is.na(sex))\r\n\r\n# A tibble: 333 x 8\r\n   species island    bill_length~1 bill_~2 flipp~3 body_~4 sex    year\r\n   <fct>   <fct>             <dbl>   <dbl>   <int>   <int> <fct> <int>\r\n 1 Adelie  Torgersen          39.1    18.7     181    3750 male   2007\r\n 2 Adelie  Torgersen          39.5    17.4     186    3800 fema~  2007\r\n 3 Adelie  Torgersen          40.3    18       195    3250 fema~  2007\r\n 4 Adelie  Torgersen          36.7    19.3     193    3450 fema~  2007\r\n 5 Adelie  Torgersen          39.3    20.6     190    3650 male   2007\r\n 6 Adelie  Torgersen          38.9    17.8     181    3625 fema~  2007\r\n 7 Adelie  Torgersen          39.2    19.6     195    4675 male   2007\r\n 8 Adelie  Torgersen          41.1    17.6     182    3200 fema~  2007\r\n 9 Adelie  Torgersen          38.6    21.2     191    3800 male   2007\r\n10 Adelie  Torgersen          34.6    21.1     198    4400 male   2007\r\n# ... with 323 more rows, and abbreviated variable names\r\n#   1: bill_length_mm, 2: bill_depth_mm, 3: flipper_length_mm,\r\n#   4: body_mass_g\r\n\r\n… which are of the species Adelie or Gentoo and live either on Dream\r\nor on Torgersen\r\n\r\n\r\nfilter(penguins, species %in% c(\"Adelie\", \"Gentoo\") &\r\n  island %in% c(\"Dream\", \"Torgersen\"))\r\n\r\n# A tibble: 108 x 8\r\n   species island    bill_length~1 bill_~2 flipp~3 body_~4 sex    year\r\n   <fct>   <fct>             <dbl>   <dbl>   <int>   <int> <fct> <int>\r\n 1 Adelie  Torgersen          39.1    18.7     181    3750 male   2007\r\n 2 Adelie  Torgersen          39.5    17.4     186    3800 fema~  2007\r\n 3 Adelie  Torgersen          40.3    18       195    3250 fema~  2007\r\n 4 Adelie  Torgersen          NA      NA        NA      NA <NA>   2007\r\n 5 Adelie  Torgersen          36.7    19.3     193    3450 fema~  2007\r\n 6 Adelie  Torgersen          39.3    20.6     190    3650 male   2007\r\n 7 Adelie  Torgersen          38.9    17.8     181    3625 fema~  2007\r\n 8 Adelie  Torgersen          39.2    19.6     195    4675 male   2007\r\n 9 Adelie  Torgersen          34.1    18.1     193    3475 <NA>   2007\r\n10 Adelie  Torgersen          42      20.2     190    4250 <NA>   2007\r\n# ... with 98 more rows, and abbreviated variable names\r\n#   1: bill_length_mm, 2: bill_depth_mm, 3: flipper_length_mm,\r\n#   4: body_mass_g\r\n\r\n# or\r\n# filter(penguins, (species == \"Adelie\" | species == \"Gentoo\") &\r\n#   (island == \"Dream\" | island == \"Torgersen\"))\r\n\r\n\r\n… lived on the island Dream in the year 2007. How many of them were\r\nfrom each of the 3 species?\r\n\r\n\r\nfilter(penguins, island == \"Dream\" & year == 2007) %>% \r\n  count(species)\r\n\r\n# A tibble: 2 x 2\r\n  species       n\r\n  <fct>     <int>\r\n1 Adelie       20\r\n2 Chinstrap    26\r\n\r\nCount …\r\n… the number of penguins on each island.\r\n\r\n\r\ncount(penguins, island)\r\n\r\n# A tibble: 3 x 2\r\n  island        n\r\n  <fct>     <int>\r\n1 Biscoe      168\r\n2 Dream       124\r\n3 Torgersen    52\r\n\r\n… the number of penguins of each species on each island.\r\n\r\n\r\ncount(penguins, island, species)\r\n\r\n# A tibble: 5 x 3\r\n  island    species       n\r\n  <fct>     <fct>     <int>\r\n1 Biscoe    Adelie       44\r\n2 Biscoe    Gentoo      124\r\n3 Dream     Adelie       56\r\n4 Dream     Chinstrap    68\r\n5 Torgersen Adelie       52\r\n\r\nSort …\r\n… penguins to find penguins with lowest body mass\r\n\r\n\r\narrange(penguins, body_mass_g)\r\n\r\n# A tibble: 344 x 8\r\n   species   island    bill_leng~1 bill_~2 flipp~3 body_~4 sex    year\r\n   <fct>     <fct>           <dbl>   <dbl>   <int>   <int> <fct> <int>\r\n 1 Chinstrap Dream            46.9    16.6     192    2700 fema~  2008\r\n 2 Adelie    Biscoe           36.5    16.6     181    2850 fema~  2008\r\n 3 Adelie    Biscoe           36.4    17.1     184    2850 fema~  2008\r\n 4 Adelie    Biscoe           34.5    18.1     187    2900 fema~  2008\r\n 5 Adelie    Dream            33.1    16.1     178    2900 fema~  2008\r\n 6 Adelie    Torgersen        38.6    17       188    2900 fema~  2009\r\n 7 Chinstrap Dream            43.2    16.6     187    2900 fema~  2007\r\n 8 Adelie    Biscoe           37.9    18.6     193    2925 fema~  2009\r\n 9 Adelie    Dream            37.5    18.9     179    2975 <NA>   2007\r\n10 Adelie    Dream            37      16.9     185    3000 fema~  2007\r\n# ... with 334 more rows, and abbreviated variable names\r\n#   1: bill_length_mm, 2: bill_depth_mm, 3: flipper_length_mm,\r\n#   4: body_mass_g\r\n\r\n… penguins to find penguins with highest body mass\r\n\r\n\r\narrange(penguins, desc(body_mass_g))\r\n\r\n# A tibble: 344 x 8\r\n   species island bill_length_mm bill_de~1 flipp~2 body_~3 sex    year\r\n   <fct>   <fct>           <dbl>     <dbl>   <int>   <int> <fct> <int>\r\n 1 Gentoo  Biscoe           49.2      15.2     221    6300 male   2007\r\n 2 Gentoo  Biscoe           59.6      17       230    6050 male   2007\r\n 3 Gentoo  Biscoe           51.1      16.3     220    6000 male   2008\r\n 4 Gentoo  Biscoe           48.8      16.2     222    6000 male   2009\r\n 5 Gentoo  Biscoe           45.2      16.4     223    5950 male   2008\r\n 6 Gentoo  Biscoe           49.8      15.9     229    5950 male   2009\r\n 7 Gentoo  Biscoe           48.4      14.6     213    5850 male   2007\r\n 8 Gentoo  Biscoe           49.3      15.7     217    5850 male   2007\r\n 9 Gentoo  Biscoe           55.1      16       230    5850 male   2009\r\n10 Gentoo  Biscoe           49.5      16.2     229    5800 male   2008\r\n# ... with 334 more rows, and abbreviated variable names\r\n#   1: bill_depth_mm, 2: flipper_length_mm, 3: body_mass_g\r\n\r\n… penguins by species and sex, with longest flippers\r\nfirst\r\n\r\n\r\narrange(penguins, species, sex, desc(flipper_length_mm))\r\n\r\n# A tibble: 344 x 8\r\n   species island    bill_length~1 bill_~2 flipp~3 body_~4 sex    year\r\n   <fct>   <fct>             <dbl>   <dbl>   <int>   <int> <fct> <int>\r\n 1 Adelie  Dream              35.7    18       202    3550 fema~  2008\r\n 2 Adelie  Biscoe             38.6    17.2     199    3750 fema~  2009\r\n 3 Adelie  Biscoe             38.1    16.5     198    3825 fema~  2009\r\n 4 Adelie  Torgersen          39.6    17.2     196    3550 fema~  2008\r\n 5 Adelie  Torgersen          40.3    18       195    3250 fema~  2007\r\n 6 Adelie  Torgersen          38.7    19       195    3450 fema~  2007\r\n 7 Adelie  Dream              36.4    17       195    3325 fema~  2007\r\n 8 Adelie  Biscoe             35.5    16.2     195    3350 fema~  2008\r\n 9 Adelie  Dream              36      17.8     195    3450 fema~  2009\r\n10 Adelie  Torgersen          36.7    19.3     193    3450 fema~  2007\r\n# ... with 334 more rows, and abbreviated variable names\r\n#   1: bill_length_mm, 2: bill_depth_mm, 3: flipper_length_mm,\r\n#   4: body_mass_g\r\n\r\nSelect …\r\n… only the variables species, sex and year\r\n\r\n\r\nselect(penguins, species, sex, year)\r\n\r\n# A tibble: 344 x 3\r\n   species sex     year\r\n   <fct>   <fct>  <int>\r\n 1 Adelie  male    2007\r\n 2 Adelie  female  2007\r\n 3 Adelie  female  2007\r\n 4 Adelie  <NA>    2007\r\n 5 Adelie  female  2007\r\n 6 Adelie  male    2007\r\n 7 Adelie  female  2007\r\n 8 Adelie  male    2007\r\n 9 Adelie  <NA>    2007\r\n10 Adelie  <NA>    2007\r\n# ... with 334 more rows\r\n\r\n… variables based on the following vector\r\n\r\n# A tibble: 344 x 3\r\n   species bill_length_mm flipper_length_mm\r\n   <fct>            <dbl>             <int>\r\n 1 Adelie            39.1               181\r\n 2 Adelie            39.5               186\r\n 3 Adelie            40.3               195\r\n 4 Adelie            NA                  NA\r\n 5 Adelie            36.7               193\r\n 6 Adelie            39.3               190\r\n 7 Adelie            38.9               181\r\n 8 Adelie            39.2               195\r\n 9 Adelie            34.1               193\r\n10 Adelie            42                 190\r\n# ... with 334 more rows\r\nError in `select()`:\r\n! Can't subset columns past the end.\r\nx Column `body_mass_kg` doesn't exist.\r\n\r\n… only columns that contain measurements in mm\r\n\r\n\r\nselect(penguins, ends_with(\"mm\"))\r\n\r\n# A tibble: 344 x 3\r\n   bill_length_mm bill_depth_mm flipper_length_mm\r\n            <dbl>         <dbl>             <int>\r\n 1           39.1          18.7               181\r\n 2           39.5          17.4               186\r\n 3           40.3          18                 195\r\n 4           NA            NA                  NA\r\n 5           36.7          19.3               193\r\n 6           39.3          20.6               190\r\n 7           38.9          17.8               181\r\n 8           39.2          19.6               195\r\n 9           34.1          18.1               193\r\n10           42            20.2               190\r\n# ... with 334 more rows\r\n\r\n# or\r\n#select(penguins, contains(\"_mm\"))\r\n\r\n\r\nAdd a column …\r\n… with the ratio of bill length to bill depth\r\n\r\n\r\nmutate(penguins,\r\n       ratio = bill_length_mm / bill_depth_mm)\r\n\r\n# A tibble: 344 x 9\r\n   species island    bill_~1 bill_~2 flipp~3 body_~4 sex    year ratio\r\n   <fct>   <fct>       <dbl>   <dbl>   <int>   <int> <fct> <int> <dbl>\r\n 1 Adelie  Torgersen    39.1    18.7     181    3750 male   2007  2.09\r\n 2 Adelie  Torgersen    39.5    17.4     186    3800 fema~  2007  2.27\r\n 3 Adelie  Torgersen    40.3    18       195    3250 fema~  2007  2.24\r\n 4 Adelie  Torgersen    NA      NA        NA      NA <NA>   2007 NA   \r\n 5 Adelie  Torgersen    36.7    19.3     193    3450 fema~  2007  1.90\r\n 6 Adelie  Torgersen    39.3    20.6     190    3650 male   2007  1.91\r\n 7 Adelie  Torgersen    38.9    17.8     181    3625 fema~  2007  2.19\r\n 8 Adelie  Torgersen    39.2    19.6     195    4675 male   2007  2   \r\n 9 Adelie  Torgersen    34.1    18.1     193    3475 <NA>   2007  1.88\r\n10 Adelie  Torgersen    42      20.2     190    4250 <NA>   2007  2.08\r\n# ... with 334 more rows, and abbreviated variable names\r\n#   1: bill_length_mm, 2: bill_depth_mm, 3: flipper_length_mm,\r\n#   4: body_mass_g\r\n\r\n… with abbreviations for the species (Adelie = A, Gentoo = G,\r\nChinstrap = C).\r\n\r\n\r\nmutate(penguins,\r\n       species_short = case_when(\r\n         species == \"Adelie\" ~ \"A\",\r\n         species == \"Gentoo\" ~ \"G\",\r\n         species == \"Chinstrap\" ~ \"C\"\r\n       ))\r\n\r\n# A tibble: 344 x 9\r\n   species island  bill_~1 bill_~2 flipp~3 body_~4 sex    year speci~5\r\n   <fct>   <fct>     <dbl>   <dbl>   <int>   <int> <fct> <int> <chr>  \r\n 1 Adelie  Torger~    39.1    18.7     181    3750 male   2007 A      \r\n 2 Adelie  Torger~    39.5    17.4     186    3800 fema~  2007 A      \r\n 3 Adelie  Torger~    40.3    18       195    3250 fema~  2007 A      \r\n 4 Adelie  Torger~    NA      NA        NA      NA <NA>   2007 A      \r\n 5 Adelie  Torger~    36.7    19.3     193    3450 fema~  2007 A      \r\n 6 Adelie  Torger~    39.3    20.6     190    3650 male   2007 A      \r\n 7 Adelie  Torger~    38.9    17.8     181    3625 fema~  2007 A      \r\n 8 Adelie  Torger~    39.2    19.6     195    4675 male   2007 A      \r\n 9 Adelie  Torger~    34.1    18.1     193    3475 <NA>   2007 A      \r\n10 Adelie  Torger~    42      20.2     190    4250 <NA>   2007 A      \r\n# ... with 334 more rows, and abbreviated variable names\r\n#   1: bill_length_mm, 2: bill_depth_mm, 3: flipper_length_mm,\r\n#   4: body_mass_g, 5: species_short\r\n\r\nCalculate …\r\n… mean flipper length and body mass for the 3 species and male and\r\nfemale penguins separately\r\n\r\n\r\npenguins %>%\r\n  group_by(species, sex) %>%\r\n  summarize(\r\n    mean_flipper = mean(flipper_length_mm, na.rm = TRUE),\r\n    mean_body = mean(body_mass_g, na.rm = TRUE)\r\n  )  \r\n\r\n# A tibble: 8 x 4\r\n# Groups:   species [3]\r\n  species   sex    mean_flipper mean_body\r\n  <fct>     <fct>         <dbl>     <dbl>\r\n1 Adelie    female         188.     3369.\r\n2 Adelie    male           192.     4043.\r\n3 Adelie    <NA>           186.     3540 \r\n4 Chinstrap female         192.     3527.\r\n5 Chinstrap male           200.     3939.\r\n6 Gentoo    female         213.     4680.\r\n7 Gentoo    male           222.     5485.\r\n8 Gentoo    <NA>           216.     4588.\r\n\r\nCan you do the same but remove the penguins for which we don’t know\r\nthe sex first?\r\n\r\n\r\npenguins %>% \r\n  filter(!is.na(sex)) %>% \r\n  group_by(species, sex) %>% \r\n  summarize(\r\n    mean_flipper = mean(flipper_length_mm, na.rm = TRUE),\r\n    mean_body = mean(body_mass_g, na.rm = TRUE)\r\n  )\r\n\r\n# A tibble: 6 x 4\r\n# Groups:   species [3]\r\n  species   sex    mean_flipper mean_body\r\n  <fct>     <fct>         <dbl>     <dbl>\r\n1 Adelie    female         188.     3369.\r\n2 Adelie    male           192.     4043.\r\n3 Chinstrap female         192.     3527.\r\n4 Chinstrap male           200.     3939.\r\n5 Gentoo    female         213.     4680.\r\n6 Gentoo    male           222.     5485.\r\n\r\nExtras\r\nMake a boxplot of penguin body mass with sex on the y-axis and\r\nfacets for the different species. Can you remove the penguins with\r\nmissing values for sex first?\r\n\r\n\r\npenguins %>%\r\n  filter(!is.na(sex)) %>%\r\n  ggplot(aes(x = sex, y = body_mass_g)) +\r\n  geom_boxplot() +\r\n  facet_wrap(~species)\r\n\r\n\r\n\r\nMake a scatterplot with the ratio of bill length to bill depth on\r\nthe y axis and flipper length on the x axis? Can you distinguish the\r\npoint between male and female penguins and remove penguins with unknown\r\nsex before making the plot?\r\n\r\n\r\npenguins %>%\r\n  mutate(ratio = bill_length_mm / bill_depth_mm) %>%\r\n  filter(!is.na(sex)) %>%\r\n  ggplot(aes(x = flipper_length_mm, y = ratio, color = sex)) +\r\n  geom_point() +\r\n  scale_color_manual(values = c(\"cyan4\", \"darkorange\")) +\r\n  labs(\r\n    x = \"Flipper lenght (mm)\",\r\n    y = \"Ratio bill length / bill depth (-)\"\r\n  ) +\r\n  theme_minimal()\r\n\r\n\r\n\r\n\r\n\r\n[1] FALSE\r\n\r\n3 tidyr\r\n4.1 Getting started with tidyr\r\n\r\n\r\nlibrary(tidyverse)\r\n\r\n\r\n4.2 Let’s tidy some data sets\r\n1. relig_income\r\nHave a look at the relig_income data set that is\r\nincluded in tidyverse package. The data set contains the results of a\r\nsurvey asking people about their religion and income category.\r\n\r\n\r\nrelig_income\r\n\r\n# A tibble: 18 x 11\r\n   religion    `<$10k` $10-2~1 $20-3~2 $30-4~3 $40-5~4 $50-7~5 $75-1~6\r\n   <chr>         <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\r\n 1 Agnostic         27      34      60      81      76     137     122\r\n 2 Atheist          12      27      37      52      35      70      73\r\n 3 Buddhist         27      21      30      34      33      58      62\r\n 4 Catholic        418     617     732     670     638    1116     949\r\n 5 Don’t know~      15      14      15      11      10      35      21\r\n 6 Evangelica~     575     869    1064     982     881    1486     949\r\n 7 Hindu             1       9       7       9      11      34      47\r\n 8 Historical~     228     244     236     238     197     223     131\r\n 9 Jehovah's ~      20      27      24      24      21      30      15\r\n10 Jewish           19      19      25      25      30      95      69\r\n11 Mainline P~     289     495     619     655     651    1107     939\r\n12 Mormon           29      40      48      51      56     112      85\r\n13 Muslim            6       7       9      10       9      23      16\r\n14 Orthodox         13      17      23      32      32      47      38\r\n15 Other Chri~       9       7      11      13      13      14      18\r\n16 Other Fait~      20      33      40      46      49      63      46\r\n17 Other Worl~       5       2       3       4       2       7       3\r\n18 Unaffiliat~     217     299     374     365     341     528     407\r\n# ... with 3 more variables: `$100-150k` <dbl>, `>150k` <dbl>,\r\n#   `Don't know/refused` <dbl>, and abbreviated variable names\r\n#   1: `$10-20k`, 2: `$20-30k`, 3: `$30-40k`, 4: `$40-50k`,\r\n#   5: `$50-75k`, 6: `$75-100k`\r\n\r\nWhat is not tidy about this data set? Can you fix it?\r\n\r\nThe variable income is spread across multiple columns, so we have to use\r\npivot_longer to pivot the columns containing the income\r\ninformation:\r\n\r\n\r\npivot_longer(relig_income,\r\n             cols = !religion,\r\n             names_to = \"income\",\r\n             values_to = \"count\"\r\n             )\r\n\r\n# A tibble: 180 x 3\r\n   religion income             count\r\n   <chr>    <chr>              <dbl>\r\n 1 Agnostic <$10k                 27\r\n 2 Agnostic $10-20k               34\r\n 3 Agnostic $20-30k               60\r\n 4 Agnostic $30-40k               81\r\n 5 Agnostic $40-50k               76\r\n 6 Agnostic $50-75k              137\r\n 7 Agnostic $75-100k             122\r\n 8 Agnostic $100-150k            109\r\n 9 Agnostic >150k                 84\r\n10 Agnostic Don't know/refused    96\r\n# ... with 170 more rows\r\n\r\n2. billboard\r\nHave a look at the billboard data set that is included\r\nin the tidyverse package. The data set contains information about the\r\nchart rank of songs in the year 2000.\r\n\r\n\r\nbillboard\r\n\r\n# A tibble: 317 x 79\r\n   artist   track date.ent~1   wk1   wk2   wk3   wk4   wk5   wk6   wk7\r\n   <chr>    <chr> <date>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n 1 2 Pac    Baby~ 2000-02-26    87    82    72    77    87    94    99\r\n 2 2Ge+her  The ~ 2000-09-02    91    87    92    NA    NA    NA    NA\r\n 3 3 Doors~ Kryp~ 2000-04-08    81    70    68    67    66    57    54\r\n 4 3 Doors~ Loser 2000-10-21    76    76    72    69    67    65    55\r\n 5 504 Boyz Wobb~ 2000-04-15    57    34    25    17    17    31    36\r\n 6 98^0     Give~ 2000-08-19    51    39    34    26    26    19     2\r\n 7 A*Teens  Danc~ 2000-07-08    97    97    96    95   100    NA    NA\r\n 8 Aaliyah  I Do~ 2000-01-29    84    62    51    41    38    35    35\r\n 9 Aaliyah  Try ~ 2000-03-18    59    53    38    28    21    18    16\r\n10 Adams, ~ Open~ 2000-08-26    76    76    74    69    68    67    61\r\n# ... with 307 more rows, 69 more variables: wk8 <dbl>, wk9 <dbl>,\r\n#   wk10 <dbl>, wk11 <dbl>, wk12 <dbl>, wk13 <dbl>, wk14 <dbl>,\r\n#   wk15 <dbl>, wk16 <dbl>, wk17 <dbl>, wk18 <dbl>, wk19 <dbl>,\r\n#   wk20 <dbl>, wk21 <dbl>, wk22 <dbl>, wk23 <dbl>, wk24 <dbl>,\r\n#   wk25 <dbl>, wk26 <dbl>, wk27 <dbl>, wk28 <dbl>, wk29 <dbl>,\r\n#   wk30 <dbl>, wk31 <dbl>, wk32 <dbl>, wk33 <dbl>, wk34 <dbl>,\r\n#   wk35 <dbl>, wk36 <dbl>, wk37 <dbl>, wk38 <dbl>, wk39 <dbl>, ...\r\n\r\nWhat is not tidy about this data set? Can you fix it?\r\n\r\nThe variable week is spread across multiple columns. We have to use\r\npivot longer to pivot the week columns:\r\n\r\n\r\npivot_longer(billboard,\r\n             cols = wk1:wk76,\r\n             names_to = \"week\",\r\n             values_to = \"rank\")\r\n\r\n# A tibble: 24,092 x 5\r\n   artist track                   date.entered week   rank\r\n   <chr>  <chr>                   <date>       <chr> <dbl>\r\n 1 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk1      87\r\n 2 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk2      82\r\n 3 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk3      72\r\n 4 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk4      77\r\n 5 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk5      87\r\n 6 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk6      94\r\n 7 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk7      99\r\n 8 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk8      NA\r\n 9 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk9      NA\r\n10 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk10     NA\r\n# ... with 24,082 more rows\r\n\r\nExtras\r\nThe argument values_drop_na drops rows with missing\r\nvalues in the rank column. Here it makes sense because not every song is\r\nin the charts for all 76 weeks.\r\nWith the names_prefix argument we can remove the\r\nwk before the values of the week variable. This makes it\r\neasier to work with later.\r\n\r\n\r\npivot_longer(billboard,\r\n             cols = wk1:wk76,\r\n             names_to = \"week\",\r\n             names_prefix = \"wk\",\r\n             values_to = \"rank\",\r\n             values_drop_na = TRUE)\r\n\r\n# A tibble: 5,307 x 5\r\n   artist  track                   date.entered week   rank\r\n   <chr>   <chr>                   <date>       <chr> <dbl>\r\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26   1        87\r\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26   2        82\r\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26   3        72\r\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26   4        77\r\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26   5        87\r\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26   6        94\r\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26   7        99\r\n 8 2Ge+her The Hardest Part Of ... 2000-09-02   1        91\r\n 9 2Ge+her The Hardest Part Of ... 2000-09-02   2        87\r\n10 2Ge+her The Hardest Part Of ... 2000-09-02   3        92\r\n# ... with 5,297 more rows\r\n\r\n3. fish_encounters\r\nHave a look at the fish_encounters data set that is\r\nincluded in the tidyverse package. The data set contains records of fish\r\ndetected by different automatic monitoring stations.\r\n\r\n\r\nfish_encounters\r\n\r\n# A tibble: 114 x 3\r\n   fish  station  seen\r\n   <fct> <fct>   <int>\r\n 1 4842  Release     1\r\n 2 4842  I80_1       1\r\n 3 4842  Lisbon      1\r\n 4 4842  Rstr        1\r\n 5 4842  Base_TD     1\r\n 6 4842  BCE         1\r\n 7 4842  BCW         1\r\n 8 4842  BCE2        1\r\n 9 4842  BCW2        1\r\n10 4842  MAE         1\r\n# ... with 104 more rows\r\n\r\nThe column seen only contains values of 1 to indicate\r\nthat the fish was seen at the respective station.\r\n\r\n\r\nsummary(fish_encounters)\r\n\r\n      fish       station        seen  \r\n 4842   :11   Release:19   Min.   :1  \r\n 4843   :11   I80_1  :19   1st Qu.:1  \r\n 4844   :11   Lisbon :13   Median :1  \r\n 4858   :11   Rstr   :12   Mean   :1  \r\n 4861   :11   Base_TD:11   3rd Qu.:1  \r\n 4857   : 9   BCE    : 8   Max.   :1  \r\n (Other):50   (Other):32              \r\n\r\nWhat is not tidy about this data set? Can you fix it?\r\n\r\nAn observation (i.e. one fish) is spread across multiple rows and we\r\nhave to use pivot_wider to give each fish just one row.\r\n\r\n\r\npivot_wider(fish_encounters, \r\n            names_from = station,\r\n            values_from = seen)\r\n\r\n# A tibble: 19 x 12\r\n   fish  Release I80_1 Lisbon  Rstr Base_TD   BCE   BCW  BCE2  BCW2\r\n   <fct>   <int> <int>  <int> <int>   <int> <int> <int> <int> <int>\r\n 1 4842        1     1      1     1       1     1     1     1     1\r\n 2 4843        1     1      1     1       1     1     1     1     1\r\n 3 4844        1     1      1     1       1     1     1     1     1\r\n 4 4845        1     1      1     1       1    NA    NA    NA    NA\r\n 5 4847        1     1      1    NA      NA    NA    NA    NA    NA\r\n 6 4848        1     1      1     1      NA    NA    NA    NA    NA\r\n 7 4849        1     1     NA    NA      NA    NA    NA    NA    NA\r\n 8 4850        1     1     NA     1       1     1     1    NA    NA\r\n 9 4851        1     1     NA    NA      NA    NA    NA    NA    NA\r\n10 4854        1     1     NA    NA      NA    NA    NA    NA    NA\r\n11 4855        1     1      1     1       1    NA    NA    NA    NA\r\n12 4857        1     1      1     1       1     1     1     1     1\r\n13 4858        1     1      1     1       1     1     1     1     1\r\n14 4859        1     1      1     1       1    NA    NA    NA    NA\r\n15 4861        1     1      1     1       1     1     1     1     1\r\n16 4862        1     1      1     1       1     1     1     1     1\r\n17 4863        1     1     NA    NA      NA    NA    NA    NA    NA\r\n18 4864        1     1     NA    NA      NA    NA    NA    NA    NA\r\n19 4865        1     1      1    NA      NA    NA    NA    NA    NA\r\n# ... with 2 more variables: MAE <int>, MAW <int>\r\n\r\nExtra\r\nThe values_fill argument can be used to enter values in\r\ncells where values are missing. In our case this makes sense because\r\ncells with missing values are not really missing information but we know\r\nthat for this station the fish was not recorded. So we can add a 0\r\ninstead of NA.\r\n\r\n\r\npivot_wider(fish_encounters, \r\n            names_from = station,\r\n            values_from = seen,\r\n            values_fill = 0)\r\n\r\n# A tibble: 19 x 12\r\n   fish  Release I80_1 Lisbon  Rstr Base_TD   BCE   BCW  BCE2  BCW2\r\n   <fct>   <int> <int>  <int> <int>   <int> <int> <int> <int> <int>\r\n 1 4842        1     1      1     1       1     1     1     1     1\r\n 2 4843        1     1      1     1       1     1     1     1     1\r\n 3 4844        1     1      1     1       1     1     1     1     1\r\n 4 4845        1     1      1     1       1     0     0     0     0\r\n 5 4847        1     1      1     0       0     0     0     0     0\r\n 6 4848        1     1      1     1       0     0     0     0     0\r\n 7 4849        1     1      0     0       0     0     0     0     0\r\n 8 4850        1     1      0     1       1     1     1     0     0\r\n 9 4851        1     1      0     0       0     0     0     0     0\r\n10 4854        1     1      0     0       0     0     0     0     0\r\n11 4855        1     1      1     1       1     0     0     0     0\r\n12 4857        1     1      1     1       1     1     1     1     1\r\n13 4858        1     1      1     1       1     1     1     1     1\r\n14 4859        1     1      1     1       1     0     0     0     0\r\n15 4861        1     1      1     1       1     1     1     1     1\r\n16 4862        1     1      1     1       1     1     1     1     1\r\n17 4863        1     1      0     0       0     0     0     0     0\r\n18 4864        1     1      0     0       0     0     0     0     0\r\n19 4865        1     1      1     0       0     0     0     0     0\r\n# ... with 2 more variables: MAE <int>, MAW <int>\r\n\r\n\r\n\r\n[1] FALSE\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2022-08-26T15:50:37+02:00"
    },
    {
      "path": "02_tasks_controller.html",
      "title": "Tasks for day 2",
      "author": [],
      "contents": "\r\n\r\nContents\r\n1 ggplot2\r\n1.1 Getting\r\nstarted\r\n1.2 Getting\r\nthe data\r\n1.3\r\nExploratory plotting\r\n1.4\r\nBeautify the plots\r\n1.5 Save one of the plots\r\non your machine\r\nReferences\r\n\r\n2 dplyr\r\n2.1 Getting started with\r\ndplyr\r\n2.2 Data transformation with\r\ndplyr\r\nExtras\r\n\r\n3 tidyr\r\n4.1 Getting started with\r\ntidyr\r\n4.2 Let’s tidy some data sets\r\n\r\n\r\n1 ggplot2\r\n1.1 Getting started\r\nA helpful resource to consult for this task can be the ggplot2\r\ncheatsheet.\r\nRemember to put library(tidyverse) (or\r\nlibrary(ggplot2)) on top of your script to access the\r\nggplot functions.\r\n1.2 Getting the data\r\nTo practice plotting with the ggplot2 package, we will\r\nuse a data set on 3 species of penguins on islands in Antarctica.\r\n\r\n\r\n\r\nFigure 1: Artwork by Allison Horst\r\n\r\n\r\n\r\nThe data is available from the palmerpenguins\r\npackage. To get it, you have to:\r\nInstall the package with\r\ninstall.packages(\"palmerpenguins\")\r\nLoad the package at the beginning of your script with\r\nlibrary(palmerpenguins)\r\nAfter you have done that, take a moment to get familiar with the data\r\nset and its variables. The data set is called penguins:\r\nThe data set is available after you loaded the package\r\nJust type penguins in the console and you should see\r\nthe penguins tibble\r\n1.3 Exploratory plotting\r\nExplore the data set and it’s variables with ggplot. Below, you find\r\nsome ideas and tasks for plots. I suggest you start with one of them and\r\nif you want you can continue. But if you have your own ideas for\r\ninteresting plots with the penguin data set, feel free to do them\r\ninstead of continuing with the tasks.\r\nIn the exploratory section, don’t care too much about the beauty of\r\nyour plots and just use the default theme and colors. This is about\r\nexploring the data and testing different visualization options in\r\nggplot.\r\n1.3.1\r\nRelationship between bill length and bill depth (scatterplot)\r\nWhat is the relationship between bill length and bill depth?\r\nCreate a scatterplot with bill length on the x-axis and bill depth\r\non the y-axis\r\nCan you add a regression line?\r\nAdd species as color aesthetic. Does your interpretation of the data\r\nchange?\r\nWhat is the difference between adding color as a global aesthetic or\r\nas a local aesthetic of the point layer?\r\n\r\nAdd species as shape aesthetic to distinguish the species\r\n1.3.2\r\nDifference in flipper length between species (boxplot)\r\nIs there a difference in flipper length between the species?\r\nCreate a boxplot of the flipper length (y-axis) for the different\r\nspecies (x-axis)\r\nTry adding notches to the boxplots by setting\r\nnotch = TRUE in the boxplot layer\r\nExtra: Add a layer with geom_point().\r\nTry setting position = position_jitter() as argument in the\r\npoint layer. What does it do?\r\n1.3.3\r\nDifferences between body mass of male and female penguins (boxplot)\r\nAre male penguins heavier than female penguins? And is this different\r\nbetween the 3 species?\r\nCreate a boxplot with body mass on the y axis and sex on the x\r\naxis\r\nAdd the difference between penguin species to this plot. Try the\r\ndifferent options ggplot offers\r\nSpecies as color aesthetic\r\nSpecies as fill aesthetic\r\nSpecies as facet using facet_wrap\r\n\r\nExtra: What happens if you use\r\ngeom_violin instead of geom_boxplot? Can you\r\ncombine both geoms in one plot?\r\n1.4 Beautify the plots\r\nAlso here: Chose the tasks that you like most.\r\n1.4.1 Beautify the plots from\r\n1.3\r\nTake the plot from before that you liked the most and try to make\r\nthem look nicer.\r\nHere’s a list of ideas:\r\nAdd a theme layer\r\nCustomize the theme, e.g.\r\nChange the position of the legend\r\nMake the axis titles bold\r\n\r\nChange the color/fill scale of the plot\r\nUse scale_color_manual or\r\nscale_fill_manual\r\nTry scale_color_viridis_d() or\r\nscale_fill_viridis_d() with different options\r\nTry a color scale from an additional package,\r\ne.g. ggsci::scale_color_uchicago() or\r\nggsci::scale_fill_uchicago()\r\nFirst you have to install the ggsci package\r\n\r\n\r\nChange the labels of the x- and y-axis and add a title to the\r\nplot\r\n…\r\n1.4.2 Can you reproduce this\r\nplot?\r\nTake a look at the plot, we discussed during the presentation:\r\n\r\n\r\n\r\nFigure 2: Visualization from the palmerpenguins\r\npackage\r\n\r\n\r\n\r\nCan you reproduce this plot? It is similar to the one from Task\r\n1.3.1.\r\nThe colors that are used are:\r\n\r\n\r\npenguin_cols <- c(\"darkorange\", \"purple\", \"cyan4\")\r\n\r\n\r\n1.5 Save one of the plots\r\non your machine\r\nSave one of the plots you produced in a variable and then use\r\nggsave to save the plot on your machine. Save the plot in a\r\ndedicated plot directory in your RStudio project.\r\nReferences\r\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer\r\nArchipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi:\r\n10.5281/zenodo.3960218.\r\n\r\n2 dplyr\r\n2.1 Getting started with dplyr\r\nA helpful resource for to consult for this task can be the dplyr\r\ncheatsheet.\r\nBefore you start, make sure to load the tidyverse\r\npackage and the palmerpenguins package.\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(palmerpenguins)\r\n\r\n\r\n2.2 Data transformation with\r\ndplyr\r\nIn the following, you find a lot of different data transformation\r\ntasks. First, do 2 from each category before you do the remaining ones.\r\nYou don’t have to finish all the tasks but make sure you covered each\r\ncategory. Generally, the first tasks from a category are easier than the\r\nlast tasks of a category.\r\nFind all penguins that …\r\n… have a bill length between 40 and 45 mm.\r\n… for which we know the sex.\r\n… which are of the species Adelie or Gentoo and live either on\r\nDream or on Torgersen\r\n… lived on the island Dream in the year 2007. How many of them\r\nwere from each of the 3 species?\r\nCount …\r\n… the number of penguins on each island.\r\n… the number of penguins of each species on each island.\r\nSort …\r\n… penguins to find penguins with lowest body\r\nmass\r\n… penguins to find penguins with highest body\r\nmass\r\n… penguins by species and sex, with longest flippers\r\nfirst\r\nSelect …\r\n… only the variables species, sex and year\r\n… variables based on the following vector\r\n\r\n\r\ncols <- c(\"species\", \"bill_length_mm\", \"flipper_length_mm\", \"body_mass_kg\")\r\n\r\n\r\n… only columns that contain measurements in mm\r\nAdd a column …\r\n… with the ratio of bill length to bill depth\r\n… with abbreviations for the species (Adelie = A, Gentoo = G,\r\nChinstrap = C).\r\nCalculate …\r\n… mean flipper length and body mass for the 3 species and male\r\nand female penguins separately\r\nCan you do the same but remove the penguins for which we don’t\r\nknow the sex first?\r\nExtras\r\nMake a boxplot of penguin body mass with sex on the x-axis and\r\nfacets for the different species. Can you remove the penguins with\r\nmissing values for sex first?\r\nMake a scatterplot with the ratio of bill length to bill depth on\r\nthe y axis and flipper length on the x axis? Can you distinguish the\r\npoint between male and female penguins and remove penguins with unknown\r\nsex before making the plot?\r\n\r\n3 tidyr\r\n4.1 Getting started with tidyr\r\nBefore you start, make sure to load the tidyverse\r\npackage.\r\n\r\n\r\n\r\n4.2 Let’s tidy some data sets\r\nFirst, complete all the tasks before you move to the\r\nextras.\r\n1. relig_incom\r\nHave a look at the relig_income data set that is\r\nincluded in tidyverse package. The data set contains the results of a\r\nsurvey asking people about their religion and income category.\r\nWhat is not tidy about this data set? Can you fix it?\r\n2. billboard\r\nHave a look at the billboard data set that is included\r\nin the tidyverse package. The data set contains information about the\r\nchart rank of songs in the year 2000.\r\nWhat is not tidy about this data set? Can you fix it?\r\nExtras\r\nCheck out the values_drop_na argument of\r\npivot_longer. What does it do and how can you use it\r\nhere?\r\nCheck out the names_prefix argument of\r\npivot_longer. What does it do and how can you use it\r\nhere?\r\n3. fish_encounters\r\nHave a look at the fish_encounters data set that is\r\nincluded in the tidyverse package. The data set contains records of fish\r\ndetected by different automatic monitoring stations. Check out\r\nsummary(fish_encounters) - the column seen\r\nonly contains values of 1 to indicate that the fish was seen at the\r\nrespective station.\r\nWhat is not tidy about this data set? Can you fix it?\r\nExtra\r\nHave a look at the values_fill argument of\r\npivot_wider. How could you use it in this case to replace\r\nthe missing values that are created?\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2022-08-26T15:50:39+02:00"
    },
    {
      "path": "03_solutions_controller.html",
      "title": "Tasks for day 3",
      "author": [],
      "contents": "\r\n\r\nContents\r\n1\r\nStatistical tests\r\nCompare\r\nthe flipper length of penguins using statistical tests\r\n\r\n2 Linear models\r\n1.1 Getting\r\nstarted\r\n1.2 Linear\r\nregression\r\n1.3 Analysis of covariance\r\n1.4 Anova\r\n\r\n\r\nDownload an R script with the solutions from day 1 from\r\nhere.\r\n\r\n1 Statistical tests\r\nCompare\r\nthe flipper length of penguins using statistical tests\r\nFirst, create subsets of the flipper length of all species as\r\nvectors:\r\n\r\n\r\nlibrary(palmerpenguins)\r\nlibrary(tidyverse)\r\nadelie <- filter(penguins, species == \"Adelie\")$flipper_length_mm\r\ngentoo <- filter(penguins, species == \"Gentoo\")$flipper_length_mm\r\nchinstrap <- filter(penguins, species == \"Chinstrap\")$flipper_length_mm\r\n\r\n\r\nStep 1: Test all groups\r\nfor normality\r\nWith Shapiro-Wilk\r\nThe Shapiro-Wilk test suggests that Adelie and Chinstrap are normally\r\ndistributed, but Gentoo is not.\r\n\r\n\r\nshapiro.test(adelie)\r\n\r\n\r\n    Shapiro-Wilk normality test\r\n\r\ndata:  adelie\r\nW = 0.99339, p-value = 0.72\r\n\r\nshapiro.test(gentoo)\r\n\r\n\r\n    Shapiro-Wilk normality test\r\n\r\ndata:  gentoo\r\nW = 0.96219, p-value = 0.00162\r\n\r\nshapiro.test(chinstrap)\r\n\r\n\r\n    Shapiro-Wilk normality test\r\n\r\ndata:  chinstrap\r\nW = 0.98891, p-value = 0.8106\r\n\r\nWith QQ-plots\r\n\r\n\r\nlibrary(patchwork) # using patchwork to combine multiple plots into one\r\nch <- ggpubr::ggqqplot(chinstrap) + labs(title = \"chinstrap\")\r\nad <- ggpubr::ggqqplot(adelie) + labs(title = \"adelie\")\r\nge <- ggpubr::ggqqplot(gentoo) + labs(title = \"gentoo\")\r\n\r\nch + ge + ad\r\n\r\n\r\n\r\nCompare Chinstrap vs. Adelie\r\nBoth are normally distributed, so we can compare variances for\r\nChinstrap and Adelie penguins:\r\n\r\n\r\nvar.test(chinstrap, adelie)\r\n\r\n\r\n    F test to compare two variances\r\n\r\ndata:  chinstrap and adelie\r\nF = 1.1894, num df = 67, denom df = 150, p-value = 0.3854\r\nalternative hypothesis: true ratio of variances is not equal to 1\r\n95 percent confidence interval:\r\n 0.8022092 1.8217141\r\nsample estimates:\r\nratio of variances \r\n          1.189396 \r\n\r\nThis indicates that the variances do not differ between Chinstrap and\r\nAdelie penguins. Therefore, we can use a t-test to compare mean flipper\r\nlength:\r\n\r\n\r\nt.test(chinstrap, adelie)\r\n\r\n\r\n    Welch Two Sample t-test\r\n\r\ndata:  chinstrap and adelie\r\nt = 5.7804, df = 119.68, p-value = 0.00000006049\r\nalternative hypothesis: true difference in means is not equal to 0\r\n95 percent confidence interval:\r\n 3.859244 7.880530\r\nsample estimates:\r\nmean of x mean of y \r\n 195.8235  189.9536 \r\n\r\nThe t-test suggests, that the mean flipper length differs between\r\nChinstrap and Adelie penguins.\r\nCompare Chinstrap vs. Gentoo\r\nGentoo is not normally distributed, so we can use a Wilcoxon-rank-sum\r\ntest to compare means:\r\n\r\n\r\nwilcox.test(chinstrap, gentoo)\r\n\r\n\r\n    Wilcoxon rank sum test with continuity correction\r\n\r\ndata:  chinstrap and gentoo\r\nW = 92, p-value < 0.00000000000000022\r\nalternative hypothesis: true location shift is not equal to 0\r\n\r\nThe Wilcoxon tests suggests that the flipper lengths differ between\r\nChinstrap and Gentoo penguins.\r\nCompare Adelie vs. Gentoo\r\nGentoo is not normally distributed, so we can use a Wilcoxon-rank-sum\r\ntest to compare means:\r\n\r\n\r\nwilcox.test(adelie, gentoo)\r\n\r\n\r\n    Wilcoxon rank sum test with continuity correction\r\n\r\ndata:  adelie and gentoo\r\nW = 26, p-value < 0.00000000000000022\r\nalternative hypothesis: true location shift is not equal to 0\r\n\r\nThe Wilcoxon tests suggests that the flipper lengths differ between\r\nAdelie and Gentoo penguins.\r\nVisual comparison\r\nThe boxplot supports the findings of the statistical tests. Notches\r\ndo not overlap.\r\n\r\n\r\npenguins %>%\r\n  ggplot(aes(x = species, y = flipper_length_mm)) +\r\n  geom_boxplot(notch = TRUE)\r\n\r\n\r\n\r\n\r\n\r\n[1] FALSE\r\n\r\n2 Linear models\r\n1.1 Getting started\r\n\r\n\r\n#install.packages(\"performance\")\r\nlibrary(palmerpenguins)\r\nlibrary(tidyverse)\r\nlibrary(performance)\r\n\r\n\r\n1.2 Linear regression\r\nIt looks like the bill depth increases with increasing bill\r\nlength.\r\n\r\n\r\ng <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +\r\n  geom_point()\r\ng\r\n\r\n\r\n\r\nFit a linear model to test this relationship\r\nCheck for significant effects\r\nThe result of drop1 shows that if we remove the bill\r\nlength from the model, we significantly increase the RSS. The model with\r\nbill length is the better model and we can assume a significant\r\nrelationship between bill lenght and bill depth.\r\n\r\n\r\nlm1 <- lm(bill_depth_mm ~ bill_length_mm, data = penguins)\r\ndrop1(lm1, test = \"F\")\r\n\r\nSingle term deletions\r\n\r\nModel:\r\nbill_depth_mm ~ bill_length_mm\r\n               Df Sum of Sq    RSS    AIC F value    Pr(>F)    \r\n<none>                      1256.4 449.00                      \r\nbill_length_mm  1    73.473 1329.8 466.44  19.884 0.0000112 ***\r\n---\r\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\r\n\r\nCheck the model assumptions using diagnostic plots\r\n\r\n\r\nperformance::check_model(lm1)\r\n\r\n\r\n\r\nThe diagnostic plots do not look perfect. The reason for this is\r\nprobably that we did not consider all variable that we should have in\r\nthe model. Maybe by adding the species as a predictor, we can improve\r\nthe diagnostic plots?\r\nCan you add the model result to the scatter plot?\r\n\r\n\r\n# Option 1: geom_smooth\r\ng +\r\n  geom_smooth(method = \"lm\", se = FALSE)\r\n\r\n\r\n\r\n\r\n\r\n# Option 2: extract coefficients\r\nintercept <- lm1$coefficients[1]\r\nslope <- lm1$coefficients[2]\r\ng +\r\n  geom_abline(slope = slope, intercept = intercept)\r\n\r\n\r\n\r\n\r\n\r\n# Option 3: using predict (this is a bit overkill for this simple example)\r\n# Create data to predict from\r\npred_dat <- tibble(\r\n  bill_length_mm = seq(\r\n    from = min(penguins$bill_length_mm, na.rm = TRUE),\r\n    to = max(penguins$bill_length_mm, na.rm = TRUE)\r\n  )\r\n)\r\n# Predict the response and add it to pred_data\r\npred_dat$bill_depth_mm <- predict(lm1, newdata = pred_dat)\r\n# Add a line with the new predicted data\r\ng +\r\n  geom_line(data = pred_dat, color = \"cyan4\")\r\n\r\n\r\n\r\n1.3 Analysis of covariance\r\nDoes the relationship between bill length and bill depth differ\r\nbetween penguin species?\r\n\r\n\r\ng2 <- ggplot(penguins, aes(x = bill_length_mm, \r\n                     y = bill_depth_mm,\r\n                     color = species)) +\r\n  geom_point()\r\ng2\r\n\r\n\r\n\r\nNow fit the linear model again, this time including species as\r\nexplanatory variable.\r\n\r\n\r\n# Without interaction\r\nlm2a <- lm(bill_depth_mm ~ bill_length_mm + species, data = penguins)\r\n# Without interaction\r\nlm2b <- lm(bill_depth_mm ~ bill_length_mm * species, data = penguins)\r\n\r\n\r\nTest model assumptions for both models.\r\nBoth models don’t violate the assumptions for linear models and the\r\ndiagnostic plots look much better than the one for the model without\r\nspecies.\r\nNote that the diagnostic plots show a high collinearity between\r\nexplanatory variables. This makes sense because of course the\r\ninteraction between species and bill length is highly correlated with\r\nboth species and bill length. However, in the case of this interaction\r\nit is not a problem, so we can ignore this.\r\n\r\n\r\ncheck_model(lm2a)\r\n\r\n\r\ncheck_model(lm2b)\r\n\r\n\r\n\r\nCheck for significant effects in both models\r\n\r\n\r\ndrop1(lm2a, test = \"F\")\r\n\r\nSingle term deletions\r\n\r\nModel:\r\nbill_depth_mm ~ bill_length_mm + species\r\n               Df Sum of Sq     RSS    AIC F value\r\n<none>                       307.20 -28.70        \r\nbill_length_mm  1    118.67  425.87  81.01  130.57\r\nspecies         2    949.16 1256.36 449.00  522.17\r\n                              Pr(>F)    \r\n<none>                                  \r\nbill_length_mm < 0.00000000000000022 ***\r\nspecies        < 0.00000000000000022 ***\r\n---\r\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\r\n\r\ndrop1(lm2b, test = \"F\")\r\n\r\nSingle term deletions\r\n\r\nModel:\r\nbill_depth_mm ~ bill_length_mm * species\r\n                       Df Sum of Sq    RSS     AIC F value Pr(>F)\r\n<none>                              306.32 -25.676               \r\nbill_length_mm:species  2   0.87243 307.20 -28.704  0.4785 0.6202\r\n\r\nI will choose to plot the simpler model without the interaction\r\nbecause the interaction between species and bill length is not\r\nsignificant. Generally, a model should be as simple as possible (of\r\ncourse without loosing explanatory power).\r\nTo plot the model with interaction I could conveniently use\r\ngeom_smooth\r\n\r\n\r\ng2 +\r\n  geom_smooth(method = \"lm\", se = FALSE)\r\n\r\n\r\n\r\nTo plot th model without interaction, you can either extract the\r\nmodel coefficients or use the predict function.\r\nExtracting the model coefficients starts to become complicated, as we\r\nhave 3 intercepts and 1 slope to extract:\r\n\r\n\r\n# Option 1: extract model coefficients\r\nintercept_adelie <- lm2a$coefficients[1]\r\nslope <- lm2a$coefficients[2]\r\nintercept_chinstrap <- intercept_adelie + lm2a$coefficients[3]\r\nintercept_gentoo <- intercept_adelie + lm2a$coefficients[4]\r\n\r\n# lets add some custom colors\r\ncols <- c(\"darkorange\", \"cyan4\", \"purple\")\r\n\r\ng2 +\r\n  geom_abline(slope = slope, intercept = intercept_adelie, color = cols[1]) +\r\n  geom_abline(slope = slope, intercept = intercept_chinstrap, color = cols[2]) +\r\n  geom_abline(slope = slope, intercept = intercept_gentoo, color = cols[3]) +\r\n  scale_color_manual(values = cols)\r\n\r\n\r\n\r\nIt is easier to use the predict function in this\r\ncase:\r\n\r\n\r\npred_dat <- expand_grid(\r\n  bill_length_mm = min(penguins$bill_length_mm, na.rm = TRUE):max(penguins$bill_length_mm, na.rm = TRUE),\r\n  species = c(\"Adelie\", \"Chinstrap\", \"Gentoo\")\r\n)\r\npred_dat$bill_depth_mm <- predict(lm2a, newdata = pred_dat)\r\n\r\ng2 +\r\n  geom_line(data = pred_dat) +\r\n  ggsci::scale_color_futurama()\r\n\r\n\r\n\r\n1.4 Anova\r\nDo male and female penguins differ in weight and does this depend on\r\nthe species?\r\nFirst, we create a subset without penguins for which the sex is\r\nunknown\r\n\r\n\r\npenguins_sex <- filter(penguins, !is.na(sex))\r\n\r\n\r\nThe question can be represented for example with a boxplot\r\n\r\n\r\nggplot(penguins_sex, aes(x = species, y = body_mass_g, fill = sex)) +\r\n  geom_boxplot(notch = TRUE)\r\n\r\n\r\n\r\nFit a linear model that represents this question\r\n\r\n\r\n# Without interaction\r\nlm3a <- lm(body_mass_g ~ sex + species, data = penguins_sex)\r\n# Without interaction\r\nlm3b <- lm(body_mass_g ~ sex + species + sex:species, data = penguins_sex)\r\n\r\n\r\nTest for significant predictors\r\nBoth the single effect and the interaction is significant.\r\n\r\n\r\ndrop1(lm3a, test = \"F\")\r\n\r\nSingle term deletions\r\n\r\nModel:\r\nbody_mass_g ~ sex + species\r\n        Df Sum of Sq       RSS    AIC F value                Pr(>F)\r\n<none>                32979185 3838.6                              \r\nsex      1  37090262  70069447 4087.5  370.01 < 0.00000000000000022\r\nspecies  2 143401584 176380769 4392.9  715.29 < 0.00000000000000022\r\n           \r\n<none>     \r\nsex     ***\r\nspecies ***\r\n---\r\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\r\n\r\ndrop1(lm3b, test = \"F\")\r\n\r\nSingle term deletions\r\n\r\nModel:\r\nbody_mass_g ~ sex + species + sex:species\r\n            Df Sum of Sq      RSS    AIC F value    Pr(>F)    \r\n<none>                   31302628 3825.2                      \r\nsex:species  2   1676557 32979185 3838.6   8.757 0.0001973 ***\r\n---\r\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\r\n\r\nBoth look fine. Model can be used.\r\n\r\n\r\n\r\nExtra\r\nSome other plots with which we can represent the results of the\r\nAnova.\r\n\r\n\r\npenguins_sex %>%\r\n  ggplot(aes(\r\n    x = species,\r\n    y = body_mass_g,\r\n    color = sex\r\n  )) +\r\n  geom_boxplot() +\r\n  geom_point(\r\n    size = 2, alpha = 0.5,\r\n    position = position_jitterdodge(\r\n      seed = 123\r\n    )\r\n  ) +\r\n  coord_flip() +\r\n  ggsci::scale_color_d3() +\r\n  labs(y = \"Body mass [g]\", x = \"Species\") +\r\n  theme_bw() +\r\n  theme(legend.position = c(0.85, 0.15))\r\n\r\n\r\n\r\n\r\n\r\nsummary <- penguins_sex %>%\r\n  group_by(species, sex) %>%\r\n  summarize(\r\n    sd = sd(body_mass_g),\r\n    mean = mean(body_mass_g)\r\n  )\r\n\r\nggplot(summary, aes(x = species, y = mean, color = sex)) +\r\n  geom_point(position = position_dodge(0.4)) +\r\n  geom_errorbar(\r\n    aes(ymin = mean - sd, ymax = mean + sd),\r\n    position = position_dodge(0.4),\r\n    width = 0.2\r\n  ) +\r\n  scale_color_manual(values = c(\"#00AFBB\", \"#E7B800\")) +\r\n  labs(y = \"Body mass [g]\")\r\n\r\n\r\n\r\n\r\n\r\nggplot(summary, aes(x = species, y = mean, fill = sex)) +\r\n  geom_col(position = position_dodge(0.8)) +\r\n  geom_errorbar(\r\n    aes(ymin = mean - sd, ymax = mean + sd),\r\n    position = position_dodge(0.8),\r\n    width = 0.2\r\n  ) +\r\n  scale_fill_manual(values = c(\"#00AFBB\", \"#E7B800\")) +\r\n  labs(y = \"Body mass [g]\")\r\n\r\n\r\n\r\n\r\n\r\n[1] FALSE\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2022-08-26T15:51:17+02:00"
    },
    {
      "path": "03_tasks_controller.html",
      "title": "Tasks for day 3",
      "author": [],
      "contents": "\r\n\r\nContents\r\n1\r\nStatistical tests\r\n1.2\r\nCompare the flipper length of penguins using statistical tests\r\n\r\n2 Linear models\r\n2.1 Getting\r\nstarted\r\n2.2 Linear\r\nregression\r\n2.3 Analysis of covariance\r\n2.4 Anova\r\n\r\n\r\n1 Statistical tests\r\n1.1 Getting started\r\nWe will again use the penguins tibble from the\r\npalmerpenguins package for this task.\r\nSo before you get started with the exercise, make sure that you load\r\nthe palmerpenguins package and the\r\ntidyverse\r\n\r\n\r\nlibrary(palmerpenguins)\r\nlibrary(tidyverse)\r\n\r\n\r\n1.2\r\nCompare the flipper length of penguins using statistical tests\r\nQuestion: Does the mean flipper length differ between the 3 penguin\r\nspecies?\r\nDo separate comparisons for\r\nGentoo vs. Adelie\r\nGentoo vs. Chinstrap\r\nAdelie vs. Chinstrap\r\nBefore you start, create a subset of each species as a vector.\r\nFor this, you can use the $ operator:\r\n\r\n\r\n\r\nFollow the decision tree for statistical tests:\r\n\r\n\r\n\r\nExtra\r\nCreate a boxplot with notches to visually compare differences in\r\nflipper length between species\r\n\r\n2 Linear models\r\n2.1 Getting started\r\nTo test the assumptions of linear models, we will use the\r\nperformance package. Make sure you install it once and then\r\nload it:\r\n\r\n\r\ninstall.packages(\"performance\")\r\nlibrary(performance)\r\n\r\n\r\nThe performance package depends on other packages. It\r\nmight happen that you encounter an error when trying to load or use the\r\npackage for the first time. Just read the error message and install the\r\nmissing packages with install.packages() (likely this will\r\nbe the case for the qqplotr package).\r\nNote: Finish all the tasks (2.2-2.4) first before\r\nyou start with the extras.\r\n2.2 Linear regression\r\nLet’s start with a simple linear regression.\r\nDoes the bill depth depend on bill length?\r\nMake a scatter plot of bill length on the x and bill depth on the y\r\naxis.\r\nNow:\r\nFit a linear model to test this relationship\r\nCheck for significant effects: What do the results mean?\r\nCheck the model assumptions using diagnostic plots\r\nWhat do you think? Are the assumptions violated or do the plots look\r\nokay?\r\nCan you add the regression line to the scatter plot?\r\n2.3 Analysis of covariance\r\nDoes the relationship between bill length and bill depth differ\r\nbetween penguin species?\r\nAdd the species variable as color aesthetic to the scatter plot\r\nfrom 1.2\r\nFit the linear model again, including species as second\r\nexplanatory variable\r\nFit a model without interaction between species and\r\nbill length\r\n\r\nTest model assumptions the both model\r\nCheck for significant effects models\r\nAdd the regression lines to the plot\r\nExtra\r\nNow fit a model with interaction between species\r\nand bill length. Test assumptions and significant effects also for this\r\nmodel. Which model would you choose? The one with or without\r\ninteraction?\r\nWhich model would you choose? It the model results in the scatter\r\nplot from before.\r\n2.4 Anova\r\nDo the weight of penguins depend on sex and species?\r\nBefore you start exploring this question, remove penguins with\r\nmissing sex variable from the data\r\nThink of a plot that can represent this question and plot\r\nit\r\nFit a linear model that represents this question (with\r\ninteraction between sex and species)\r\nTest for significant predictors\r\nTest model assumptions\r\nExtra\r\nImprove the looks of the Anova result plot. You can be as creative as\r\nyou want, e.g. take inspiration from plots you saw in the\r\npresentation.\r\nSome ideas:\r\nMake a boxplot and try to add a combination of\r\ngeom_point() and\r\nposition = position_jitterdodge()\r\nA bit tricky: Summarize the data (calculate mean and standard\r\ndeviation) grouped by species and sex. The plot points + errorbars for\r\nmean + sd. Have a look here\r\nto see how you can do this.\r\nSame as above but with bars instead of points to represent\r\nmeans\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2022-08-26T15:51:21+02:00"
    },
    {
      "path": "download_material_blank.html",
      "title": "You can download the full material after the workshop is finished",
      "description": "For now, please use the material available from this website",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2022-08-26T15:51:22+02:00"
    },
    {
      "path": "index.html",
      "title": "Introduction to R for Data Analysis",
      "author": [],
      "contents": "\r\nWorkshop organization and\r\nschedule\r\n🕘 9 a.m. - 4 p.m. (🥪 ~ 12 a.m. - 1 p.m.) 📍 We will meet every\r\nmorning in the General meeting room of our Webex team.\r\nWorkshop Material\r\nYou can find all the workshop material on this website. On top, you\r\ncan navigate to the presentation slides and the tasks for each day. At\r\nthe end of each workshop day, I will upload the solutions for the\r\ntasks.\r\nTo download presentation slides in pdf format, you can use the\r\nfollowing links:\r\n 01 - Introduction\r\nRStudio\r\n 01 - Introduction\r\nR\r\n01 -\r\nFunctions\r\n01 - Data &\r\nTibbles\r\n01 - Tidyverse and\r\nReadr\r\n02 -\r\nGgplot2\r\n02 - Dplyr\r\n02 - Tidyr\r\n03 - Statistical\r\ntests\r\n03 - Linear\r\nmodels\r\nCommon\r\nerrors\r\nAfter the workshop is finished, you can download a zipped version of\r\nthe content (slides in pdf, data and R scripts)\r\nhere\r\n\r\n\r\n\r\n",
      "last_modified": "2022-08-26T15:51:24+02:00"
    },
    {
      "path": "LICENSE.html",
      "author": [],
      "contents": "\r\nMIT License\r\nCopyright (c) 2021 Selina Baldauf\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n“Software”), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n\r\n",
      "last_modified": "2022-08-26T15:51:25+02:00"
    },
    {
      "path": "online_resources.html",
      "title": "Additional online resources",
      "description": "Below you can find a collection of helpful links to further online resources regarding the workshop topics.\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nGeneral\r\nTidyverse\r\nreadr\r\nggplot\r\ndplyr\r\ntidyr\r\n\r\nLinear\r\nmodels\r\nTwitter accounts to follow\r\n\r\nGeneral\r\nList of\r\nRStudio cheatsheets: You can find a list of all the cheat sheets\r\nthat RStudio provides there. Below, I listed the individual cheat sheets\r\nthat are interesting for our course.\r\nRStudio\r\ncheatsheet: Explains the most important buttons, options, keyboard\r\nshortcuts, etc that you have in RStudio.\r\nThe\r\nmodern dive book explains how to get started with R and data\r\nanalysis with the tidyverse.\r\nThe R for Data\r\nScience book by Hadley Wickham is a very good book to start with. It\r\nis specifically about data analysis using the tidyverse\r\npackages.\r\nThe Big book of R is a\r\nbook that list all books about R that are freely available only. The\r\nbook is sorted by topics and can be used to find resources to learn a\r\nspecific topic.\r\nA curated\r\ncollection of R resources. Not just books but also websites,\r\ntutorials, help channels, …\r\nThe Tidyverse style\r\nguide provides information on how to style your code according to\r\ngood practice.\r\nTidyverse\r\nThe tidyverse website has links\r\nto all tidyverse packages which all have very good examples and use\r\ncases. These websites are an excelent point to get started with a\r\npackage.\r\nreadr\r\ndata\r\nimport cheatsheet\r\nggplot\r\nCurated\r\nlist of ggplot resources: Really great list with links to ggplot\r\ntutorials (sorted by topic and difficulty), books, additional packages\r\nto make your plots look nicer, …\r\nggplot\r\ncheatsheet offers an overview of all possibilities of\r\nggplot\r\nerror\r\nbars with ggplot A good summary of how to plot different types of\r\nmeans and errorbars (barplots, mean and errorbars, …).\r\nIn the R graph\r\ngallery you can browse through hundreds of different types of plots\r\nand find code to reproduce them.\r\nA great presentation by Cédric\r\nScherer with examples of how to beautify your ggplots.\r\nList of ggplot\r\nextensions, e.g. for themes, interactive graphs, text\r\nlabels,…\r\ndplyr\r\ndplyr\r\ncheatsheet\r\ntidyr\r\ndata\r\nimport cheatsheet\r\nLinear models\r\nanova\r\nwith R: explanation why an anova is also a linear model\r\nTwitter accounts to follow\r\nI personally learn a lot of tricks and find a lot of inspiration and\r\nresources by following some R people and accounts on twitter. Often\r\npeople post helpful tutorials or blogpost that you would not find\r\notherwise. If you are a twitter user, you can try that as well. Some\r\nsuggestions that are in no way complete are:\r\nCédric Scherer mainly\r\ndata visualization and ggplot content\r\nAllison Horst\r\nRStudio official RStudio\r\naccount\r\nHadley Wickham data\r\nvisualisation, tidyverse\r\nJenny Bryan\r\nrOpenSci develop R tools\r\nfor open science\r\nOne R Tip a Day one\r\nhelpful R tip every day\r\nR posts you might have\r\nmissed repost R blog posts from different topics\r\n\r\n\r\n\r\n",
      "last_modified": "2022-08-26T15:51:27+02:00"
    },
    {
      "path": "packages.html",
      "title": "List of R packages",
      "author": [],
      "contents": "\r\nIn the table below, you can find a list of R packages with a short\r\ndescription and some links for further reading. The package selection is\r\nbased on my personal experience and packages that I regularly use and\r\nlike. The list is in no way complete. If you know a useful package that\r\nI missed, let me know and I can add it to the list.\r\n\r\nPackage\r\nKeywords\r\nDescription\r\nLinks\r\ntidyverse\r\ntidyverse, data analysis\r\nCollection of packages designed for data\r\nanalysis. The packages are designed to work smoothly together\r\nwebsite, learning resources\r\ndplyr\r\ntidyverse, data manipulation\r\nPart of the tidyverse. Package for data\r\nmanipulation: filtering, selecting and arranging data, summarizing data\r\n(e.g. calculating summaries by group), …\r\nwebsite, cheatsheet\r\nreadr\r\ntidyverse, data import and export\r\nPart of the tidyverse. Package for data\r\nimport and export (csv, txt, other delimited files)\r\nwebsite, cheatsheet\r\nreadxl\r\ndata import and export\r\nFunctions to import and export excel files\r\nfrom multiple sheets into R as tibbles\r\npackage\r\ndocumentation\r\nggplot2\r\ntidyverse, data visualization\r\nPart of the tidyverse. Data\r\nvisualization\r\nwebsite, cheatsheet\r\npatchwork\r\ndata visualization\r\nEasy syntax for combining multiple plots\r\ninto one. Easy control of plot layout, common legends, plot annotations\r\nand labels\r\nwebsite with different\r\narticles to get started\r\ntidyr\r\ntidyverse, data cleaning\r\nPart of the tidyverse. Transforming tables\r\nto bring them in a tidy format for further analysis\r\nwebsite, cheatsheet\r\nstringr\r\ntidyverse, string manipulation\r\nPart of the tidyverse. Toolkit for working\r\nwith strings. String manipulation: extracting strings, substrings, find\r\npatterns in strings, replace patterns in strings, …\r\nwebsite, cheatsheet\r\nlubridate\r\ndates and times\r\nMakes it easy to work with dates and\r\ntimes: convert strings to date time objects, calculate with times\r\n(intervals, periods, …) and plot time series\r\ncheatsheet,\r\nwebsite\r\nforcats\r\nfactors, categorical variables\r\nPart of the tidyverse. Working with\r\nfactors (categorical data types). Renaming, reordering, summarizing\r\ncategories, …\r\nwebsite, cheatsheet\r\ndata.table\r\nfast data analysis, big data\r\nExtremely fast and memory efficient data\r\ntransofmrations in R. The package uses a different syntax from base R\r\nand the tidyverse. However, data.tables are also data frames so you can\r\nuse them either with data.table syntax or with base R/tidyverse\r\nsyntax\r\nwebsite,\r\ncheatsheet\r\ncollapse\r\nfast data analysis, big data\r\nPackag for fast data manipulation. Well\r\nintegrated with dplyr and data.table. Provides fast functions for data\r\ntransformation, aggregation, linear models, statistical functions,\r\ngrouping, … Have a look at it if you have large data sets and your data\r\noperations take a long time\r\npackage on github, cheatsheet\r\nrmarkdown\r\nreports, markdown, documents\r\nInteractive and reproducible documents\r\nwith R (pdf, word, html output).\r\nR Markdown - The definitive\r\nguide (book), reference\r\nguide, cheatsheet\r\nggsci\r\ncolors, data visualization\r\nProvides additional color scales to\r\nggplot\r\nwebsite\r\nggthemes\r\ncolors, themes, data visualizations\r\nProvides additional color scales and\r\nthemes to ggplot\r\ntheme\r\ngallery\r\nusethis\r\nutility, workflow\r\nProvides useful utility functions around R\r\nand Rstudio workflows: project setup, git, github, licenses, package\r\ndevelopment, …\r\nwebsite\r\nstyler\r\nutility\r\nAutomatically format your code according\r\nto the tidyverse style guide. This ensures that your coding style\r\nfollows good practice\r\nwebsite\r\nhere\r\nutility\r\nMakes file referencing and relative paths\r\neasy\r\nwebsite\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2022-08-26T15:51:29+02:00"
    }
  ],
  "collections": []
}
