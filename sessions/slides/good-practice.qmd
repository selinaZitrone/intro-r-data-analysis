---
title: "Good practice R coding"
subtitle: "Day 1 - Introduction to Data Analysis with R"
author: "Selina Baldauf"
institute: "Freie Universit√§t Berlin - Theoretical Ecology"
date: today
date-format: long
format: 
  revealjs:
    footer: "Selina Baldauf // Good practice R coding"
    highlight-style: breeze
    mainfont: Cabinet Grotesk
    slide-number: true
    show-slide-number: all
    incremental: true
    self-contained: true
    code-line-numbers: false
    auto-stretch: false
    scrollable: true
    fig-align: center
    theme: slides.scss
execute: 
  eval: false
  echo: true
  warning: false
  message: false
from: markdown+emoji
---

## Chaotic projects and workflows ...

... can make even small changes frustrating and difficult.
  
![Artwork by [Allison Horst](https://allisonhorst.com), CC BY 4.0](img/2023_04_20_what_they_forgot_to_teach_you/02_kitchen_chaos.png){fig-alt="A frustrated looking little monster in front of a very disorganized cooking area, with smoke and fire coming from a pot surrounded by a mess of bowls, utensils, and scattered ingredients." width=80%}

## Background

- **Reproducibility** :arrows_counterclockwise: 
  - Can someone else reproduce my results?
- **Reliability** üèã 
  - Will my code work in the future?
- **Reusability** :gear: 
  - Can someone else actually use my code?
  
# First things first {.inverse}

Project setup and structure

## Use R Studio projects

**Always** make your project an R Studio Project (if possible)!

. . .

:white_check_mark: You already did that.

## Set up your project

. . .

R Studio offers a lot of settings and options. 

So have a :coffee: and check out **Tools -> Global Options** and all the other buttons.

- [R Studio cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/master/rstudio-ide.pdf) that explains all the buttons
- Update R Studio from time to time to get new settings (**Help -> Check for Updates**)

## Name your files properly

Your collaborators and your future self will love you for this.

. . .

### Principles [^1]

File names should be

:::{.nonincremental}

  1. Machine readable
  2. Human readable
  3. Working with default file ordering

:::

[^1]: From [this talk](https://speakerdeck.com/jennybc/how-to-name-files) by J. Bryan

## 1. Machine readable file names

Names should allow for easy **searching**, **grouping** and **extracting information** 
from file names.

. . .

- No space & special characters

. . .

#### Bad examples :x:

:page_facing_up: `2023-04-20 temperature g√∂ttingen.csv ` <br>
:page_facing_up: `2023-04-20 rainfall g√∂ttingen.csv ` <br>

::: {.fragment}

#### Good examples :heavy_check_mark: 

:page_facing_up: `2023-04-20_temperature_goettingen.csv ` <br>
:page_facing_up: `2023-04-20_rainfall_goettingen.csv ` <br>

:::

## 2. Human readable file names

Which file names would you like to read at 4 a.m. in the morning?

- File names should reveal the file content
- Use separators to make it readable

. . .

#### Bad examples :x:

:page_facing_up: `01preparedata.R` <br>
:page_facing_up: `01firstscript.R` <br>

::: {.fragment}

#### Good examples :heavy_check_mark: 

:page_facing_up: `01_prepare-data.R` <br>
:page_facing_up: `01_temperature-trend-analysis.R` <br>

:::

## 3. Default ordering

If you order your files by name, the ordering should make sense:

- (Almost) always put something numeric first
  - Left-padded numbers (`01`, `02`, ...)
  - Dates in `YYYY-MM-DD` format

. . .

#### Chronological order

:page_facing_up: `2023-04-20_temperature_goettingen.csv ` <br>
:page_facing_up: `2023-04-21_temperature_goettingen.csv ` <br>

:::: {.fragment}

#### Logical order

:page_facing_up: `01_prepare-data.R` <br>
:page_facing_up: `02_lm-temperature-trend.R` <br>

:::

# Let's start coding {.inverse}

> Good practice R coding

## Write beautiful code

:::{.columns}

:::{.column width="50%"}

- Try to write code that others (i.e. future you) can understand
- Follow standards for readable and maintainable code
  - For R: [tidyverse style guide](https://style.tidyverse.org/index.html) defines code organization, syntax standards, ...

:::

:::{.column width="50%"}

![Artwork by [Allison Horst](https://allisonhorst.com), CC BY 4.0](img/2023_04_20_what_they_forgot_to_teach_you/17_beatuiful_code.png)

:::

:::

## Standard code structure

. . .

::: {.columns}

::: {.column width="50%"}
::: {.nonincremental}

1. General comment with purpose of the script, author, ...
2. `library()` calls on top
3. Set default variables and global options
4. Source additional code
5. Write the actual code, starting with loading all data files
:::
:::

::: {.column width="50%"}


```{r example-structure-1}
# This code replicates figure 2 from the
# Baldauf et al. 2022 Journal of Ecology
# paper.
# Authors: Selina Baldauf and Jane Doe

library(tidyverse)
library(vegan)

# set defaults
input_file <- "data/results.csv"

# source files
source("R/my_cool_function.R")

# read input
input_data <- read_csv(input_file)
```

:::
:::

## Mark sections

:::{.nonincremental}
- Use comments to break up your file into sections
:::

. . .

```{r code-section}
# Load data ---------------------------------------------------------------

input_data <- read_csv(input_file)

# Plot data ---------------------------------------------------------------

ggplot(input_data, aes(x = x, y = y)) +
  geom_point()
```

- Insert a section label with `Ctrl/Cmd + Shift + R`
- Navigate sections in the file outline

. . .

![](img/2023_04_20_what_they_forgot_to_teach_you/07_document_outline.png){width="75%"}

## Coding style - Object names

. . .

- Variables should only have *lowercase letters*, *numbers*, and *_*
- Use `snake_case` for longer variable names
- Try to use concise but meaningful names

. . .

```{r object-names-snake}
# Good
day_one
day_1

# Bad
DayOne
dayone
first_day_of_the_month
dm1
```

## Coding style - Spacing

. . .

::: {.nonincremental}

- Always put spaces after a comma

:::

```{r spaces-comma}
# Good
x[, 1]

# Bad
x[ , 1]
x[,1]
x[ ,1]
```

## Coding style - Spacing

::: {.nonincremental}

- Always put spaces after a comma
- No spaces around parentheses for normal function calls

:::

```{r spaces-parenthesis}
# Good
mean(x, na.rm = TRUE)

# Bad
mean (x, na.rm = TRUE)
mean ( x, na.rm = TRUE )
```

## Coding style - Spacing

::: {.nonincremental}

- Always put spaces after a comma
- No spaces around parentheses for normal function calls
- Spaces around most operators (`<-`, `==`, `+`, etc.)

:::

```{r spaces-operators}
# Good
height <- (feet * 12) + inches
mean(x, na.rm = TRUE)

# Bad
height<-feet*12+inches
mean(x, na.rm=TRUE)
```


## Coding style - Spacing

::: {.nonincremental}

- Always put spaces after a comma
- No spaces around parentheses for normal function calls
- Spaces around most operators (`<-`, `==`, `+`, etc.)
- Spaces before pipe (`|>`) followed by new line

:::

```{r spaces-pipes}
# Good
iris |> 
  summarize_if(is.numeric, mean, .by = Species)  |> 
  arrange(desc(Sepal.Length))

# Bad
iris|>summarize_if(is.numeric, mean, .by = Species)|>arrange(desc(Sepal.Length))
```

## Coding style - Spacing

::: {.nonincremental}

- Always put spaces after a comma
- No spaces around parentheses for normal function calls
- Spaces around most operators (`<-`, `==`, `+`, etc.)
- Spaces before pipes (`|>`, `|>`) followed by new line
- Spaces before `+` in ggplot followed by new line

:::

```{r spaces-gglot}
# Good
ggplot(aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +
  geom_point()

# Bad
ggplot(aes(x = Sepal.Width, y = Sepal.Length, color = Species))+geom_point()
```

## Coding style - Line width

Try to limit your line width to 80 characters.

- You don't want to scroll to the right to read all code
- 80 characters can be displayed on most displays and programs
- Split your code into multiple lines if it is too long
  - See this grey vertical line in R Studio?

. . .

```{r linewidth-ggplot}
# Bad
iris |> summarise(Sepal.Length = mean(Sepal.Length), Sepal.Width = mean(Sepal.Width), Species = n_distinct(Species), .by = Species)

# Good
iris |>
  summarise(
    Sepal.Length = mean(Sepal.Length),
    Sepal.Width = mean(Sepal.Width),
    Species = n_distinct(Species),
    .by = Species
  )
```

## Coding style

Do I really have to remember all of this?

. . .

Luckily, no! R and R Studio provide some nice helpers

## Coding style helpers - R Studio

R Studio has style diagnostics that tell you where something is wrong

**Tools -> Gloabl Options -> Code -> Diagnostics**

::: {.columns}

::: {.column width="65%"}

![](img/2023_04_20_what_they_forgot_to_teach_you/08_global_options_style.png)

:::

::: {.column width="35%"}
![](img/2023_04_20_what_they_forgot_to_teach_you/09_style_warning.png)
:::

:::

## Coding style helpers - `{styler}`

The [styler package](http://styler.r-lib.org/) package automatically styles your files and projects
according to the tidyverse style guide.

. . .

```{r}
# install from CRAN
install.packages("styler")
```

. . .

Use the R Studio **Addins** for styler:

![](img/2023_04_20_what_they_forgot_to_teach_you/12_styler_options.png)

## Coding style helpers - `{styler}`

Pro-Tip: Add a custom keyboard short cut to style your files


**Tools -> Modify Keyboard Shortcuts**
  
![](img/2023_04_20_what_they_forgot_to_teach_you/13_styler_shortcut.png)

## Clean projects and workflows ...

... allow you and others to work productively.

![Artwork by [Allison Horst](https://allisonhorst.com), CC BY 4.0](img/2023_04_20_what_they_forgot_to_teach_you/03_kitchen_clean.png){fig-alt="An organized kitchen with sections labeled \"tools\", \"report\" and \"files\", while a monster in a chef's hat stirs in a bowl labeled \"code.\"" width=80%}
