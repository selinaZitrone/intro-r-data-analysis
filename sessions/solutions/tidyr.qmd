---
title: "Solution to tidyr task"
code-line-numbers: false
---

## Get started

```{r}
#| message: false
library(tidyverse)
```

## Let's tidy some data sets

**1. `relig_income`**

Have a look at the `relig_income` data set that is included in tidyverse package.
The data set contains the results of a survey asking people about their religion and income category.

```{r, echo=TRUE}
relig_income
```

What is not tidy about this data set?

`r fontawesome::fa("arrow-right")` The variable income is spread across multiple columns, so we have to use `pivot_longer` to pivot the columns containing the income information:

```{r, echo=TRUE}
pivot_longer(
  relig_income,
  cols = !religion,
  names_to = "income",
  values_to = "count"
)
```


**2. `billboard`**

Have a look at the `billboard` data set that is included in the tidyverse package.
The data set contains information about the chart rank of songs in the year 2000.

```{r, echo=TRUE}
billboard
```

What is not tidy about this data set?

`r fontawesome::fa("arrow-right")` The variable week is spread across multiple columns. We have to use pivot longer to pivot the week columns:

```{r, echo=TRUE}
pivot_longer(
  billboard,
  cols = wk1:wk76,
  names_to = "week",
  values_to = "rank"
)
```

**3. `fish_encounters`**

Which format might be more convenient if you wanted to compare fish across stations at a glance?

`r fontawesome::fa("arrow-right")` Each fish is spread across multiple rows. We can use `pivot_wider` to have one row per fish:

```{r, echo=TRUE}
pivot_wider(
  fish_encounters,
  names_from = station,
  values_from = seen
)
```

## For the fast ones

**`values_drop_na` argument**

The argument `values_drop_na` drops rows with missing values in the rank column. Here it makes sense because not every song is in the charts for all 76 weeks.

With the `names_prefix` argument we can remove the `wk` before the values of the week variable. This makes it easier to work with later.

```{r, echo=TRUE}
pivot_longer(
  billboard,
  cols = wk1:wk76,
  names_to = "week",
  names_prefix = "wk",
  values_to = "rank",
  values_drop_na = TRUE
)
```

**`values_fill` argument**

With the `values_fill` argument we can replace the missing values that are created when pivoting wider. Here it makes sense to replace the missing values with 0, indicating that the fish was not seen at the respective station.

```{r, echo=TRUE}
pivot_wider(
  fish_encounters,
  names_from = station,
  values_from = seen,
  values_fill = list(seen = 0)
)
```

**Recreating the penguin plot**

To recreate the penguin plot from the task, the following observations help:

- Information needed: Species, bill depth and bill length
  - In a first step, you can therefore use `select` from `dplyr` to select only these
  three columns
- Aesthetics are: Species on x-axis, value of bill depth and length on y-axis, 
fill aesthetic is category bill depth or bill length.
  - This needs some reformatting. You need one value column with the measurements,
  and one name column with the category. You can use pivot longer for this
  
Use the pipe operator to do the calculations one after the other:

```{r echo=TRUE, warning=FALSE}

penguins |>
  select(species, bill_len, bill_dep) |>
  pivot_longer(!species, names_to = "variable") |>
  ggplot(aes(x = species, y = value, fill = variable)) +
  geom_boxplot()
```

