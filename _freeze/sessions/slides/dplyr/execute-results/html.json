{
  "hash": "e0494d73a11038577b4ee0d0e2f5a416",
  "result": {
    "markdown": "---\ntitle: \"Data transformation with dplyr\"\nsubtitle: \"Day 2 - Introduction to Data Analysis with R\"\nauthor: \"Selina Baldauf\"\ninstitute: \"Freie Universität Berlin - Theoretical Ecology\"\ndate: today\ndate-format: long\nformat: \n  revealjs:\n    footer: \"Selina Baldauf // Data transformation with dplyr\"\n    highlight-style: breeze\n    mainfont: Cabinet Grotesk\n    slide-number: true\n    show-slide-number: all\n    incremental: true\n    self-contained: true\n    code-line-numbers: true\n    auto-stretch: false\n    scrollable: false\n    theme: slides.scss\n    fig-align: center\nexecute: \n  echo: true\n  warning: false\n  message: false\n  cache: true\nknitr: \n  opts_chunk: \n    collapse: true\n    comment: \"#>\"\nfrom: markdown+emoji\n---\n\n\n\n\n## Data transformation\n\nData transformation is an important step in **understanding** the data and **preparing** it for further analysis.\n\n![](img/day1/datascience_workflow_tidyverse.png)\n\n<br>\n\nWe can use the tidyverse package `dplyr` for this.\n\n## Data transformation\n\nWith `dplyr` we can (among other things)\n\n:::{.nonincremental}\n\n- **Filter** data to analyse only a part of it\n- **Create** new variables\n- **Summarize** data\n- **Combine** multiple tables\n- **Rename** variables\n- **Reorder** observations or variables\n\n:::\n\n. . .\n  \nTo get started load the package `dplyr`:\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-1_5845c3285314ffac61e5fc5e071951c6'}\n\n```{.r .cell-code}\nlibrary(dplyr)\n# or\nlibrary(tidyverse)\n```\n:::\n\n\n## Dplyr basic vocuabulary for data manipulation\n\n- `filter()` picks observations (rows) based on their values\n- `select()` picks variables (columns) based on their names\n- `mutate()` adds new variables based on existing ones\n- `summarize()` combines multiple values into a single summary value\n\n[Perform any of these operations by group]{.fragment}\n\n:::{.aside}\n\nfrom [dplyr package description](https://dplyr.tidyverse.org/)\n\n:::\n\n## Dplyr basic vocabulary\n\nAll of the `dplyr` functions work similarly: <br> \n\n- **First argument** is the data (a tibble)\n- **Other arguments** specify what to do exactly\n- **Return** a tibble\n\n## Example data\n\nSoybean production for different use by year and country.\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-2_2245db5f6c29f8f7f5bda51731c1ebae'}\n\n```{.r .cell-code}\nsoybean_use <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-06/soybean_use.csv')\nsoybean_use\n#> # A tibble: 9,897 × 6\n#>    entity code   year human_food animal_feed processed\n#>    <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl>\n#>  1 Africa <NA>   1961      33000        6000     14000\n#>  2 Africa <NA>   1962      43000        7000     17000\n#>  3 Africa <NA>   1963      31000        7000      5000\n#>  4 Africa <NA>   1964      43000        6000     14000\n#>  5 Africa <NA>   1965      34000        6000     12000\n#>  6 Africa <NA>   1966      41000        6000      2000\n#>  7 Africa <NA>   1967      47000        6000      4000\n#>  8 Africa <NA>   1968      50000        7000      3000\n#>  9 Africa <NA>   1969      52000        6000      6000\n#> 10 Africa <NA>   1970      52000        6000      8000\n#> # ℹ 9,887 more rows\n```\n:::\n\n\n:::{.aside}\n\nData from [Our World in Data](https://ourworldindata.org/forests-and-deforestation) provided by [tidytuesday](https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-04-06/readme.md)\n\n:::\n\n# `filter()` {.inverse}\n\n> picks observations (rows) based on their value\n\n![Artwork by [Allison Horst](https://twitter.com/allison_horst)](img/AllisonHorst/dplyr_filter.jpg){width=70%}\n\n## Useful `filter()` helpers\n\nThese functions and operators help you filter your observations:\n\n:::{.nonincremental}\n\n- relational operators `<`, `>`, `==`, ...\n- logical operators `&`, `|`, `!`\n- `%in%` to filter multiple values\n- `is.na()` to filter missing values\n- `between()` to filter values that are between an upper and lower boundary\n- `near()` to compare floating points (use instead of `==` for doubles)\n\n:::\n\n## `filter()`\n\nFilter rows that contain the values for Germany\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-3_e88ddbf45073eee48c66c462f0cedb7c'}\n\n```{.r .cell-code}\nfilter(soybean_use, entity == \"Germany\")\n#> # A tibble: 53 × 6\n#>    entity  code   year human_food animal_feed processed\n#>    <chr>   <chr> <dbl>      <dbl>       <dbl>     <dbl>\n#>  1 Germany DEU    1961          0        3000   1042000\n#>  2 Germany DEU    1962          0        3000    935000\n#>  3 Germany DEU    1963          0        3000   1092000\n#>  4 Germany DEU    1964          0        3000   1096000\n#>  5 Germany DEU    1965          0        3000   1435000\n#>  6 Germany DEU    1966          0        3000   1588000\n#>  7 Germany DEU    1967          0        3000   1646000\n#>  8 Germany DEU    1968          0        3000   1480000\n#>  9 Germany DEU    1969          0        3000   1423000\n#> 10 Germany DEU    1970          0        3000   2118000\n#> # ℹ 43 more rows\n```\n:::\n\n\n. . .\n\n`filter()` goes through each row of the data and return only those rows where the value for `entity` is `\"Germany\"` \n\n## `filter()` + `%in%`\n\nUse the `%in%` operator to filter rows based on multiple values, e.g. countries\n\n. . .\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-4_245a0160e742a956aa303026a8b3578c'}\n\n```{.r .cell-code}\ncountries_select <- c(\"Germany\", \"Austria\", \"Switzerland\")\nfilter(soybean_use, entity %in% countries_select)\n#> # A tibble: 159 × 6\n#>    entity  code   year human_food animal_feed processed\n#>    <chr>   <chr> <dbl>      <dbl>       <dbl>     <dbl>\n#>  1 Austria AUT    1961          0           0         0\n#>  2 Austria AUT    1962          0           0         0\n#>  3 Austria AUT    1963          0           0         0\n#>  4 Austria AUT    1964          0           0         0\n#>  5 Austria AUT    1965          0           0         0\n#>  6 Austria AUT    1966          0           0         0\n#>  7 Austria AUT    1967          0           0         0\n#>  8 Austria AUT    1968          0           0         0\n#>  9 Austria AUT    1969          0           0         0\n#> 10 Austria AUT    1970          0           0         0\n#> # ℹ 149 more rows\n```\n:::\n\n\n## `filter()` + `is.na()`\n\nFilter only rows that don't have a country code (i.e. the continents etc.)\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-5_1e82fca3dc55ae955626b0e1ea7fe196'}\n\n```{.r .cell-code}\nfilter(soybean_use, is.na(code))\n#> # A tibble: 1,734 × 6\n#>    entity code   year human_food animal_feed processed\n#>    <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl>\n#>  1 Africa <NA>   1961      33000        6000     14000\n#>  2 Africa <NA>   1962      43000        7000     17000\n#>  3 Africa <NA>   1963      31000        7000      5000\n#>  4 Africa <NA>   1964      43000        6000     14000\n#>  5 Africa <NA>   1965      34000        6000     12000\n#>  6 Africa <NA>   1966      41000        6000      2000\n#>  7 Africa <NA>   1967      47000        6000      4000\n#>  8 Africa <NA>   1968      50000        7000      3000\n#>  9 Africa <NA>   1969      52000        6000      6000\n#> 10 Africa <NA>   1970      52000        6000      8000\n#> # ℹ 1,724 more rows\n```\n:::\n\n\n. . .\n\nOr the opposite: filter only the rows that have a country code with\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-6_467a0385a0003ee1056bfa7531103246'}\n\n```{.r .cell-code}\nfilter(soybean_use, !is.na(code))\n```\n:::\n\n\n## `filter()` + `between()`\n\n#### Combine different filters:\n\nSelect rows where\n\n- the value for `years` is between 1970 and 1980\n- the value for `entity` is Germany\n\n:::{.fragment}\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-7_e32d42a1f981adcbaca6e9d27d41935a'}\n\n```{.r .cell-code}\nfilter(soybean_use, between(year, 1970, 1980) & entity == \"Germany\")\n#> # A tibble: 11 × 6\n#>    entity  code   year human_food animal_feed processed\n#>    <chr>   <chr> <dbl>      <dbl>       <dbl>     <dbl>\n#>  1 Germany DEU    1970          0        3000   2118000\n#>  2 Germany DEU    1971          0        3000   2119000\n#>  3 Germany DEU    1972          0        5000   2271000\n#>  4 Germany DEU    1973          0        3000   2820000\n#>  5 Germany DEU    1974          0        3000   3704000\n#>  6 Germany DEU    1975          0        3000   3480000\n#>  7 Germany DEU    1976          0        1000   3453000\n#>  8 Germany DEU    1977          0        3000   3388000\n#>  9 Germany DEU    1978          0        3000   3647000\n#> 10 Germany DEU    1979          0        2000   3700000\n#> 11 Germany DEU    1980          0        3000   3887000\n```\n:::\n\n\n:::\n\n# `select()` {.inverse}\n\n> picks variables (columns) based on their names\n\n## Useful `select()` helpers\n\n:::{.nonincremental}\n\n- `starts_with()` and `ends_with()`: variable names that start/end with a specific string\n- `contains()`: variable names that contain a specific string\n- `matches()`: variable names that  match a regular expression\n- `any_of()` and `all_of()`: variables that are contained in a character vector\n\n:::\n\n## `select()`\n\nSelect the variables entity, year and human food\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-8_3bb1f7e32ce743e3b499bf32ac1cc3bb'}\n\n```{.r .cell-code}\nselect(soybean_use, entity, year, human_food)\n#> # A tibble: 9,897 × 3\n#>    entity  year human_food\n#>    <chr>  <dbl>      <dbl>\n#>  1 Africa  1961      33000\n#>  2 Africa  1962      43000\n#>  3 Africa  1963      31000\n#>  4 Africa  1964      43000\n#>  5 Africa  1965      34000\n#>  6 Africa  1966      41000\n#>  7 Africa  1967      47000\n#>  8 Africa  1968      50000\n#>  9 Africa  1969      52000\n#> 10 Africa  1970      52000\n#> # ℹ 9,887 more rows\n```\n:::\n\n\n. . .\n\nRemove variables using `-`\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-9_179c514787e3250787da218bdd23aca6'}\n\n```{.r .cell-code}\nselect(soybean_use, -entity, -year, -human_food)\n```\n:::\n\n\n## `select()` + `ends_with()`\n\nSelect all columns that end with `\"d\"`\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-10_ac6474b8d229e7d46f96714a2a15c17d'}\n\n```{.r .cell-code}\nselect(soybean_use, ends_with(\"d\"))\n```\n:::\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-11_d7239c87a28df144d70908f7fa5afca7'}\n\n```\n#> # A tibble: 9,897 × 3\n#>   human_food animal_feed processed\n#>        <dbl>       <dbl>     <dbl>\n#> 1      33000        6000     14000\n#> 2      43000        7000     17000\n#> 3      31000        7000      5000\n#> # ℹ 9,894 more rows\n```\n:::\n\n\n. . .\n\nYou can use the same structure for `starts_with()` and `contains()`.\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-12_bc5e53b94bb815c19678a549fc6e854c'}\n\n```{.r .cell-code}\n# this does not match any rows in the soy bean data set\n# but combinations like this are helpful for research data\nselect(soybean_use, starts_with(\"sample_\"))\n\nselect(soybean_use, contains(\"_id_\"))\n```\n:::\n\n\n## `select()` + `any_of()`/`all_of()`\n\nUse a character vector in conjunction with column selection\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-13_61ccc9824b6cc231a7374a954c87d043'}\n\n```{.r .cell-code}\ncols <- c(\"sample_\", \"year\", \"processed\", \"entity\")\n```\n:::\n\n\n. . .\n\n`any_of()` returns any columns that match an element in `cols`\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-14_529385f61e4d5fd638d93f60f9965558'}\n\n```{.r .cell-code}\nselect(soybean_use, any_of(cols))\n```\n:::\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-15_eed40563ee64c713ad7c005ba72112ae'}\n\n```\n#> # A tibble: 9,897 × 3\n#>    year processed entity\n#>   <dbl>     <dbl> <chr> \n#> 1  1961     14000 Africa\n#> # ℹ 9,896 more rows\n```\n:::\n\n\n. . .\n\n`all_of()` tries to match all elements in `cols` and returns an error if an element does not exist\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-16_b6c8608552de4956b06011100e6779be'}\n\n```{.r .cell-code}\nselect(soybean_use, all_of(cols))\n```\n:::\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-17_c11bfd20de8b9f4e8ff83dc4e0c7a5f6'}\n\n```\n#> Error in `all_of()`:\n#> ! Can't subset columns that don't exist.\n#> ✖ Column `sample_` doesn't exist.\n```\n:::\n\n\n## `select()` + `from:to`\n\nMultiple consecutive columns can be selected using the `from:to` structure with either column id or variable name:\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-18_a29811217d3553d2e60249c5eb307a34'}\n\n```{.r .cell-code}\nselect(soybean_use, 1:3)\nselect(soybean_use, code:animal_feed)\n```\n:::\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-19_1fbd14a78cdce4b24634687cc3bfbb8a'}\n\n```\n#> # A tibble: 9,897 × 4\n#>   code   year human_food animal_feed\n#>   <chr> <dbl>      <dbl>       <dbl>\n#> 1 <NA>   1961      33000        6000\n#> 2 <NA>   1962      43000        7000\n#> 3 <NA>   1963      31000        7000\n#> # ℹ 9,894 more rows\n```\n:::\n\n\n. . .\n\nBe a bit careful with these commands: They are not robust if you e.g. change the order of your columns at some point. <br>\n\n# `mutate()` {.inverse}\n> Adds new variables\n\n![Artwork by [Allison Horst](https://twitter.com/allison_horst)](img/AllisonHorst/dplyr_mutate.png){width=45%}\n\n## `mutate()`\n\nNew columns can be added based on values from other columns\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-20_242462802570c6ba75a86f4197c4fe00'}\n\n```{.r .cell-code}\nmutate(soybean_use,\n  sum_human_animal = human_food + animal_feed\n)\n```\n:::\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-21_a6a8bc64f19df0fad9735f3be6fd6bff'}\n\n```\n#> # A tibble: 9,897 × 7\n#>   entity code   year human_food animal_feed processed sum_human_animal\n#>   <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl>            <dbl>\n#> 1 Africa <NA>   1961      33000        6000     14000            39000\n#> 2 Africa <NA>   1962      43000        7000     17000            50000\n#> 3 Africa <NA>   1963      31000        7000      5000            38000\n#> # ℹ 9,894 more rows\n```\n:::\n\n\n. . .\n\nAdd multiple new columns at once:\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-22_86e8c380b1dc3ee758192a39b1f74430'}\n\n```{.r .cell-code}\nmutate(soybean_use,\n  sum_human_animal = human_food + animal_feed,\n  total = human_food + animal_feed + processed\n)\n```\n:::\n\n\n## `mutate()` + `case_when()`\n\nUse `case_when` to add column values conditional on other columns.\n\n`case_when()` can combine many cases into one.\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-23_ac93f512c1475547a7ef93f931d9b1e7'}\n\n```{.r .cell-code}\nmutate(soybean_use,\n  legislation = case_when(\n    between(year, 1980, 2000) ~ \"legislation_1\",  # case 1\n    year >= 2000 ~ \"legislation_2\",               # case 2\n    .default = \"no_legislation\"                   # all other cases\n  )\n)\n#> # A tibble: 9,897 × 7\n#>    entity code   year human_food animal_feed processed legislation   \n#>    <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl> <chr>         \n#>  1 Africa <NA>   1961      33000        6000     14000 no_legislation\n#>  2 Africa <NA>   1962      43000        7000     17000 no_legislation\n#>  3 Africa <NA>   1963      31000        7000      5000 no_legislation\n#>  4 Africa <NA>   1964      43000        6000     14000 no_legislation\n#>  5 Africa <NA>   1965      34000        6000     12000 no_legislation\n#>  6 Africa <NA>   1966      41000        6000      2000 no_legislation\n#>  7 Africa <NA>   1967      47000        6000      4000 no_legislation\n#>  8 Africa <NA>   1968      50000        7000      3000 no_legislation\n#>  9 Africa <NA>   1969      52000        6000      6000 no_legislation\n#> 10 Africa <NA>   1970      52000        6000      8000 no_legislation\n#> # ℹ 9,887 more rows\n```\n:::\n\n\n# `summarize()` {.inverse}\n\n> summarizes data\n\n## `summarize()`\n\n`summarize` will **collapse the data to a single row**\n\n. . .\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-24_bef655feb9d1c7b62705b2bd406609cc'}\n\n```{.r .cell-code}\nsummarize(soybean_use,\n  total_animal = sum(animal_feed, na.rm = TRUE),\n  total_human = sum(human_food, na.rm = TRUE)\n)\n#> # A tibble: 1 × 2\n#>   total_animal total_human\n#>          <dbl>       <dbl>\n#> 1    942503000  1589729000\n```\n:::\n\n\n## `summarize()` by group\n\n`summarize` is much more useful in combination with the grouping argument `.by`\n\n- **summary** will be calculated **separately for each group**\n\n. . .\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-25_a9dc7548c5fdbfb71822eb8e65a24446'}\n\n```{.r .cell-code}\n# summarize the grouped data\nsummarize(soybean_use,\n  total_animal = sum(animal_feed, na.rm = TRUE),\n  total_human = sum(human_food, na.rm = TRUE),\n  .by = year\n)\n#> # A tibble: 53 × 3\n#>     year total_animal total_human\n#>    <dbl>        <dbl>       <dbl>\n#>  1  1961      1503000    16994000\n#>  2  1962      1800000    17326000\n#>  3  1963      2060000    18667000\n#>  4  1964      2002000    19639000\n#>  5  1965      2162000    17796000\n#>  6  1966      3096000    22179000\n#>  7  1967      2818000    23282000\n#>  8  1968      3361000    22747000\n#>  9  1969      3084000    22212000\n#> 10  1970      2496000    24119000\n#> # ℹ 43 more rows\n```\n:::\n\n\n## `count()`\n\nCounts observations by group\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-26_b671d658d75c18ddc77d3db5dbd00491'}\n\n```{.r .cell-code}\n# count rows grouped by year\ncount(soybean_use, year)\n#> # A tibble: 53 × 2\n#>     year     n\n#>    <dbl> <int>\n#>  1  1961   178\n#>  2  1962   178\n#>  3  1963   178\n#>  4  1964   178\n#>  5  1965   178\n#>  6  1966   178\n#>  7  1967   178\n#>  8  1968   178\n#>  9  1969   178\n#> 10  1970   178\n#> # ℹ 43 more rows\n```\n:::\n\n\n# The pipe ` |> ` {.inverse}\n\n> Combine multiple data operations into one command\n\n## The pipe `|>`\n\nData transformation often requires **multiple operations** in sequence.\n\nThe pipe operator `|>` helps to keep these operations clear and readable.\n\n- You may also see `%>%` from the `magrittr` package\n- Turn on the native R pipe ` |> ` in **Tools -> Global Options -> Code**\n\n:::{.fragment}\n\n![](img/day2/native-pipe.png){width=50%}\n\n:::\n\n:::{.aside}\n\nSee [here](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/) for differences \nbetween the two pipe versions\n\n:::\n\n## The pipe `|>`\n\nLet's look at an example without pipe:\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-27_bd1da73b9e52f2eb7276a13a2b6c5ff9'}\n\n```{.r .cell-code}\n# 1: filter rows that actually represent a country\nsoybean_new <- filter(soybean_use, !is.na(code))\n\n# 2: summarize mean values by year\nsoybean_new <- summarize(soybean_new,\n  mean_processed = mean(processed, na.rm = TRUE),\n  sd_processed = sd(processed, na.rm = TRUE),\n  .by = year\n)\n```\n:::\n\n\n. . .\n\n**How could we make this more efficient?**\n\n## The pipe `|>` \n\nWe could do everything in one step without intermediate results by using use one **nested function**\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-28_7e32be0af3d1bcbf62a2804cf758c385'}\n\n```{.r .cell-code}\nsoybean_new <- summarize(\n  filter(soybean_use, !is.na(code)),\n  mean_processed = mean(processed, na.rm = TRUE),\n  sd_processed = sd(processed, na.rm = TRUE),\n  .by = year\n)\n```\n:::\n\n\n. . .\n\nBut this gets complicated and error prone very quickly\n\n## The pipe `|>`\n\nThe pipe operator makes it very easy to combine multiple operations:\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-29_7c0352fd033151ad5805d48fc5942220'}\n\n```{.r .cell-code}\nsoybean_new <- soybean_use |>\n  filter(!is.na(code)) |>\n  summarize(\n    mean_processed = mean(processed, na.rm = TRUE),\n    sd_processed = sd(processed, na.rm = TRUE),\n    .by = year\n  )\n```\n:::\n\n\n. . .\n\nYou can read from top to bottom and interpret the `|>` as an \"and then do\".\n\n## The pipe `|>`\n\nBut what is happening?\n\nThe pipe is \"pushing\" the result of one line into the first argument of the function from the next line.\n\n. . .\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-30_31fbd9bb1d4e3aa6b1c4e62feded033d'}\n\n```{.r .cell-code}\nsoybean_use |> \n  count(year)\n\n# instead of \ncount(soybean_use, year)\n```\n:::\n\n\n. . .\n\nPiping works perfectly with the `tidyverse` functions because they are designed\nto return a tibble **and** take a tibble as first argument.\n\n. . .\n\n:::{.callout-tip}\nUse the keyboard shortcut ` Ctrl/Cmd + Shift + M ` to insert ` |> `\n:::\n\n## The pipe `|>`\n\nPiping also works well together with `ggplot`\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-31_7793422563b04d60c90bce40e171a63d'}\n\n:::\n\n::: {.cell output-location='column' hash='dplyr_cache/revealjs/unnamed-chunk-32_5b09e77d58ab9c26e292897995d69517'}\n\n```{.r .cell-code}\nsoybean_use |>\n  filter(!is.na(code)) |>\n  select(year, processed) |>\n  summarize(\n    processed = sum(processed,\n      na.rm = TRUE\n    ),\n    .by = year\n  ) |>\n  ggplot(aes(\n    x = year,\n    y = processed\n  )) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](dplyr_files/figure-revealjs/unnamed-chunk-32-1.png){width=960}\n:::\n:::\n\n\n# Combining mulitiple tables{.inverse}\n\n## Combine two tibbles by row `bind_rows`\n\nSituation: Two (or more) `tibbles` with the same variables (column names)\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-33_549bcf58c0ac1d316da8a168ab9dea61'}\n\n```{.r .cell-code}\ntbl_a <- soybean_use[1:2, ] # first two rows\ntbl_b <- soybean_use[2:nrow(soybean_use), ] # the rest\n```\n:::\n\n<br>\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-34_06e169ca3f986357961379ed59321e64'}\n\n```{.r .cell-code}\ntbl_a\n```\n:::\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-35_753d2e45affbeaa51206bc2b11c4e316'}\n\n```\n#> # A tibble: 2 × 6\n#>   entity code   year human_food animal_feed processed\n#>   <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl>\n#> 1 Africa <NA>   1961      33000        6000     14000\n#> 2 Africa <NA>   1962      43000        7000     17000\n```\n:::\n\n<br>\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-36_ecbbc6875d65d631080e82b10530a230'}\n\n```{.r .cell-code}\ntbl_b\n```\n:::\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-37_36bf569a95fef69cc20030dae20ef739'}\n\n```\n#> # A tibble: 9,896 × 6\n#>   entity code   year human_food animal_feed processed\n#>   <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl>\n#> 1 Africa <NA>   1962      43000        7000     17000\n#> 2 Africa <NA>   1963      31000        7000      5000\n#> # ℹ 9,894 more rows\n```\n:::\n\n\n## Combine two tibbles by row `bind_rows`\n\nBind the rows together with `bind_rows()`:\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-38_8e3f6efead3ae38958cf611c845e7f39'}\n\n```{.r .cell-code}\nbind_rows(tbl_a, tbl_b)\n```\n:::\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-39_160631c00947cc81812d6ee8826dff82'}\n\n```\n#> # A tibble: 9,898 × 6\n#>   entity code   year human_food animal_feed processed\n#>   <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl>\n#> 1 Africa <NA>   1961      33000        6000     14000\n#> 2 Africa <NA>   1962      43000        7000     17000\n#> # ℹ 9,896 more rows\n```\n:::\n\n\n. . .\n\nYou can also add an ID-column to indicate which line belonged to which table:\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-40_42834b3724459e651e8461da245423f9'}\n\n```{.r .cell-code}\nbind_rows(a = tbl_a, b = tbl_b, .id = \"id\")\n```\n:::\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-41_6070938ca6a517d9c370d51e7a8e0649'}\n\n```\n#> # A tibble: 9,898 × 7\n#>   id    entity code   year human_food animal_feed processed\n#>   <chr> <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl>\n#> 1 a     Africa <NA>   1961      33000        6000     14000\n#> 2 a     Africa <NA>   1962      43000        7000     17000\n#> 3 b     Africa <NA>   1962      43000        7000     17000\n#> # ℹ 9,895 more rows\n```\n:::\n\n\n. . .\n\nYou can use `bind_rows()` to bind as many tables as you want:\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-42_b589a2eb165315597f53677732559954'}\n\n```{.r .cell-code}\nbind_rows(a = tbl_a, b= tbl_b, c = tbl_c, ..., .id = \"id\")\n```\n:::\n\n\n## Join tibbles with `left_join()`\n\nSituation: Two tables that share some but not all columns.\n\n. . .\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-43_9864b6ab0d44584876e3b79bc8a90fff'}\n\n:::\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-44_cbfc26503734e53a18c1a527933e766d'}\n\n```{.r .cell-code}\nsoybean_use\n```\n:::\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-45_04f0a4b34b99d1ad7d8b2f7575a1bfae'}\n\n```\n#> # A tibble: 9,897 × 6\n#>   entity code   year human_food animal_feed processed\n#>   <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl>\n#> 1 Africa <NA>   1961      33000        6000     14000\n#> 2 Africa <NA>   1962      43000        7000     17000\n#> # ℹ 9,895 more rows\n```\n:::\n\n<br>\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-46_753ae50f867a14bb3a018cbb0b0b3d4a'}\n\n```{.r .cell-code}\n# table with the gdp of the country/continent for each year\ngdp\n```\n:::\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-47_0db485a103732349561e07f4d569ea24'}\n\n```\n#> # A tibble: 9,897 × 3\n#>   entity  year   gdp\n#>   <chr>  <dbl> <dbl>\n#> 1 Africa  1961  4.02\n#> 2 Africa  1962  4.02\n#> # ℹ 9,895 more rows\n```\n:::\n\n\n## Join tibbles with `left_join()`\n\nJoin the two tables by the two common columns `entity` and `year`\n\n\n::: {.cell hash='dplyr_cache/revealjs/unnamed-chunk-48_140eef6f32423824ff5ed55000b8086b'}\n\n```{.r .cell-code}\nleft_join(soybean_use, gdp, by = c(\"entity\", \"year\"))\n#> # A tibble: 9,897 × 7\n#>    entity code   year human_food animal_feed processed   gdp\n#>    <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl> <dbl>\n#>  1 Africa <NA>   1961      33000        6000     14000  4.02\n#>  2 Africa <NA>   1962      43000        7000     17000  4.02\n#>  3 Africa <NA>   1963      31000        7000      5000  4.02\n#>  4 Africa <NA>   1964      43000        6000     14000  4.02\n#>  5 Africa <NA>   1965      34000        6000     12000  4.02\n#>  6 Africa <NA>   1966      41000        6000      2000  4.02\n#>  7 Africa <NA>   1967      47000        6000      4000  4.02\n#>  8 Africa <NA>   1968      50000        7000      3000  4.02\n#>  9 Africa <NA>   1969      52000        6000      6000  4.02\n#> 10 Africa <NA>   1970      52000        6000      8000  4.02\n#> # ℹ 9,887 more rows\n```\n:::\n\n\n. . .\n\n`left_join()` means that the resulting tibble will contain all rows of `soybean_use`,\nbut not necessarily all rows of `gdp`\n\n## Different `*_join()` functions\n\n![](img/day2/dplyr_join.png){width=70% fig-align=\"center\"}\n\n# Summary{.inverse}\n\n> Data transformation with dplyr\n\n## Summary I\n\nAll `dplyr` functions take a tibble as first argument and return a tibble.\n\n#### `filter()`\n\n:::{.nonincremental}\n\n- **pick rows** with helpers\n  - relational and logical operators\n  - `%in%`\n  - `is.na()`\n  - `between()`\n  - `near()`\n  \n:::\n\n## Summary II\n\n:::{.nonincremental}\n\nAll `dplyr` functions take a tibble as first argument and return a tibble.\n  \n#### `select()`\n\n- **pick columns** with helpers\n  - `starts_with()`, `ends_with()`\n  - `contains()`\n  - `matches()`\n  - `any_of()`, `all_of()`\n  \n:::\n  \n## Summary III\n\n#### `arrange()`\n\n:::{.nonincremental}\n\n- **change order** of rows (adscending)\n  - or descending with `desc()`\n\n#### `mutate()`\n\n- **add columns** but keep all columns\n  - `case_when()` for conditional values\n  \n:::\n\n## Summary IV\n\n:::{.nonincremental}\n\n#### `summarize()`\n\n- **collapse rows** into one row by some summary\n  - use `.by` argument to summarize by group\n\n#### `count`\n\n- **count rows** based on a group\n\n:::\n  \n## Summary V\n\n:::{.nonincremental}\n\n#### `bind_rows()`\n\n- **combine rows** of multiple tibbles into one\n  - the tibbles need to have the same columns\n  - add an id column with the argument `.id = \"id\"`\n  - function `bind_cols()` works similarly just for columns\n  \n#### `left_join()`\n\n- **combine tables** based on common columns\n\n:::\n\n# Now you {.inverse}\n\n[Task (60 min)]{.highlight-blue}<br>\n\n[Transform the penguin data set]{.big-text}\n\n**Find the task description [here](https://selinazitrone.github.io/intro-r-data-analysis/sessions/08_dplyr.html)**\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}