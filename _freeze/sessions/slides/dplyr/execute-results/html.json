{
  "hash": "258169b127d67515dccf1bb73b59df76",
  "result": {
    "markdown": "---\ntitle: \"Data transformation with dplyr\"\nsubtitle: \"Day 2 - Introduction to Data Analysis with R\"\nauthor: \"Selina Baldauf\"\ninstitute: \"Freie Universität Berlin - Theoretical Ecology\"\ndate: today\ndate-format: long\nformat: \n  revealjs:\n    footer: \"Selina Baldauf // Data transformation with dplyr\"\n    highlight-style: breeze\n    mainfont: Cabinet Grotesk\n    slide-number: true\n    show-slide-number: all\n    incremental: true\n    self-contained: true\n    code-line-numbers: true\n    auto-stretch: false\n    scrollable: true\n    theme: slides.scss\n    fig-align: center\nexecute: \n  echo: true\n  warning: false\n  message: false\n  cache: true\nfrom: markdown+emoji\ntitle-slide-attributes: \n  data-background-image: img/hex-stickers/dplyr.png\n  data-background-position: 90% 85%\n  data-background-size: \"20%\"\n---\n\n\n\n\n\n## Data transformation\n\nData transformation is an important step in **understanding** the data and **preparing** it for further analysis.\n\n![](img/day1/datascience_workflow_tidyverse.png)\n\n<br>\n\nWe can use the tidyverse package `dplyr` for this.\n\n## Data transformation\n\nWith `dplyr` we can (among other things)\n\n  - **Filter** data to analyse only a part of it\n  \n  - **Create** new variables\n  \n  - **Summarize** data\n  \n  - **Combine** multiple tables\n  \n  - **Rename** variables\n  \n  - **Reorder** observations or variables\n  \n. . .\n  \nTo get started load the package `dplyr`:\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-1_9bdcfb8f0ed5171cb4ce7813b4dcd00d'}\n\n```{.r .cell-code}\nlibrary(dplyr)\n# or\nlibrary(tidyverse)\n```\n:::\n\n\n\n## Dplyr basic vocuabulary for data manipulation\n\n- `filter()` picks observations (rows) based on their values\n- `select()` picks variables (columns) based on their names\n- `mutate()` adds new variables based on existing ones\n- `summarize()` combines multiple values into a single summary value\n\n[Perform any of these operations by group]{.fragment}\n\n:::{.aside}\n\nfrom [dplyr package description](https://dplyr.tidyverse.org/)\n\n:::\n\n## Dplyr basic vocabulary\n\nAll of the `dplyr` functions work similarly: <br> \n\n- **First argument** is the data (a tibble)\n- **Other arguments** specify what to do exactly\n- **Return** a tibble\n\n## Example data\n\nSoybean production for different use by year and country.\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-2_c8e172f2fbe4a2ba175f50aeb5a4cc30'}\n\n```{.r .cell-code}\nsoybean_use\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-3_6bb0fdc7a4ad32f010a714149cb2792c'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,897 × 6\n  entity code   year human_food animal_feed processed\n  <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl>\n1 Africa <NA>   1961      33000        6000     14000\n2 Africa <NA>   1962      43000        7000     17000\n3 Africa <NA>   1963      31000        7000      5000\n4 Africa <NA>   1964      43000        6000     14000\n5 Africa <NA>   1965      34000        6000     12000\n# ℹ 9,892 more rows\n```\n:::\n:::\n\n\n\n:::{.aside}\n\nData from [Our World in Data](https://ourworldindata.org/forests-and-deforestation) provided by [tidytuesday](https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-04-06/readme.md)\n\n:::\n\n# `filter()`{.inverse}\n\n> picks observations (rows) based on their value\n\n![Artwork by [Allison Horst](https://twitter.com/allison_horst)](img/AllisonHorst/dplyr_filter.jpg){width=70%}\n\n## Useful `filter()` helpers\n\nThese functions and operators help you filter your observations:\n\n- relational operators `<`, `>`, `==`, ...\n- logical operators `&`, `|`, `!`\n- `%in%` to filter multiple values\n- `is.na()` to filter missing values\n- `between()` to filter values that are between an upper and lower boundary\n- `near()` to compare floating points (use instead of `==` for doubles)\n\n## `filter()`\n\nFilter rows that contain the values for Germany\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-4_3c089ce54a8de1ff8fe121b9109b9405'}\n\n```{.r .cell-code}\nfilter(soybean_use, entity == \"Germany\")\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-5_bf48c6585af573cbb30ac955bb5f18b0'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53 × 6\n  entity  code   year human_food animal_feed processed\n  <chr>   <chr> <dbl>      <dbl>       <dbl>     <dbl>\n1 Germany DEU    1961          0        3000   1042000\n2 Germany DEU    1962          0        3000    935000\n3 Germany DEU    1963          0        3000   1092000\n4 Germany DEU    1964          0        3000   1096000\n5 Germany DEU    1965          0        3000   1435000\n# ℹ 48 more rows\n```\n:::\n:::\n\n\n\n. . .\n\n`filter()` goes through each row of the data and return only those rows where the value for `entity` is `\"Germany\"` \n\n## `filter()` + `%in%`\n\nUse the `%in%` operator to filter multiple countries\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-6_e80b3cce6b30af6e85b1b566ac530aa5'}\n\n```{.r .cell-code}\ncountries_select <- c(\"Germany\", \"Austria\", \"Switzerland\")\nfilter(soybean_use, entity %in% countries_select)\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-7_d328e29cf03850e25cd6a72979a39c2e'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 159 × 6\n  entity  code   year human_food animal_feed processed\n  <chr>   <chr> <dbl>      <dbl>       <dbl>     <dbl>\n1 Austria AUT    1961          0           0         0\n2 Austria AUT    1962          0           0         0\n3 Austria AUT    1963          0           0         0\n4 Austria AUT    1964          0           0         0\n5 Austria AUT    1965          0           0         0\n# ℹ 154 more rows\n```\n:::\n:::\n\n\n\n## `filter()` + `is.na()`\n\nFilter only rows that don't have a country code (i.e. the continents etc.)\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-8_5b49e27ed47855437924b7f4ac88af4c'}\n\n```{.r .cell-code}\nfilter(soybean_use, is.na(code))\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-9_4960ad82d5dd62123bc947c6a1b637ff'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,734 × 6\n  entity code   year human_food animal_feed processed\n  <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl>\n1 Africa <NA>   1961      33000        6000     14000\n2 Africa <NA>   1962      43000        7000     17000\n3 Africa <NA>   1963      31000        7000      5000\n4 Africa <NA>   1964      43000        6000     14000\n5 Africa <NA>   1965      34000        6000     12000\n# ℹ 1,729 more rows\n```\n:::\n:::\n\n\n\n. . .\n\nOr the opposite: filter only the rows that have a country code with\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-10_14c70db90780d83883f932d6f454e915'}\n\n```{.r .cell-code}\nfilter(soybean_use, !is.na(code))\n```\n:::\n\n\n\n## `filter()` + `between()`\n\n#### Combine different filters:\n\nSelect rows where\n\n- the value for `years` is between 1970 and 1980\n- the value for `entity` is Germany\n\n:::{.fragment}\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-11_753974556a2c8c6952deef94002c2935'}\n\n```{.r .cell-code}\nfilter(soybean_use, between(year, 1970, 1980) & entity == \"Germany\")\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-12_568705a0a710691a1fc711c6754e3f2b'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 6\n  entity  code   year human_food animal_feed processed\n  <chr>   <chr> <dbl>      <dbl>       <dbl>     <dbl>\n1 Germany DEU    1970          0        3000   2118000\n2 Germany DEU    1971          0        3000   2119000\n3 Germany DEU    1972          0        5000   2271000\n4 Germany DEU    1973          0        3000   2820000\n5 Germany DEU    1974          0        3000   3704000\n# ℹ 6 more rows\n```\n:::\n:::\n\n\n:::\n\n# `select()`{.inverse}\n\n> picks variables (columns) based on their names\n\n## Useful `select()` helpers\n\n- `starts_with()` and `ends_with()`: variable names that start/end with a specific string\n- `contains()`: variable names that contain a specific string\n- `matches()`: variable names that  match a regular expression\n- `any_of()` and `all_of()`: variables that are contained in a character vector\n\n## `select()`\n\nSelect the variables entity, year and human food\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-13_005aa85c794bcb7b5fa6fc5c43d6fc6b'}\n\n```{.r .cell-code}\nselect(soybean_use, entity, year, human_food)\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-14_b638b7e2651f632e42273b53185211bf'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,897 × 3\n  entity  year human_food\n  <chr>  <dbl>      <dbl>\n1 Africa  1961      33000\n2 Africa  1962      43000\n# ℹ 9,895 more rows\n```\n:::\n:::\n\n\n\n. . .\n\nRemove variables using `-`\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-15_82c67ce8505e3c50c7d1b79775c3d873'}\n\n```{.r .cell-code}\nselect(soybean_use, -entity, -year, -human_food)\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-16_af6ed4770da2f10c66c9f7215a9e72cd'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,897 × 3\n  code  animal_feed processed\n  <chr>       <dbl>     <dbl>\n1 <NA>         6000     14000\n2 <NA>         7000     17000\n# ℹ 9,895 more rows\n```\n:::\n:::\n\n\n\n## `select()` + `ends_with()`\n\nSelect all columns that end with `\"d\"`\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-17_a153d3dac6b643f605947b304cee62d0'}\n\n```{.r .cell-code}\nselect(soybean_use, ends_with(\"d\"))\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-18_6b096e26143b2647961b181aa3169f72'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,897 × 3\n  human_food animal_feed processed\n       <dbl>       <dbl>     <dbl>\n1      33000        6000     14000\n2      43000        7000     17000\n3      31000        7000      5000\n# ℹ 9,894 more rows\n```\n:::\n:::\n\n\n\n. . .\n\nYou can use the same structure for `starts_with()` and `contains()`.\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-19_dd5fb576cdf8813734b7b7c7cf31b6c2'}\n\n```{.r .cell-code}\n# this does not match any rows in the soy bean data set\n# but combinations like this are helpful for research data\nselect(soybean_use, starts_with(\"sample_\"))\n\nselect(soybean_use, contains(\"_id_\"))\n```\n:::\n\n\n\n## `select()` + `any_of()`/`all_of()`\n\nUse a character vector in conjunction with column selection\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-20_2c901206d6b922bcb96bbdcb9e497c77'}\n\n```{.r .cell-code}\ncols <- c(\"sample_\", \"year\", \"processed\", \"entity\")\n```\n:::\n\n\n\n. . .\n\n`any_of()` returns any columns that match an element in `cols`\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-21_13db53a252be64e49a6dce2703aeb273'}\n\n```{.r .cell-code}\nselect(soybean_use, any_of(cols))\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-22_2be28f1aa573b18be85cb583eb12273d'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,897 × 3\n   year processed entity\n  <dbl>     <dbl> <chr> \n1  1961     14000 Africa\n# ℹ 9,896 more rows\n```\n:::\n:::\n\n\n\n. . .\n\n`all_of()` tries to match all elements in `cols` and returns an error if an element does not exist\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-23_7f63d36f91a37b59399ed42b40a9b778'}\n\n```{.r .cell-code}\nselect(soybean_use, all_of(cols))\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-24_7d8507497997bf993d3d83624d0f9f52'}\n::: {.cell-output .cell-output-error}\n```\nError in `all_of()`:\n! Can't subset columns that don't exist.\n✖ Column `sample_` doesn't exist.\n```\n:::\n:::\n\n\n\n## `select()` + `from:to`\n\nMultiple consecutive columns can be selected using the `from:to` structure with either column id or variable name:\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-25_2b80f7ecbf06d8520d6dc2b3460ddfe0'}\n\n```{.r .cell-code}\nselect(soybean_use, 1:3)\nselect(soybean_use, code:animal_feed)\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-26_73d7c4b2fca778910b4fd1958943195a'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,897 × 4\n  code   year human_food animal_feed\n  <chr> <dbl>      <dbl>       <dbl>\n1 <NA>   1961      33000        6000\n2 <NA>   1962      43000        7000\n3 <NA>   1963      31000        7000\n# ℹ 9,894 more rows\n```\n:::\n:::\n\n\n\n. . .\n\nBe a bit careful with these commands: They are not robust if you e.g. change the order of your columns at some point. <br>\n\n# `mutate()`{.inverse}\n> Adds new variables\n\n![Artwork by [Allison Horst](https://twitter.com/allison_horst)](img/AllisonHorst/dplyr_mutate.png){width=45%}\n\n## `mutate()`\n\nNew columns can be added based on values from other columns\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-27_22eb29a26a745389396b2f58ab6c77aa'}\n\n```{.r .cell-code}\nmutate(soybean_use,\n  sum_human_animal = human_food + animal_feed\n)\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-28_9e16a6476c43ee2d459cf81d375c0c5b'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,897 × 7\n  entity code   year human_food animal_feed processed sum_human_animal\n  <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl>            <dbl>\n1 Africa <NA>   1961      33000        6000     14000            39000\n2 Africa <NA>   1962      43000        7000     17000            50000\n3 Africa <NA>   1963      31000        7000      5000            38000\n# ℹ 9,894 more rows\n```\n:::\n:::\n\n\n\n. . .\n\nAdd multiple new columns at once:\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-29_0e248a92df0be5df0b05719e4c9db1d0'}\n\n```{.r .cell-code}\nmutate(soybean_use,\n  sum_human_animal = human_food + animal_feed,\n  total = human_food + animal_feed + processed\n)\n```\n:::\n\n\n\n## `mutate()` + `case_when()`\n\nUse `case_when` to add column values conditional on other columns.\n\n`case_when()` can combine many cases into one.\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-30_6020d08996f05fd488f9e07b5a74c870'}\n\n```{.r .cell-code}\nmutate(soybean_use,\n  legislation = case_when(\n    year < 2000 & year >= 1980 ~ \"legislation_1\",    # case 1\n    year >= 2000 ~ \"legislation_2\",                  # case 2\n    .default = \"no_legislation\"                      # any other cases\n  )\n)\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-31_047a25f587699dfd9376f84457dd0158'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,897 × 7\n  entity code   year human_food animal_feed processed legislation   \n  <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl> <chr>         \n1 Africa <NA>   1961      33000        6000     14000 no_legislation\n2 Africa <NA>   1962      43000        7000     17000 no_legislation\n3 Africa <NA>   1963      31000        7000      5000 no_legislation\n# ℹ 9,894 more rows\n```\n:::\n:::\n\n\n\n# `summarize()` {.inverse}\n\n> summarizes data\n\n## `summarize()`\n\n`summarize` will **collapse the data to a single row**\n\n. . .\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-32_b698f940898fa10d15ae16b83b8502c1'}\n\n```{.r .cell-code}\nsummarize(soybean_use,\n  total_animal = sum(animal_feed, na.rm = TRUE),\n  total_human = sum(human_food, na.rm = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  total_animal total_human\n         <dbl>       <dbl>\n1    942503000  1589729000\n```\n:::\n:::\n\n\n\n## `summarize()` by group\n\n`summarize` is much more useful in combination with the grouping argument `.by`\n\n- **summary** will be calculated **separately for each group**\n\n. . .\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-33_4aeb7cfd76842718c4726df14d354111'}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\n# summarize the grouped data\nsummarize(soybean_use,\n  total_animal = sum(animal_feed, na.rm = TRUE),\n  total_human = sum(human_food, na.rm = TRUE),\n  .by = year\n)\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-34_f4e3661be4798995227903669c81d37e'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53 × 3\n   year total_animal total_human\n  <dbl>        <dbl>       <dbl>\n1  1961      1503000    16994000\n2  1962      1800000    17326000\n# ℹ 51 more rows\n```\n:::\n:::\n\n\n\n## `count()`\n\nCounts observations by group\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-35_0812258a46b84e2925f5d8bc5f35c280'}\n\n```{.r .cell-code}\n# count rows grouped by year\ncount(soybean_use, year)\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-36_eb558ab900e2ddcd1954c3f1ceeedfa7'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53 × 2\n   year     n\n  <dbl> <int>\n1  1961   178\n2  1962   178\n3  1963   178\n4  1964   178\n# ℹ 49 more rows\n```\n:::\n:::\n\n\n\n# The pipe ` |> ` {.inverse}\n\n> Combine multiple data operations into one command\n\n## The pipe `|>`\n\nData transformation often requires **multiple operations** in sequence.\n\nThe pipe operator `|>` helps to keep these operations clear and readable.\n\n- You may also see `%>%` from the `magrittr` package\n\n:::{.fragment}\n\n- Turn on the native R pipe ` |> ` in **Tools -> Global Options -> Code**\n\n\n![](img/day2/native-pipe.png){width=50%}\n\n:::\n\n:::{.aside}\n\nSee [here](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/) for differences \nbetween the two pipe versions\n\n:::\n\n## The pipe `|>`\n\nLet's look at an example without pipe:\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-37_aa59728cbffbfe0b8b84a5842992b473'}\n\n```{.r .cell-code}\n# 1: filter rows that actually represent a country\nsoybean_new <- filter(soybean_use, !is.na(code))\n\n# 2: summarize mean values by year\nsoybean_new <- summarize(soybean_new,\n  mean_processed = mean(processed, na.rm = TRUE),\n  sd_processed = sd(processed, na.rm = TRUE),\n  .by = year\n)\n```\n:::\n\n\n\n. . .\n\n**How could we make this more efficient?**\n\n## The pipe `|>` \n\nWe could do everything in one step without intermediate results by using use one **nested function**\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-38_460f4cce8d3d90a4790bfbcdfd663366'}\n\n```{.r .cell-code}\nsoybean_new <- summarize(\n  filter(soybean_use, !is.na(code)),\n  mean_processed = mean(processed, na.rm = TRUE),\n  sd_processed = sd(processed, na.rm = TRUE),\n  .by = year\n)\n```\n:::\n\n\n\n. . .\n\nBut this gets complicated and error prone very quickly\n\n## The pipe `|>`\n\nThe pipe operator makes it very easy to combine multiple operations:\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-39_202bc83cfd615d9461e3d91c7c53e832'}\n\n```{.r .cell-code}\nsoybean_new <- soybean_use |>\n  filter(!is.na(code)) |>\n  summarize(\n    mean_processed = mean(processed, na.rm = TRUE),\n    sd_processed = sd(processed, na.rm = TRUE),\n    .by = year\n  )\n```\n:::\n\n\n\n. . .\n\nYou can read from top to bottom and interpret the `|>` as an \"and then do\".\n\n## The pipe `|>`\n\nBut what is happening?\n\nThe pipe is \"pushing\" the result of one line into the first argument of the function from the next line.\n\n. . .\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-40_645304e2ff8fc4ae0413e499d6b9eb0b'}\n\n```{.r .cell-code}\nsoybean_use |> \n  count(year)\n\n# instead of \ncount(soybean_use, year)\n```\n:::\n\n\n\n. . .\n\nPiping works perfectly with the `tidyverse` functions because they are designed\nto return a tibble **and** take a tibble as first argument.\n\n. . .\n\n:::{.callout-tip}\nUse the keyboard shortcut ` Ctrl/Cmd + Shift + M ` to insert ` |> `\n:::\n\n## The pipe `|>`\n\nPiping also works well together with `ggplot`\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-41_0948c00830967ac3674a2ec56f4aaedf'}\n\n```{.r .cell-code}\nsoybean_use |>\n  filter(!is.na(code)) |>\n  select(year, processed) |>\n  summarize(\n    processed = sum(processed,\n      na.rm = TRUE\n    ),\n    .by = year\n  ) |>\n  ggplot(aes(\n    x = year,\n    y = processed\n  )) +\n  geom_line()\n```\n:::\n\n\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-42_33ec749df473373a8b753432ed6997a8'}\n::: {.cell-output-display}\n![](dplyr_files/figure-html/unnamed-chunk-42-1.png){width=604.8}\n:::\n:::\n\n\n\n:::\n\n:::\n\n# Combining mulitiple tables{.inverse}\n\n## Combine two tibbles by row `bind_rows`\n\nSituation: Two (or more) `tibbles` with the same variables (column names)\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-43_29bfabe33b8405676cf8b32391c73ddd'}\n\n```{.r .cell-code}\ntbl_a <- soybean_use[1:2, ] # first two rows\ntbl_b <- soybean_use[2:nrow(soybean_use), ] # the rest\n```\n:::\n\n\n<br>\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-44_c1ec584ca2b04009f65f5d3e3daf387c'}\n\n```{.r .cell-code}\ntbl_a\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-45_ba1e40d1afcf015f433152512cd6290b'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  entity code   year human_food animal_feed processed\n  <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl>\n1 Africa <NA>   1961      33000        6000     14000\n2 Africa <NA>   1962      43000        7000     17000\n```\n:::\n:::\n\n\n<br>\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-46_aac77e620f5a8baddebfdb52221305c2'}\n\n```{.r .cell-code}\ntbl_b\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-47_b69d85b57abf20ed2e128bb73cec0b13'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,896 × 6\n  entity code   year human_food animal_feed processed\n  <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl>\n1 Africa <NA>   1962      43000        7000     17000\n2 Africa <NA>   1963      31000        7000      5000\n# ℹ 9,894 more rows\n```\n:::\n:::\n\n\n\n## Combine two tibbles by row `bind_rows`\n\nBind the rows together with `bind_rows()`:\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-48_eb239306cddb11838b3678a131b8f0dd'}\n\n```{.r .cell-code}\nbind_rows(tbl_a, tbl_b)\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-49_a57f2be13871d808c37e62281aabb392'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,898 × 6\n  entity code   year human_food animal_feed processed\n  <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl>\n1 Africa <NA>   1961      33000        6000     14000\n2 Africa <NA>   1962      43000        7000     17000\n# ℹ 9,896 more rows\n```\n:::\n:::\n\n\n\n. . .\n\nYou can also add an ID-column to indicate which line belonged to which table:\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-50_20419aa2a4d45bbb558c4abaeddaccee'}\n\n```{.r .cell-code}\nbind_rows(a = tbl_a, b = tbl_b, .id = \"id\")\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-51_2c41d82885c6cd3816cc6a06bb32572e'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,898 × 7\n  id    entity code   year human_food animal_feed processed\n  <chr> <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl>\n1 a     Africa <NA>   1961      33000        6000     14000\n2 a     Africa <NA>   1962      43000        7000     17000\n3 b     Africa <NA>   1962      43000        7000     17000\n# ℹ 9,895 more rows\n```\n:::\n:::\n\n\n\n. . .\n\nYou can use `bind_rows()` to bind as many tables as you want:\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-52_16f7bf9783907fe408dbe826c22ba3a5'}\n\n```{.r .cell-code}\nbind_rows(a = tbl_a, b= tbl_b, c = tbl_c, ..., .id = \"id\")\n```\n:::\n\n\n\n## Join tibbles with `left_join()`\n\nSituation: Two tables that share some but not all columns.\n\n. . .\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-53_8339202fc09d828d8926b00276a7b662'}\n\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-54_9241ece8c698b694cb1a39585a96def3'}\n\n```{.r .cell-code}\nsoybean_use\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-55_48ee09d302bf02a48c239f291e168e7e'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,897 × 6\n  entity code   year human_food animal_feed processed\n  <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl>\n1 Africa <NA>   1961      33000        6000     14000\n2 Africa <NA>   1962      43000        7000     17000\n# ℹ 9,895 more rows\n```\n:::\n:::\n\n\n<br>\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-56_4f394f999838125fcbaa32cb3a4999e7'}\n\n```{.r .cell-code}\n# table with the gdp of the country/continent for each year\ngdp\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-57_79db15620340a09b2854a560246c04e5'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,897 × 3\n  entity  year   gdp\n  <chr>  <dbl> <dbl>\n1 Africa  1961  5.71\n2 Africa  1962  5.71\n# ℹ 9,895 more rows\n```\n:::\n:::\n\n\n\n## Join tibbles with `left_join()`\n\nJoin the two tables by the two common columns `entity` and `year`\n\n\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-58_b6dfaa24a86172e09ecf834f83d8526b'}\n\n```{.r .cell-code}\nleft_join(soybean_use, gdp, by = c(\"entity\", \"year\"))\n```\n:::\n\n::: {.cell hash='dplyr_cache/html/unnamed-chunk-59_360b625913511f97a34094b6ce078527'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,897 × 7\n  entity code   year human_food animal_feed processed   gdp\n  <chr>  <chr> <dbl>      <dbl>       <dbl>     <dbl> <dbl>\n1 Africa <NA>   1961      33000        6000     14000  5.71\n2 Africa <NA>   1962      43000        7000     17000  5.71\n3 Africa <NA>   1963      31000        7000      5000  5.71\n# ℹ 9,894 more rows\n```\n:::\n:::\n\n\n\n. . .\n\n`left_join()` means that the resulting tibble will contain all rows of `soybean_use`,\nbut not necessarily all rows of `gdp`\n\n# Different `*_join()` functions\n\n![](img/day2/dplyr_join.png){width=70%}\n\n# Summary{.inverse}\n\n> Data transformation with dplyr\n\n## Summary I\n\nAll `dplyr` functions take a tibble as first argument and return a tibble.\n\n#### `filter()`\n\n:::{nonincremental}\n\n- **pick rows** with helpers\n  - relational and logical operators\n  - `%in%`\n  - `is.na()`\n  - `between()`\n  - `near()`\n  \n:::\n\n## Summary II\n\n:::{nonincremental}\n\nAll `dplyr` functions take a tibble as first argument and return a tibble.\n  \n#### `select()`\n\n- **pick columns** with helpers\n  - `starts_with()`, `ends_with()`\n  - `contains()`\n  - `matches()`\n  - `any_of()`, `all_of()`\n  \n:::\n  \n## Summary III\n\n#### `arrange()`\n\n:::{nonincremental}\n\n- **change order** of rows (adscending)\n  - or descending with `desc()`\n\n#### `mutate()`\n\n- **add columns** but keep all columns\n  - `case_when()` for conditional values\n  \n:::\n\n## Summary III\n\n:::{nonincremental}\n\n#### `summarize()`\n\n- **collapse rows** into one row by some summary\n  - use `.by` argument to summarize by group\n\n#### `count`\n\n- **count rows** based on a group\n\n:::\n  \n## Summary IV\n\n:::{nonincremental}\n\n#### `bind_rows()`\n\n- **combine rows** of multiple tibbles into one\n  - the tibbles need to have the same columns\n  - add an id column with the argument `.id = \"id\"`\n  - function `bind_cols()` works similarly just for columns\n  \n#### `left_join()`\n\n- **combine tables** based on common columns\n\n:::\n\n# Now you {.inverse}\n\n[Task 1 (60 min)]{.highlight-blue}<br>\n\n[Transforming the penguin data set]{.big-text}\n\n**Find the task description [here](https://selinazitrone.github.io/intro-r-data-analysis/02_tasks_controller.html#dplyr)**\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}