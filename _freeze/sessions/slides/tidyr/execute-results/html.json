{
  "hash": "c1155ec222ded2583366b937a0d11fcc",
  "result": {
    "markdown": "---\ntitle: \"Tidy data with tidyr\"\nsubtitle: \"Day 3 - Introduction to Data Analysis with R\"\nauthor: \"Selina Baldauf\"\ninstitute: \"Freie Universität Berlin - Theoretical Ecology\"\ndate: today\ndate-format: long\nformat: \n  revealjs:\n    footer: \"Selina Baldauf // Tidy data with tidyr\"\n    highlight-style: breeze\n    mainfont: Cabinet Grotesk\n    slide-number: true\n    show-slide-number: all\n    incremental: true\n    self-contained: true\n    code-line-numbers: false\n    auto-stretch: false\n    scrollable: true\n    theme: slides.scss\n    fig-align: center\nexecute: \n  echo: true\n  warning: false\n  message: false\n  cache: true\nknitr: \n  opts_chunk: \n    collapse: true\n    comment: \"#>\"\nfrom: markdown+emoji\n---\n\n\n\n\n# What is tidy data?{.inverse}\n\n## What is tidy data?\n\n![Illustration from the [Openscapes](https://www.openscapes.org/) blog [*Tidy Data for reproducibility, efficiency, and collaboration*](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst](img/AllisonHorst/tidydata_1.jpg){width=85%}\n\n## What is tidy data?\n\nLet's look at some examples\n\n:::{.columns}\n\n:::{.column width=\"40%\"}\n\n**Tidy**\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-1_4bf77d621f4f99b1a19946f51ed0b8c8'}\n::: {.cell-output-display}\n| id|name   |color  |\n|--:|:------|:------|\n|  1|floof  |gray   |\n|  2|max    |black  |\n|  3|cat    |orange |\n|  4|donut  |gray   |\n|  5|merlin |black  |\n|  6|panda  |calico |\n:::\n:::\n\n\n:::\n\n:::{.column width=\"60%\"}\n\n:::{.fragment}\n\n**Non-tidy**\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-2_1a31f4853166edc41d7585fc1f9bf45b'}\n::: {.cell-output-display}\n|floof |max   |cat    |donut |merlin |panda  |\n|:-----|:-----|:------|:-----|:------|:------|\n|gray  |black |orange |gray  |black  |calico |\n:::\n:::\n\n\n<br>\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-3_127bb0429b66e8d024ebd9eb53c97531'}\n::: {.cell-output-display}\n|gray  |black  |orange |calico |\n|:-----|:------|:------|:------|\n|floof |max    |cat    |panda  |\n|donut |merlin |       |       |\n:::\n:::\n\n\n:::\n\n:::\n\n:::\n\n. . .\n\n<br>\n\nSometimes ***raw data*** is non-tidy because its structure is optimized for data entry or viewing rather than analysis.\n\n## Why tidy data?\n\nThe main advantages of **tidy** data is that the `tidyverse` packages are built to work with it.\n\n\n![Illustration from the [Openscapes](https://www.openscapes.org/) blog [*Tidy Data for reproducibility, efficiency, and collaboration*](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst](img/AllisonHorst/tidydata_3.jpg){width=70%}\n\n## Example\n\nLet's go back to the city data set from earlier:\n\n\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-4_1622bc751d077fd76aa163e1193364f1'}\n\n:::\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-5_b0bb90eaefdacebbba67a17a9b08115b'}\n\n```{.r .cell-code}\ncities_tbl\n#> # A tibble: 10 × 4\n#>    city             population area_km2 country\n#>    <chr>                 <dbl>    <dbl> <chr>  \n#>  1 Istanbul           15100000     2576 Turkey \n#>  2 Moscow             12500000     2561 Russia \n#>  3 London              9000000     1572 UK     \n#>  4 Saint Petersburg    5400000     1439 Russia \n#>  5 Berlin              3800000      891 Germany\n#>  6 Madrid              3200000      604 Spain  \n#>  7 Kyiv                3000000      839 Ukraine\n#>  8 Rome                2800000     1285 Italy  \n#>  9 Bucharest           2200000      228 Romania\n#> 10 Paris               2100000      105 France\n```\n:::\n\n\n. . .\n\nThis already looks pretty tidy.\n\n## Same data different format\n\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-6_89a8e3776a57d9969673a38af7df1b74'}\n\n```{.r .cell-code}\ncities_untidy\n```\n:::\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-7_b65be9c45da05c1d85d1a206a14c59d5'}\n\n```\n#> # A tibble: 2 × 11\n#>   type       Turkey_Istanbul Russia_Moscow UK_London `Russia_Saint Petersburg`\n#>   <chr>                <dbl>         <dbl>     <dbl>                     <dbl>\n#> 1 population        15100000      12500000   9000000                   5400000\n#> 2 area_km2              2576          2561      1572                      1439\n#>   Germany_Berlin Spain_Madrid Ukraine_Kyiv Italy_Rome Romania_Bucharest\n#>            <dbl>        <dbl>        <dbl>      <dbl>             <dbl>\n#> 1        3800000      3200000      3000000    2800000           2200000\n#> 2            891          604          839       1285               228\n#> # ℹ 1 more variable: France_Paris <dbl>\n```\n:::\n\n\n**What's not tidy here?**\n\n. . .\n\n- Each row has multiple observation\n- At the same time, each observation is split across multiple rows\n- Country and city variable are split into multiple columns\n- Country and city variable values are united to one value\n\n. . .\n\nLet's tidy this data using functions from the `tidyr` package!\n\n## `pivot_longer()`\n\n**One variable split into multiple column**s can be solved with `pivot_longer`\n\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-8_87094160935f1d8f2f844a5ec07c329f'}\n\n```\n#> # A tibble: 2 × 11\n#>   type       Turkey_Istanbul Russia_Moscow UK_London `Russia_Saint Petersburg`\n#>   <chr>                <dbl>         <dbl>     <dbl>                     <dbl>\n#> 1 population        15100000      12500000   9000000                   5400000\n#> 2 area_km2              2576          2561      1572                      1439\n#>   Germany_Berlin Spain_Madrid Ukraine_Kyiv Italy_Rome Romania_Bucharest\n#>            <dbl>        <dbl>        <dbl>      <dbl>             <dbl>\n#> 1        3800000      3200000      3000000    2800000           2200000\n#> 2            891          604          839       1285               228\n#> # ℹ 1 more variable: France_Paris <dbl>\n```\n:::\n\n\n## `pivot_longer()`\n\n**One variable split into multiple column**s can be solved with `pivot_longer`\n\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-9_2d97787d02f22d4fa119ea488a0cd8b0'}\n\n```{.r .cell-code}\nstep1 <- pivot_longer(\n    cities_untidy,                         # the tibble\n    cols = Turkey_Istanbul:France_Paris,   # the columns to pivot from:to\n    names_to = \"location\",                 # name of the new column\n    values_to = \"value\")                   # name of the value column\n```\n:::\n\n\n. . .\n\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-10_0717f782d0bf503f2b24eed57eb77ea2'}\n\n```\n#> # A tibble: 20 × 3\n#>   type       location                   value\n#>   <chr>      <chr>                      <dbl>\n#> 1 population Turkey_Istanbul         15100000\n#> 2 population Russia_Moscow           12500000\n#> 3 population UK_London                9000000\n#> 4 population Russia_Saint Petersburg  5400000\n#> # ℹ 16 more rows\n```\n:::\n\n\n## `pivot_longer()`\n\n**One variable split into multiple column**s can be solved with `pivot_longer`\n\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-11_2aeffd1df955c9919728cef6fab2b05e'}\n\n```{.r .cell-code}\nstep1 <- pivot_longer(\n    cities_untidy,                         # the tibble\n    cols = Turkey_Istanbul:France_Paris,   # the columns to pivot from:to\n    names_to = \"location\",                 # name of the new column\n    values_to = \"value\")                   # name of the value column\n```\n:::\n\n\nAnother way to select the columns to pivot:\n\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-12_7ca92c58922370e1fd98d3232a0d3abd'}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nstep1 <- pivot_longer(\n    cities_untidy,           # the tibble\n    cols = !type,            # All columns except type#<<        \n    names_to = \"location\",   # name of the new column\n    values_to = \"value\")     # name of the value column\n```\n:::\n\n\n## `separate_wider_delim()`\n\n**Multiple variable values that are united into one** can be separated using `separate_wider_delim`\n\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-13_7e68381e511a30155ca1277df479cc91'}\n\n```\n#> # A tibble: 20 × 3\n#>   type       location           value\n#>   <chr>      <chr>              <dbl>\n#> 1 population Turkey_Istanbul 15100000\n#> 2 population Russia_Moscow   12500000\n#> # ℹ 18 more rows\n```\n:::\n\n\n. . .\n\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-14_4bf20969bb551008e86104712ef824b2'}\n\n```{.r .cell-code}\nstep2 <- separate_wider_delim(\n  step1,                        # the tibble\n  location,                     # the column to separate\n  delim = \"_\",                  # the separator\n  names = c(\"country\", \"city\")) # names of new columns\n```\n:::\n\n\n. . .\n\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-15_a2d609dc9cb2475c360abd3dbadbfa8c'}\n\n```\n#> # A tibble: 20 × 4\n#>   type       country city        value\n#>   <chr>      <chr>   <chr>       <dbl>\n#> 1 population Turkey  Istanbul 15100000\n#> 2 population Russia  Moscow   12500000\n#> # ℹ 18 more rows\n```\n:::\n\n\n. . .\n\nThe opposite function exists as well and is called `unite`. Check out `?unite` for details.\n\n## `pivot_wider()`\n\n**One observation split into multiple rows** can solved with `pivot_wider`\n\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-16_4a350d478f551c210fc3d36a0bd77d07'}\n\n```\n#> # A tibble: 20 × 4\n#>   type       country city        value\n#>   <chr>      <chr>   <chr>       <dbl>\n#> 1 population Turkey  Istanbul 15100000\n#> 2 population Russia  Moscow   12500000\n#> # ℹ 18 more rows\n```\n:::\n\n\n. . .\n\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-17_72d5540dbbf17866c27b05447f5f13af'}\n\n```{.r .cell-code}\nstep3 <- pivot_wider(\n  step2,                      # the tibble\n  names_from = type,          # the variables\n  values_from = value)        # the values\n```\n:::\n\n\n. . .\n\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-18_210a698aeeeb304af2aeb00be6b6634b'}\n\n```\n#> # A tibble: 10 × 4\n#>   country city             population area_km2\n#>   <chr>   <chr>                 <dbl>    <dbl>\n#> 1 Turkey  Istanbul           15100000     2576\n#> 2 Russia  Moscow             12500000     2561\n#> 3 UK      London              9000000     1572\n#> 4 Russia  Saint Petersburg    5400000     1439\n#> 5 Germany Berlin              3800000      891\n#> # ℹ 5 more rows\n```\n:::\n\n\n## All steps in 1\n\nWe can also use a pipe to do all these steps in one:\n\n\n::: {.cell hash='tidyr_cache/revealjs/unnamed-chunk-19_c56bda6a95f2bff41fb0c419c425806e'}\n\n```{.r .cell-code}\ncities_tidy <- cities_untidy |>\n  pivot_longer(Turkey_Istanbul:France_Paris,\n    names_to = \"location\",\n    values_to = \"values\"\n  ) |>\n  separate(location,\n    sep = \"_\",\n    into = c(\"country\", \"city\")\n  ) |>\n  pivot_wider(\n    names_from = type,\n    values_from = values\n  )\n```\n:::\n\n\n# Now you {.inverse}\n\n[Task (30 min)]{.highlight-blue}<br>\n\n[Tidy data with tidyr]{.big-text}\n\n**Find the task description [here](https://selinazitrone.github.io/intro-r-data-analysis/sessions/09_tidyr.html)**\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}