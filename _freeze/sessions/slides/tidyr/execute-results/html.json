{
  "hash": "4acf06000a14820a1f86ee671570e8d4",
  "result": {
    "markdown": "---\ntitle: \"Tidy data with tidyr\"\nsubtitle: \"Day 3 - Introduction to Data Analysis with R\"\nauthor: \"Selina Baldauf\"\ninstitute: \"Freie Universität Berlin - Theoretical Ecology\"\ndate: today\ndate-format: long\nformat: \n  revealjs:\n    footer: \"Selina Baldauf // Tidy data with tidyr\"\n    highlight-style: breeze\n    mainfont: Cabinet Grotesk\n    slide-number: true\n    show-slide-number: all\n    incremental: true\n    self-contained: true\n    code-line-numbers: true\n    auto-stretch: false\n    scrollable: true\n    theme: slides.scss\n    fig-align: center\nexecute: \n  echo: true\n  warning: false\n  message: false\n  cache: true\nfrom: markdown+emoji\ntitle-slide-attributes: \n  data-background-image: img/hex-stickers/tidyr.png\n  data-background-position: 90% 85%\n  data-background-size: \"20%\"\n---\n\n\n\n\n\n# What is tidy data?{.inverse}\n\n## What is tidy data?\n\n![Illustration from the [Openscapes](https://www.openscapes.org/) blog [*Tidy Data for reproducibility, efficiency, and collaboration*](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst](img/AllisonHorst/tidydata_1.jpg){width=85%}\n\n## What is tidy data?\n\nLet's look at some examples\n\n:::{.columns}\n\n:::{.column width=\"40%\"}\n\n**Tidy**\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-1_bfc166c26699179a429da5f785d3e8eb'}\n::: {.cell-output-display}\n| id|name   |color  |\n|--:|:------|:------|\n|  1|floof  |gray   |\n|  2|max    |black  |\n|  3|cat    |orange |\n|  4|donut  |gray   |\n|  5|merlin |black  |\n|  6|panda  |calico |\n:::\n:::\n\n\n\n:::\n\n:::{.column width=\"60%\"}\n\n:::{.fragment}\n\n**Non-tidy**\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-2_3bd2db1cce197de9daa97d77d27dea02'}\n::: {.cell-output-display}\n|floof |max   |cat    |donut |merlin |panda  |\n|:-----|:-----|:------|:-----|:------|:------|\n|gray  |black |orange |gray  |black  |calico |\n:::\n:::\n\n\n\n<br>\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-3_d3f947d26d8a843b4e1f39ef91b24055'}\n::: {.cell-output-display}\n|gray  |black  |orange |calico |\n|:-----|:------|:------|:------|\n|floof |max    |cat    |panda  |\n|donut |merlin |       |       |\n:::\n:::\n\n\n\n:::\n\n:::\n\n:::\n\n. . .\n\n<br>\n\nSometimes ***raw data*** is non-tidy because its structure is optimized for data entry or viewing rather than analysis.\n\n## Why tidy data?\n\nThe main advantages of **tidy** data is that the `tidyverse` packages are built to work with it.\n\n\n![Illustration from the [Openscapes](https://www.openscapes.org/) blog [*Tidy Data for reproducibility, efficiency, and collaboration*](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst](img/AllisonHorst/tidydata_3.jpg){width=70%}\n\n## Example\n\nLet's go back to the city data set from earlier:\n\n\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-4_86ae125bed6eac4d2458b8440ad0a6cf'}\n\n:::\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-5_f2f797c33de60e0a2c249b63a191c1d8'}\n\n```{.r .cell-code}\ncities_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 4\n   city             population area_km2 country\n   <chr>                 <dbl>    <dbl> <chr>  \n 1 Istanbul           15100000     2576 Turkey \n 2 Moscow             12500000     2561 Russia \n 3 London              9000000     1572 UK     \n 4 Saint Petersburg    5400000     1439 Russia \n 5 Berlin              3800000      891 Germany\n 6 Madrid              3200000      604 Spain  \n 7 Kyiv                3000000      839 Ukraine\n 8 Rome                2800000     1285 Italy  \n 9 Bucharest           2200000      228 Romania\n10 Paris               2100000      105 France \n```\n:::\n:::\n\n\n\n. . .\n\nThis already looks pretty tidy.\n\n## Same data different format\n\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-6_9e089762816650260678ea6fd8e7065d'}\n\n```{.r .cell-code}\ncities_untidy\n```\n:::\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-7_17061624ab5c5a05d19f26b3e741fa45'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 11\n  type       Turkey_Istanbul Russia_Moscow UK_London `Russia_Saint Petersburg`\n  <chr>                <dbl>         <dbl>     <dbl>                     <dbl>\n1 population        15100000      12500000   9000000                   5400000\n2 area_km2              2576          2561      1572                      1439\n  Germany_Berlin Spain_Madrid Ukraine_Kyiv Italy_Rome Romania_Bucharest\n           <dbl>        <dbl>        <dbl>      <dbl>             <dbl>\n1        3800000      3200000      3000000    2800000           2200000\n2            891          604          839       1285               228\n# ℹ 1 more variable: France_Paris <dbl>\n```\n:::\n:::\n\n\n\n**What's not tidy here?**\n\n. . .\n\n- Each row has multiple observation\n- At the same time, each observation is split across multiple rows\n- Country and city variable are split into multiple columns\n- Country and city variable values are united to one value\n\n. . .\n\nLet's tidy this data using functions from the `tidyr` package!\n\n## `pivot_longer()`\n\n**One variable split into multiple column**s can be solved with `pivot_longer`\n\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-8_bce334d35f853bbc5884c5d9a2696086'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 11\n  type       Turkey_Istanbul Russia_Moscow UK_London `Russia_Saint Petersburg`\n  <chr>                <dbl>         <dbl>     <dbl>                     <dbl>\n1 population        15100000      12500000   9000000                   5400000\n2 area_km2              2576          2561      1572                      1439\n  Germany_Berlin Spain_Madrid Ukraine_Kyiv Italy_Rome Romania_Bucharest\n           <dbl>        <dbl>        <dbl>      <dbl>             <dbl>\n1        3800000      3200000      3000000    2800000           2200000\n2            891          604          839       1285               228\n# ℹ 1 more variable: France_Paris <dbl>\n```\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-9_2f3946badeb43384859afaf3325d8dcb'}\n\n```{.r .cell-code}\nstep1 <- pivot_longer(\n    cities_untidy,                         # the tibble\n    cols = Turkey_Istanbul:France_Paris,   # the columns to pivot from:to\n    names_to = \"location\",                 # name of the new column\n    values_to = \"value\")                   # name of the value column\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-10_bcd3c2e5d5720847ffa4f06a56af37be'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 3\n  type       location                   value\n  <chr>      <chr>                      <dbl>\n1 population Turkey_Istanbul         15100000\n2 population Russia_Moscow           12500000\n3 population UK_London                9000000\n4 population Russia_Saint Petersburg  5400000\n# ℹ 16 more rows\n```\n:::\n:::\n\n\n\n## `pivot_longer()`\n\n**One variable split into multiple column**s can be solved with `pivot_longer`\n\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-11_0c366c7e0e5db1315181a6c51ec8ae48'}\n\n```{.r .cell-code}\nstep1 <- pivot_longer(\n    cities_untidy,                         # the tibble\n    cols = Turkey_Istanbul:France_Paris,   # the columns to pivot from:to\n    names_to = \"location\",                 # name of the new column\n    values_to = \"value\")                   # name of the value column\n```\n:::\n\n\n\nAnother way to select the columns to pivot:\n\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-12_3b06e148a61d831affa7ade6ea110b8d'}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nstep1 <- pivot_longer(\n    cities_untidy,           # the tibble\n    cols = !type,            # All columns except type#<<        \n    names_to = \"location\",   # name of the new column\n    values_to = \"value\")     # name of the value column\n```\n:::\n\n\n\n## `separate_wider_delim()`\n\n**Multiple variable values that are united into one** can be separated using `separate_wider_delim`\n\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-13_74ae44a80a0a70d37a03e2178d36dbdf'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 3\n  type       location           value\n  <chr>      <chr>              <dbl>\n1 population Turkey_Istanbul 15100000\n2 population Russia_Moscow   12500000\n# ℹ 18 more rows\n```\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-14_69c1ffdfc6a39d3d98e924efa30b1624'}\n\n```{.r .cell-code}\nstep2 <- separate_wider_delim(\n  step1,                        # the tibble\n  location,                     # the column to separate\n  delim = \"_\",                  # the separator\n  names = c(\"country\", \"city\")) # names of new columns\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-15_9cbfaba25ca6fa3bb956e77c26acd8d4'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 4\n  type       country city        value\n  <chr>      <chr>   <chr>       <dbl>\n1 population Turkey  Istanbul 15100000\n2 population Russia  Moscow   12500000\n# ℹ 18 more rows\n```\n:::\n:::\n\n\n\n. . .\n\nThe opposite function exists as well and is called `unite`. Check out `?unite` for details.\n\n## `pivot_wider()`\n\n**One observation split into multiple rows** can solved with `pivot_wider`\n\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-16_b0d462ba14cc8559f81b3d0c7d84f58f'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 4\n  type       country city        value\n  <chr>      <chr>   <chr>       <dbl>\n1 population Turkey  Istanbul 15100000\n2 population Russia  Moscow   12500000\n# ℹ 18 more rows\n```\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-17_b46b94df4950b75eab9139b943f937b5'}\n\n```{.r .cell-code}\nstep3 <- pivot_wider(\n  step2,                      # the tibble\n  names_from = type,          # the variables\n  values_from = value)        # the values\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-18_5c0fe3f87a6463251f03534cec9a4668'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 4\n  country city             population area_km2\n  <chr>   <chr>                 <dbl>    <dbl>\n1 Turkey  Istanbul           15100000     2576\n2 Russia  Moscow             12500000     2561\n3 UK      London              9000000     1572\n4 Russia  Saint Petersburg    5400000     1439\n5 Germany Berlin              3800000      891\n# ℹ 5 more rows\n```\n:::\n:::\n\n\n\n## All steps in 1\n\nWe can also use a pipe to do all these steps in one:\n\n\n\n::: {.cell hash='tidyr_cache/html/unnamed-chunk-19_8679f48975fb10460517a333fc6f2cf1'}\n\n```{.r .cell-code}\ncities_tidy <- cities_untidy |>\n  pivot_longer(Turkey_Istanbul:France_Paris,\n    names_to = \"location\",\n    values_to = \"values\"\n  ) |>\n  separate(location,\n    sep = \"_\",\n    into = c(\"country\", \"city\")\n  ) |>\n  pivot_wider(\n    names_from = type,\n    values_from = values\n  )\n```\n:::\n\n\n\n# Now you {.inverse}\n\n[Task 1 (30 min)]{.highlight-blue}<br>\n\n[Tidying data]{.big-text}\n\n**Find the task description [here](https://selinazitrone.github.io/intro-r-data-analysis/03_tasks_controller.html#tidyr)**\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}