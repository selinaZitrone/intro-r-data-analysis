{
  "hash": "55dd0f6d7d1448860d31244b419dd5be",
  "result": {
    "markdown": "---\ntitle: \"Import and Export Data with readr\"\nsubtitle: \"Day 1 - Introduction to Data Analysis with R\"\nauthor: \"Selina Baldauf\"\ninstitute: \"Freie Universität Berlin - Theoretical Ecology\"\ndate: today\ndate-format: long\nformat: \n  revealjs:\n    footer: \"Selina Baldauf // Import and export data\"\n    highlight-style: breeze\n    mainfont: Cabinet Grotesk\n    slide-number: true\n    show-slide-number: all\n    incremental: true\n    self-contained: true\n    code-line-numbers: false\n    auto-stretch: false\n    scrollable: true\n    fig-align: center\n    theme: slides.scss\nexecute: \n  echo: true\n  warning: false\n  message: false\nfrom: markdown+emoji\ntitle-slide-attributes: \n  data-background-image: img/hex-stickers/readr.png\n  data-background-position: 90% 85%\n  data-background-size: \"20%\"\n---\n\n\n\n# The tidyverse{.inverse}\n\n![](img/hex-stickers/tidyverse.png){style=\"float:right;padding: 0 0 0 10px;\" fig-alt=\"Tidyverse Hex Logo\" width=\"300\"}\n\n## The tidyverse\n\n> The tidyverse is an opinonated <b>collection of R packages</b> designed for data science. All packages share an underlying design philosophy, grammar, and data structures.<br>\n[([www.tidyverse.org](https://www.tidyverse.org/))]{.text-small}                                                                   \n\nThese are the main packages from the tidyverse that we will use:<br><br>\n\n:::{.r-stack}\n\n![](img/hex-stickers/tibble.png){width=15%}![](img/hex-stickers/readr.png){width=15%}![](img/hex-stickers/tidyr.png){width=15%}![](img/hex-stickers/ggplot2.png){width=15%}![](img/hex-stickers/dplyr.png){width=15%}\n\n:::\n\n## Workflow data analysis\n\n\n![](img/day1/datascience_workflow_tidyverse.png){fig-align=\"center\"}\n\n:::{.aside}\n\nImage adapted from Wickham & Grolemund: [R for Data Science](https://r4ds.had.co.nz/introduction.html)\n\n:::\n\n## The tidyverse\n\nInstall the tidyverse once with:\n\n\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-1_60bb28fc43a30ff1f1ab7f355614f2ba'}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\nThen load and attach the packages at the beginning of your script:\n\n\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-2_3c38709cb302738e07f50e21a47ec3e7'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n. . .\n\nYou can also install and load the tidyverse packages individually, but since we will use so many of them together, it's easier to load and attach them together.\n\n# Import and export data with readr{.inverse}\n\n![](img/hex-stickers/readr.png){style=\"float:right;padding: 0 0 0 10px;\" fig-alt=\"Tidyverse Hex Logo\" width=\"300\"}\n\n## Readr\n\n`readr` is a tidyverse package. To use it, you can load the tidyverse:\n\n\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-3_cbd2b9730d39d0899744149c11ee79e5'}\n\n```{.r .cell-code}\nlibrary(tidyverse) # or library(readr) \n```\n:::\n\n\n\n. . .\n\nThe most important functions are:\n\n- `read_csv`/`write_csv` to read/write **comma delimited** files\n\n- `read_tsv`/`write_tsv` to read/write **tab delimited** files\n\n- `read_delim`/`write_delim` to read/write files with **any delimiter**\n\n## Read files with `read_*()`\n\nAll `read_*` functions take a path to the data file as a first argument:\n\n:::{.r-stack}\n\n<code><b>read_*(file = [\"path/to/your/file\"]{.col-yellow}, ...)</b></code>\n\n:::\n\n. . .\n\nImport files with a `readr` function fitting the delimiter of your file:\n\n\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-4_b968ab9bbee7345832ab61647e52a50d'}\n\n```{.r .cell-code}\ndat <- read_csv(\"data/your_data.csv\") # comma delimiter\n\ndat <- read_tsv(\"data/your_data.txt\") # tab delimiter\n```\n:::\n\n\n\n. . .\n\nUse `read_delim` for a generic type of delimiter:\n\n\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-5_844d264fffe48f4a1fe672d1c93a17cd'}\n\n```{.r .cell-code}\ndat <- read_delim(\"data/your_data.txt\", delim = \"\\t\") # tab delimiter\n\ndat <- read_delim(\"data/your_data.txt\", delim = \"..xyz..\") # ..xyz.. delimiter\n```\n:::\n\n\n\n. . .\n\nAll `read_*` functions return a `tibble`\n\n## Read files with `read_*()`\n\nThe read functions provide several options to modify the reading of data.\n\nHave a look at `?read_delim` for all options. \n\n. . .\n\nUseful if your data is not a \"perfect table\"\n\n## Read files with `read_*()`\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\nSpecify number of lines to skip reading with `skip`\n\n- Useful if you have metadata on top of the file\n\n:::\n\n:::{.column width=\"50%\"}\n\n![](img/day1/meta_data_top.png)\n\n:::\n\n:::\n\n. . .\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n\n\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-6_923f3dd0c39149e4bf32a73f26e3e3e5'}\n\n```{.r .cell-code}\n# without skipping first lines\nread_csv(file = \"data/meta_data_top.csv\")\n```\n:::\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-7_12c4428cabc1b009e4f7512c47b61914'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 1\n  Metadata              \n  <chr>                 \n1 Date: June, 12, 1989  \n2 Author: Selina Baldauf\n3 Temperature, Rainfall \n4 1.5, 2                \n5 1, 0                  \n6 0.5, 0.6              \n```\n:::\n:::\n\n\n\n:::\n\n:::{.column width=\"50%\"}\n\n:::{.fragment}\n\n\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-8_47081b804ac90694267bff718aebf533'}\n\n```{.r .cell-code}\n# skip meta data lines\nread_csv(\n  file = \"data/meta_data_top.csv\",\n  skip = 4\n)\n```\n:::\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-9_c5485651a33eebe0305ed2e2bbfbd0c4'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  Temperature Rainfall\n        <dbl>    <dbl>\n1         1.5      2  \n2         1        0  \n3         0.5      0.6\n```\n:::\n:::\n\n\n\n:::\n\n:::\n\n:::\n\n## Read files with `read_*()`\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\nSpecify whether the data has a header column or not with `col_names`\n\n- Useful if you don't have column names or you want to change them\n\n:::\n\n:::{.column width=\"50%\"}\n\n![](img/day1/no_col_names.png)\n\n:::\n\n:::\n\n. . .\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-10_33360d5253ab4fa772d968a9601e9ab6'}\n\n```{.r .cell-code}\n# First line is expected to be column names\nread_csv(file = \"data/no_col_names.csv\")\n```\n:::\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-11_714ca40deedd23a7b17bc35d196a6d97'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  `1.5`   `2`\n  <dbl> <dbl>\n1   1     0  \n2   0.5   0.6\n```\n:::\n:::\n\n\n\n:::\n\n:::{.column width=\"50%\"}\n\n:::{.fragment}\n\n\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-12_cfdfbee219ed9d0d59b4be779676b22b'}\n\n```{.r .cell-code}\n# Default column names are given\nread_csv(\n  file = \"data/no_col_names.csv\",\n  col_names = FALSE\n)\n```\n:::\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-13_6214f79761a103a9b8e79a94aa12e789'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n     X1    X2\n  <dbl> <dbl>\n1   1.5   2  \n2   1     0  \n3   0.5   0.6\n```\n:::\n:::\n\n\n\n:::\n\n:::\n\n:::\n\n## Read files with `read_*()`\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\nSpecify whether the data has a header column or not with `col_names`\n\n- Useful if you don't have column names or you want to change them\n\n:::\n\n:::{.column width=\"50%\"}\n\n![](img/day1/no_col_names.png)\n\n:::\n\n:::\n\n. . .\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n\n\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-14_067a7082b4ba82dbd1b0b6adf3230e23'}\n\n```{.r .cell-code}\n# First line is expected to be column names\nread_csv(file = \"data/no_col_names.csv\")\n```\n:::\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-15_2e238659c2d3d9747191c76f4e02fcaa'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  `1.5`   `2`\n  <dbl> <dbl>\n1   1     0  \n2   0.5   0.6\n```\n:::\n:::\n\n\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-16_2a68b20937eeb80133574e339ea46d70'}\n\n```{.r .cell-code}\n# Specify custom column names\nread_csv(\n  file = \"data/no_col_names.csv\",\n  col_names = c(\"Temperature\", \"Rainfall\")\n)\n```\n:::\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-17_f2fef713e675fe47a858ed85e10c1390'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  Temperature Rainfall\n        <dbl>    <dbl>\n1         1.5      2  \n2         1        0  \n3         0.5      0.6\n```\n:::\n:::\n\n\n\n:::\n\n:::\n\n## Write files with `write_*()`\n\nEvery `read_*` has a corresponding `write_*` function to export data from R.\n\n. . .\n\nWrite data from R e.g.\n\n- To share transformed or summarized data\n\n- Summarize complex raw data and continue working with summarized data\n\n- ...\n\n## Write files with `write_*()`\n\nAll `write_*` functions take the data to write as the first and the file to write to as the second argument:\n\n:::{.r-stack}\n <code><b>write_\\*(x = [dat]{.col-green}, file = [\"path/to/save/file.\\*\"]{.col-yellow}, ...)</b></code>\n:::\n\n<br>\n. . .\n\n\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-18_07647d895f5df06a0d7d3d7b86c7c868'}\n\n```{.r .cell-code}\nwrite_csv(dat, file = \"data-clean/your_data.csv\") # comma delimiter\n\nwrite_tsv(dat, file = \"data-clean/your_data.txt\") # tab delimiter\n```\n:::\n\n\n\n. . .\n\nUse `write_delim` for a generic type of delimiter:\n\n\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-19_bdc8e467c9f385f703ed0c1463cba8f6'}\n\n```{.r .cell-code}\nwrite_delim(dat, file = \"data-clean/your_data.txt\", delim = \"\\t\") # tab delimiter\n\nwrite_delim(dat, file = \"data-clean/your_data.txt\", delim = \"..xyz..\") # ..xyz.. delimiter\n```\n:::\n\n\n\n# Import excel files{.inverse}\n\n![](img/hex-stickers/readxl.png){style=\"float:right;padding: 0 0 0 10px;\" fig-alt=\"readxl Hex Logo\" width=\"300\"}\n\n## Readxl\n\nThe `readxl` package is part of the tidyverse, but you need to load it explicitly\n\n\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-20_f957383b2f4804f0a783b17418f25e07'}\n\n```{.r .cell-code}\nlibrary(readxl)\n```\n:::\n\n\n\n. . .\n\nUse the `read_excel` function to read an excel file:\n\n\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-21_200d54e4fd5175dd39613b5144286535'}\n\n```{.r .cell-code}\ndat <- read_excel(path = \"data/your_data.xlsx\")\n```\n:::\n\n\n\n. . .\n\nBy default, this reads the first sheet. You can read other sheets with\n\n\n\n::: {.cell hash='readr_cache/html/unnamed-chunk-22_eb5c3a98a15c0d5a5a265fc821fcade6'}\n\n```{.r .cell-code}\ndat <- read_excel(path = \"data/your_data.xlsx\", sheet = \"sheetName\") # via sheet name\ndat <- read_excel(path = \"data/your_data.xlsx\", sheet = 2) # via sheet number\n```\n:::\n\n\n\n. . .\n\n- `read_excel` also has other functionality, like skipping rows etc.\n- Check out the [package documentation](https://readxl.tidyverse.org/index.html) for more functionality\n\n## Readxl\n\nA little warning:\n\n- Reading from a csv file is more reliable\n- Be careful with complicated excel sheets with formulas etc.\n- Always double check the data that you imported, e.g. by using the `summary` function and checking \nif the number of rows etc. is correct\n\n## Absolute vs. relative paths in R\n\n#### Absolute paths\n\n`C:/Users/Selina/folder1/folder2/data/file_to_read.csv`\n\n#### Relative paths\n\n`data/file_to_read.csv`\n\n- Relative paths are interpreted relative to the **working directory**\n- Check out where your working directory is with `getwd()`\n- In RStudio projects, the **working directory is always the project root**\n\n## Absolute vs. relative paths\n\nWorking with R and RStudio, the best way is to:\n\n- **Organize your work in an RStudio project**\n  - The project root is automatically the working directory\n  - All your files (also your data) are in one place\n- **Use paths relative to the project root**\n\n. . .\n\n#### Why?\n\n- No need to change the working directory\n- Portable paths: will also work on other machines that copied the project\n- Makes the code more readable\n- Less error prone\n\n# Guidelines for data sets in `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}{.inverse}\n\n## Data format\n\nFollow these guidelines to make data import to R easier and less frustrating\n\n- In general: prefer machine-readable file formats (`.csv`, `.txt` instead of `.xlsx`)\n\n. . .\n\nSave an Excel spreadsheet as csv\n\n1. `File -> Save As` and select comma separated from the drop down menu\n2. `File -> Export`\n\n![](img/day1/excel_export.png){width=40%}\n  \n## Data format\n\nFollow these guidelines to make data import to R easier and less frustrating\n\n:::{.nonincremental}\n- In general: prefer machine-readable file formats (`.csv`, `.txt` instead of `.xlsx`)\n:::\n\n- No white space in column headers\n  - Use a character as separator, e.g. `species_name` instead of `species name`\n  - If this is unpractical, have a look at the function `janitor::clean_names()` from the [`janitor` package](https://garthtarr.github.io/meatR/janitor.html)\n- Avoid special characters\n  - No ä, ö, ü, ß, é, ê, ...\n- Use `.` as a decimal separator (not `,`)\n\n## Paths\n\n- Avoid white space in paths\n  - `data-raw/my_data.csv` instead of `data raw/my_data.csv`\n- Avoid special characters in paths\n  - No ä, ö, ü, ß, é, ê, ...\n\n\n# Now you {.inverse}\n\n[Task 4 (20 min)]{.highlight-blue}<br>\n\n[Read and write data files]{.big-text}\n\n**Find the task description [here](https://selinazitrone.github.io/intro-r-data-analysis/01_tasks_controller.html#reading-and-writing-tibbles)**\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}