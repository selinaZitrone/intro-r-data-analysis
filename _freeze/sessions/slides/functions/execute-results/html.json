{
  "hash": "82722602669adf21534d92094000eb9b",
  "result": {
    "markdown": "---\ntitle: \"Functions in R\"\nsubtitle: \"Day 1 - Introduction to Data Analysis with R\"\nauthor: \"Selina Baldauf\"\ninstitute: \"Freie Universit√§t Berlin - Theoretical Ecology\"\ndate: today\ndate-format: long\nformat: \n  revealjs:\n    footer: \"Selina Baldauf // Functions in R\"\n    highlight-style: breeze\n    mainfont: Cabinet Grotesk\n    slide-number: true\n    show-slide-number: all\n    incremental: true\n    self-contained: true\n    code-line-numbers: false\n    auto-stretch: false\n    scrollable: true\n    fig-align: center\n    theme: slides.scss\nexecute: \n  echo: true\n  warning: false\n  message: false\nfrom: markdown+emoji\n---\n\n\n\n\n\n## Functions in R\n\nFunctions make multiple operations available under one command.\n\n. . .\n\n<br>\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n#### Functions:\n- Have a **name**\n- Have (0, 1, or any number of) **arguments as input**\n- They calculate something using the arguments\n- They have a **return value** (the output)\n- Can have **side effects** (like plotting)\n\n:::\n\n:::{.column width=\"50%\"}\n\n<br>\n![](img/day1/function_general.png)\n\n:::\n\n:::\n\n. . .\n\nGeneral structure of a function call: <b>[function_name]{.col-green} ( [argument]{.col-yellow} = [value]{.col-pink} )</b>\n\n## The mean function\n\n<b>[function_name]{.col-green} ( [argument]{.col-yellow} = [value]{.col-pink} )</b>\n\n<br>\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n<b>[mean]{.col-green} ( [x]{.col-yellow} = [c(1,5,6)]{.col-pink} )</b>\n\n\n\n\n::: {.cell hash='functions_cache/html/unnamed-chunk-1_098de6fadf1180490c41bfbf3f1340be'}\n\n```{.r .cell-code}\nmean(x = c(1,5,6)) # or short: mean(c(1,5,6))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n\n:::\n\n:::{.column width=\"50%\"}\n\n![](img/day1/function_mean.png)\n\n:::\n\n:::\n\n. . .\n\n:::{.nonincremental}\n\n- Arguments can also be variables\n- The output of a function can be stored in a variable\n\n:::\n\n\n\n::: {.cell hash='functions_cache/html/unnamed-chunk-2_eea89263fb9e10bb2424ec1a9d988a68'}\n\n```{.r .cell-code}\nvalues <- c(1,5,6)\nresult <- mean(x = values)\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n\n## The mean function\n\nBut what does the mean function do? What are the arguments that I can use?\n\n. . .\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z\"/></svg>`{=html} &nbsp; Call the function help using `?`\n\n\n\n::: {.cell hash='functions_cache/html/unnamed-chunk-3_d41cc8988d0e6618ecd44fc9fecdba84'}\n\n```{.r .cell-code}\n?mean\n```\n:::\n\n\n\n:::\n\n:::{.column width=\"50%\"}\n\n![](img/day1/mean_help_blank.png)\n\n:::\n\n:::\n\n## Function arguments\n\n- Arguments are the **input** to a function\n- Functions can provide **default values** for some arguments\n- Default values for arguments are indicated in the function help\n\n. . .\n\n![](img/day1/mean_help_default_arguments.png){fig-align=\"center\" width=75%}\n\n## Function arguments\n\nWhat happened here?&nbsp;&nbsp;\n<br>\n\n\n::: {.cell hash='functions_cache/html/unnamed-chunk-4_7e2752f626b7c78f85c8027a364f1b3c'}\n\n```{.r .cell-code}\n# NA is a missing value\nvalues <- c(1, 5, 6, NA)\nmean(x = values)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n\n. . .\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z\"/></svg>`{=html}&nbsp;  `na.rm` argument is `FALSE` by default.<br><br>\n\n. . .\n\nSet it to `TRUE` if you want to calculate the mean despite missing values:\n\n\n\n::: {.cell hash='functions_cache/html/unnamed-chunk-5_4592f7a18b3cdbba3408cae1d42283c1'}\n\n```{.r .cell-code}\nmean(x = values, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n\n. . .\n\n<br>\nArguments with default values are optional, arguments without default values are not!\n<br>\n\n\n::: {.cell hash='functions_cache/html/unnamed-chunk-6_40d9126ff152493fc314a6c8081d27e8'}\n\n```{.r .cell-code}\nmean()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in mean.default(): argument \"x\" is missing, with no default\n```\n:::\n:::\n\n\n\n## Function arguments\n\n**Argument matching** can be achieved by **position** or by **name**\n\n\n\n::: {.cell hash='functions_cache/html/unnamed-chunk-7_106697225cf4e6a3f6571edf406a217e'}\n\n```{.r .cell-code}\nmean(x, trim = 0, na.rm = FALSE, ...)\nvalues <- c(1, 5, 6, NA)\n```\n:::\n\n\n\n. . .\n\nThese calls to mean all are the same:\n\n\n\n::: {.cell hash='functions_cache/html/unnamed-chunk-8_5356f57ecc41102ef3d89a8713af234b'}\n\n```{.r .cell-code}\nmean(values, , TRUE) # by position\n```\n:::\n\n\n<br>\n\n. . .\n\n\n\n::: {.cell hash='functions_cache/html/unnamed-chunk-9_64fe7aa86dc4118ed97f0227d88dca16'}\n\n```{.r .cell-code}\nmean(x = values, na.rm = TRUE) # by name\n```\n:::\n\n\n<br>\n\n. . .\n\n\n\n::: {.cell hash='functions_cache/html/unnamed-chunk-10_c9ff1bd21862e00bc509a9e3aebe5cc7'}\n\n```{.r .cell-code}\nmean(na.rm = TRUE, x = values) # this also works but is not really nice\n```\n:::\n\n\n<br>\n\n. . .\n\n\n\n::: {.cell hash='functions_cache/html/unnamed-chunk-11_b521fe2776f25ade33bd8e7f2cebc1c5'}\n\n```{.r .cell-code}\nmean(values, na.rm = TRUE) # a mix of both\n```\n:::\n\n\n\n## Function arguments\n\n**Argument matching** can be achieved by **position** or by **name**\n\n::: {fragment}\n::: {.nonincremental}\n\nNamed arguments are (generally) preferred\n\n- Easier to remember\n- Easier to read\n- Some functions have a lot of arguments\n  \n:::\n  \n\n\n::: {.cell hash='functions_cache/html/unnamed-chunk-12_3b2406f6518c779025cbf3b52c2e1dca'}\n\n```{.r .cell-code}\nmean(x = values, na.rm = TRUE) # by name\n```\n:::\n\n\n\n:::\n\n::: {.fragment}\n\nHowever, it is common to match the first argument by position (especially when the first argument is the data)\n\n\n\n::: {.cell hash='functions_cache/html/unnamed-chunk-13_977084321c7265e903b1421c628c6677'}\n\n```{.r .cell-code}\nmean(values, na.rm = TRUE) # a mix of both\n```\n:::\n\n\n\n:::\n\n## Where do functions come from?\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n**Base R** functions: built into R\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n\n::: {.cell hash='functions_cache/html/unnamed-chunk-14_9a32b7911536ba7bad571de0fb2c017e'}\n\n```{.r .cell-code}\nmean() # calculate mean\nseq()  # generate a sequence of values\n[]     # This is also a (special) function\n```\n:::\n\n\n\n:::\n\n:::\n\n. . .\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\nFrom **additional packages**\n\n::: {.nonincremental}\n- Packages must be installed first\n- Call a function from a package using `packageName::functionName()`\n- Load the package with `library(packageName)` and then use the function\n:::\n\n:::\n\n:::{.column width=\"50%\"}\n\n<br>\n\n\n\n::: {.cell hash='functions_cache/html/unnamed-chunk-15_1da9347a8d62297608ac99cfc92630f4'}\n\n```{.r .cell-code}\n# use read_csv function from readr package\nreadr::read_csv()\n\n# or use library()\nlibrary(readr)\nread_csv()\n```\n:::\n\n\n\n:::\n\n:::\n\n. . .\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n**Custom** functions:\n\n:::{.nonincremental}\n\nWrite your own functions and then use them in the code\n\n:::\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n\n::: {.cell hash='functions_cache/html/unnamed-chunk-16_4f252dcc26149dbc45c3ccbb6a1412bf'}\n\n```{.r .cell-code}\n# custom function that prints input in a sentence\nmy_function <- function(x) {\n  return(x + 5)\n}\nmy_function(5)\n```\n:::\n\n\n\n:::\n\n:::\n\n\n# Summary{.inverse}\n\n> R basics - Functions\n\n## Summary\n\n:::{.nonincremental}\n\n- Functions take **input** in the form of (named) arguments, calculate something and **return** a result\n\n- Functions are called by their name, followed by parentheses:<br> `functionName(argument1 = value, argument2 = value, ...)`\n\n- Functions from additional packages can be called in two ways:\n\n  - `packageName::functionName()`\n  - first load the package with `library(packageName)` then call the function \n  anywhere in the script with `functionName()`\n\n- Call `?functionName` to open the help of a function\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}