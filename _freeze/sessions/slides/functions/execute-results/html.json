{
  "hash": "eafad208292ad8cacb87de10cd882a86",
  "result": {
    "markdown": "---\ntitle: \"Functions in R\"\nsubtitle: \"Day 1 - Introduction to Data Analysis with R\"\nauthor: \"Selina Baldauf\"\ninstitute: \"Freie UniversitÃ¤t Berlin - Theoretical Ecology\"\ndate: today\ndate-format: long\nformat: \n  revealjs:\n    footer: \"Selina Baldauf // Functions in R\"\n    highlight-style: breeze\n    mainfont: Cabinet Grotesk\n    slide-number: true\n    show-slide-number: all\n    incremental: true\n    self-contained: true\n    code-line-numbers: false\n    auto-stretch: false\n    scrollable: false\n    fig-align: center\n    theme: slides.scss\nexecute: \n  echo: true\n  warning: false\n  message: false\nknitr: \n  opts_chunk: \n    collapse: true\n    comment: \"#>\" \nfrom: markdown+emoji\n---\n\n\n\n\n## Functions in R\n\nFunctions make multiple operations available under one command.\n\n. . .\n\n<br>\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n#### Functions:\n- Have a **name**\n- Have (0, 1, or any number of) **arguments as input**\n- They calculate something using the arguments\n- They have a **return value** (the output)\n- Can have **side effects** (like plotting)\n\n:::\n\n:::{.column width=\"50%\"}\n\n<br>\n![](img/day1/function_general.png)\n\n![](img/day1/function_mean.png)\n\n:::\n\n:::\n\n. . .\n\nGeneral structure of a function call: <b>[function_name]{.col-green} ( [argument]{.col-yellow} = [value]{.col-pink} )</b>\n\n## The mean function\n\n<b>[function_name]{.col-green} ( [argument]{.col-yellow} = [value]{.col-pink} )</b>\n\n<br>\n\n<b>[mean]{.col-green} ( [x]{.col-yellow} = [c(1,5,6)]{.col-pink} )</b>\n\n\n\n::: {.cell hash='functions_cache/revealjs/unnamed-chunk-1_598450c398e9d178263c2cb0a0e9efa1'}\n\n```{.r .cell-code}\nmean(x = c(1,5,6)) # or short: mean(c(1,5,6))\n#> [1] 4\n```\n:::\n\n\n. . .\n\n:::{.nonincremental}\n\n- Arguments can also be variables\n- The output of a function can be stored in a variable\n\n:::\n\n\n::: {.cell hash='functions_cache/revealjs/unnamed-chunk-2_ecdc6bdc974ac7005a98e20d9e2d12ae'}\n\n```{.r .cell-code}\nvalues <- c(1,5,6)\nresult <- mean(x = values)\nresult\n#> [1] 4\n```\n:::\n\n\n## The mean function\n\nBut what does the mean function do? What are the arguments that I can use?\n\n. . .\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z\"/></svg>`{=html} &nbsp; Call the function help using `?`\n\n\n::: {.cell hash='functions_cache/revealjs/unnamed-chunk-3_14e5d8e42102ebc0ab554547f28394fc'}\n\n```{.r .cell-code}\n?mean\n```\n:::\n\n\n:::\n\n:::{.column width=\"50%\"}\n\n![](img/day1/mean_help_blank.png)\n\n:::\n\n:::\n\n## Function arguments\n\n- Arguments are the **input** to a function\n- Functions can provide **default values** for some arguments\n- Default values for arguments are indicated in the function help\n\n. . .\n\n![](img/day1/mean_help_default_arguments.png){fig-align=\"center\" width=75%}\n\n## Function arguments\n\nWhat happened here?&nbsp;&nbsp;\n<br>\n\n::: {.cell hash='functions_cache/revealjs/unnamed-chunk-4_fba2ebcfc1bb8fc33949947275ca8ff0'}\n\n```{.r .cell-code}\n# NA is a missing value\nvalues <- c(1, 5, 6, NA)\nmean(x = values)\n#> [1] NA\n```\n:::\n\n\n. . .\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z\"/></svg>`{=html}&nbsp;  `na.rm` argument is `FALSE` by default.<br><br>\n\n. . .\n\nSet it to `TRUE` if you want to calculate the mean despite missing values:\n\n\n::: {.cell hash='functions_cache/revealjs/unnamed-chunk-5_8220fd925fa8f7e49678d318b7c800fe'}\n\n```{.r .cell-code}\nmean(x = values, na.rm = TRUE)\n#> [1] 4\n```\n:::\n\n\n. . .\n\n<br>\nArguments with default values are optional, arguments without default values are not!\n<br>\n\n::: {.cell hash='functions_cache/revealjs/unnamed-chunk-6_cd1d7766330fc2d85764aff6e5637d57'}\n\n```{.r .cell-code}\nmean()\n#> Error in mean.default(): argument \"x\" is missing, with no default\n```\n:::\n\n\n## Function arguments\n\n**Argument matching** can be achieved by **position** or by **name**\n\n\n::: {.cell hash='functions_cache/revealjs/unnamed-chunk-7_e694a9f96f362d087c22a060590144cd'}\n\n```{.r .cell-code}\nmean(x, trim = 0, na.rm = FALSE, ...)\nvalues <- c(1, 5, 6, NA)\n```\n:::\n\n\n. . .\n\nThese calls to mean all are the same:\n\n\n::: {.cell hash='functions_cache/revealjs/unnamed-chunk-8_86cb98472b8de5c4012dfcb26736bd6a'}\n\n```{.r .cell-code}\nmean(values, , TRUE) # by position\nmean(x = values, na.rm = TRUE) # by name\nmean(values, na.rm = TRUE) # a mix of both\n```\n:::\n\n\n## Function arguments\n\n**Argument matching** can be achieved by **position** or by **name**\n\n::: {fragment}\n\n::: {.nonincremental}\n\nNamed arguments are (generally) preferred\n\n- Easier to remember\n- Easier to read\n- Some functions have a lot of arguments\n  \n:::\n  \n\n::: {.cell hash='functions_cache/revealjs/unnamed-chunk-9_0c7ad8c9c514d0850cc9cb5598d7aa2d'}\n\n```{.r .cell-code}\nmean(x = values, na.rm = TRUE) # by name\n```\n:::\n\n\n:::\n\n::: {.fragment}\n\nHowever, it is common to match the first argument by position (especially when the first argument is the data)\n\n\n::: {.cell hash='functions_cache/revealjs/unnamed-chunk-10_01fd52ddf65cc25ea393d1d26cc2725d'}\n\n```{.r .cell-code}\nmean(values, na.rm = TRUE) # a mix of both\n```\n:::\n\n\n:::\n\n## Where do functions come from?\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n**Base R** functions: built into R\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n::: {.cell hash='functions_cache/revealjs/unnamed-chunk-11_2759cb94d0d20512a20e57598e3d8560'}\n\n```{.r .cell-code}\nmean() # calculate mean\nseq()  # generate a sequence of values\n```\n:::\n\n\n:::\n\n:::\n\n. . .\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\nFrom **additional packages**\n\n::: {.nonincremental}\n- Packages must be installed first\n- Call a function from a package using `packageName::functionName()`\n- Load the package with `library(packageName)` and then use the function\n:::\n\n:::\n\n:::{.column width=\"50%\"}\n\n<br>\n\n\n::: {.cell hash='functions_cache/revealjs/unnamed-chunk-12_812773a2684dbe2ba4f3d2c62fbd7a55'}\n\n```{.r .cell-code}\n# use read_csv function from readr package\nreadr::read_csv()\n\n# or use library()\nlibrary(readr)\nread_csv()\n```\n:::\n\n\n:::\n\n:::\n\n. . .\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n**Custom functions:**\n\n:::{.nonincremental}\n\nWrite your own functions and then use them in the code\n\n:::\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n::: {.cell hash='functions_cache/revealjs/unnamed-chunk-13_ccab65f6e1444020b8204e09b266ac44'}\n\n```{.r .cell-code}\n# custom function that prints input in a sentence\nmy_function <- function(x) {\n  return(x + 5)\n}\nmy_function(5)\n```\n:::\n\n\n:::\n\n:::\n\n\n# Summary{.inverse}\n\n> R basics - Functions\n\n## Summary\n\n:::{.nonincremental}\n\n- Functions take **input** in the form of (named) arguments, calculate something and **return** a result\n\n- Functions are called by their name, followed by parentheses:<br> `functionName(argument1 = value, argument2 = value, ...)`\n\n- Functions from additional packages can be called in two ways:\n\n  - `packageName::functionName()`\n  - first load the package with `library(packageName)` then call the function \n  anywhere in the script with `functionName()`\n\n- Call `?functionName` to open the help of a function\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}