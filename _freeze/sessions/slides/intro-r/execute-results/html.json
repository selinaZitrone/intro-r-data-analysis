{
  "hash": "3f7715b0f751c445431bca556f3e79a1",
  "result": {
    "markdown": "---\ntitle: \"Introduction to R\"\nsubtitle: \"Day 1 - Introduction to Data Analysis with R\"\nauthor: \"Selina Baldauf\"\ninstitute: \"Freie UniversitÃ¤t Berlin - Theoretical Ecology\"\ndate: today\ndate-format: long\nformat: \n  revealjs:\n    footer: \"Selina Baldauf // Introduction R\"\n    highlight-style: breeze\n    mainfont: Cabinet Grotesk\n    slide-number: true\n    show-slide-number: all\n    incremental: true\n    self-contained: true\n    code-line-numbers: false\n    auto-stretch: false\n    scrollable: true\n    fig-align: center\n    theme: slides.scss\nexecute: \n  echo: true\n  warning: false\n  message: false\nknitr: \n  opts_chunk: \n    collapse: true\n    comment: \"#>\" \nfrom: markdown+emoji\n---\n\n\n\n\n\n## R as a calculator\n\n### Arithmetic operators\n\n<br>\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n<table style='width:100%;font-size:16pt'>\n  <tr>\n    <td><b>Addition</b></td>\n    <td><code>+</code></td>\n  </tr>\n  <tr>\n    <td><b>Subtraction</b></td>\n    <td><code>-</code></td>\n  </tr>\n  <tr>\n    <td><b>Multiplication</b></td>\n    <td><code>*</code></td>\n  </tr>\n    <tr>\n    <td><b>Division</b></td>\n    <td><code>/</code></td>\n  </tr>\n  <tr>\n    <td><b>Modulo</b></td>\n    <td><code>%%</code></td>\n  </tr>\n  <tr>\n    <td><b>Power</b></td>\n    <td><code>^</code></td>\n  </tr>\n</table>\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n\n::: {.cell hash='intro-r_cache/html/arithmetic operators_a628d94fa6852e28107e30b00bcbd2fc'}\n\n```{.r .cell-code}\n# Addition\n2 + 2\n# Subtraction\n5.432 - 34234\n# Multiplication\n33 * 42\n# Division\n3 / 42\n# Modulo (Remainder)\n2 %% 2\n# Power\n2^2\n# Combine operations\n((2 + 2) * 5)^(10 %% 10)\n```\n:::\n\n\n\n:::\n\n:::\n\n## R as a calculator\n\n### Relational operators\n\n<br>\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n\n  <table style='width:100%;font-size:16pt'>\n  <tr>\n    <td><b>Equal to</b></td>\n    <td><code>==</code></td>\n  </tr>\n    <tr>\n    <td><b>Not equal to</b></td>\n    <td><code>!=</code></td>\n  </tr>\n  <tr>\n    <td><b>Less than</b></td>\n    <td><code><</code></td>\n  </tr>\n  <tr>\n    <td><b>Greater than</b></td>\n    <td><code>></code></td>\n  </tr>\n  <tr>\n    <td><b>Less or equal than</b></td>\n    <td><code><=</code></td>\n  </tr>\n  <tr>\n    <td><b>Greater or equal than</b></td>\n    <td><code>>=</code></td>\n  </tr>\n</table>\n\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n\n::: {.cell hash='intro-r_cache/html/relational operators_ee8abec740a390b6f38c1bbb7c629731'}\n\n```{.r .cell-code}\n2 == 2\n#> [1] TRUE\n2 != 2\n#> [1] FALSE\n33 <= 32\n#> [1] FALSE\n20 < 20\n#> [1] FALSE\n```\n:::\n\n\n\n:::\n\n:::\n\n##  R as a calculator\n\n### Logical operators\n\n<br>\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n\n  <table style='width:100%;font-size:16pt'>\n  <tr>\n    <td><b>Not</b></td>\n    <td><code>!</code></td>\n    </td>\n  </tr>\n    <tr>\n    <td><b></b></td>\n    <td><code></code></td>\n    </td>\n  </tr>\n    <tr>\n    <td><b></b></td>\n    <td><code></code></td>\n    </td>\n  </tr>\n</table>\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n\n::: {.cell hash='intro-r_cache/html/logical operators_0e049ccaebf3c54df6d7b3fe3771390a'}\n\n```{.r .cell-code}\n!TRUE\n#> [1] FALSE\n!(3 < 1)\n#> [1] TRUE\n```\n:::\n\n\n\n:::\n\n:::\n\n##  R as a calculator\n\n### Logical operators\n\n<br>\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n  <table style='width:100%;font-size:16pt'>\n  <tr>\n    <td><b>Not</b></td>\n    <td><code>!</code></td>\n    </td>\n  </tr>\n    <tr>\n    <td><b>And</b></td>\n    <td><code>&</code></td>\n    </td>\n  </tr>\n    <tr>\n    <td><b></b></td>\n    <td><code></code></td>\n    </td>\n  </tr>\n</table>\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n\n::: {.cell hash='intro-r_cache/html/logical operators 2_235a2726ec251ffcfb336f81646cd133'}\n\n```{.r .cell-code}\n(3 < 1) & (3 == 3) # FALSE & TRUE = FALSE\n#> [1] FALSE\n(1 < 3) & (3 == 3) # TRUE & TRUE = TRUE\n#> [1] TRUE\n(3 < 1) & (3 != 3) # FALSE & FALSE = FALSE\n#> [1] FALSE\n```\n:::\n\n\n\n:::\n\n:::\n\n##  R as a calculator\n\n### Logical operators\n\n<br>\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n<table style='width:100%;font-size:16pt'>\n  <tr>\n    <td><b>Not</b></td>\n    <td><code>!</code></td>\n    </td>\n  </tr>\n    <tr>\n    <td><b>And</b></td>\n    <td><code>&</code></td>\n    </td>\n  </tr>\n    <tr>\n    <td><b>Or</b></td>\n    <td><code>|</code></td>\n    </td>\n  </tr>\n</table>\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n\n::: {.cell hash='intro-r_cache/html/logical operators 3_f972c39375d8425ac7f01cd41586a333'}\n\n```{.r .cell-code}\n(3 < 1) | (3 == 3) # FALSE | TRUE = TRUE\n#> [1] TRUE\n(1 < 3) | (3 == 3) # TRUE | TRUE = TRUE\n#> [1] TRUE\n(3 < 1) | (3 != 3) # FALSE | FALSE = FALSE\n#> [1] FALSE\n```\n:::\n\n\n\n:::\n\n:::\n\n## Basic R Syntax\n\n- Whitespace does not matter\n\n. . .\n  \n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-1_e14b3559c79cd2a4f4a7e21e6ffe54b7'}\n\n```{.r .cell-code}\n# this\ndata<-read_csv(\"data/my-data.csv\")\n\n# is the same as this\n\ndata <- \n  read_csv(    \"data/my-data.csv\"   )\n\n```\n:::\n\n\n\n- There are good practice rules however -> More on that later\n\n- RStudio will (often) tell you if something is incorrect\n  - Find ![](img/day1/red_x.png) on the side of your script\n\n## Comments in R\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-2_fbf950fd544d4ed6c0b41386a533ba73'}\n\n```{.r .cell-code}\n# Reading and cleaning the data -----------------\n\ndata <- read_csv(\"data/my-data.csv\")\n# clean all column headers \n# (found on https://stackoverflow.com/questions/68177507/)\ndata <- janitor::clean_names(data)\n\n# Analysis --------------------------------------\n```\n:::\n\n\n\n- Everything that follows a `#` is a comment\n- Comments are not evaluated\n- Notes that make code more readable or add information\n\n::: {.fragment}\n\n::: {.nonincremental}\n\n- Comments can be used for\n  - Explanation of code (if necessary)\n  - Include links, names of authors, ...\n  - Mark different sections of your code (`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 384 512\" style=\"height:1em;width:0.75em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M297.2 248.9C311.6 228.3 320 203.2 320 176c0-70.7-57.3-128-128-128S64 105.3 64 176c0 27.2 8.4 52.3 22.8 72.9c3.7 5.3 8.1 11.3 12.8 17.7l0 0c12.9 17.7 28.3 38.9 39.8 59.8c10.4 19 15.7 38.8 18.3 57.5H109c-2.2-12-5.9-23.7-11.8-34.5c-9.9-18-22.2-34.9-34.5-51.8l0 0 0 0c-5.2-7.1-10.4-14.2-15.4-21.4C27.6 247.9 16 213.3 16 176C16 78.8 94.8 0 192 0s176 78.8 176 176c0 37.3-11.6 71.9-31.4 100.3c-5 7.2-10.2 14.3-15.4 21.4l0 0 0 0c-12.3 16.8-24.6 33.7-34.5 51.8c-5.9 10.8-9.6 22.5-11.8 34.5H226.4c2.6-18.7 7.9-38.6 18.3-57.5c11.5-20.9 26.9-42.1 39.8-59.8l0 0 0 0 0 0c4.7-6.4 9-12.4 12.7-17.7zM192 128c-26.5 0-48 21.5-48 48c0 8.8-7.2 16-16 16s-16-7.2-16-16c0-44.2 35.8-80 80-80c8.8 0 16 7.2 16 16s-7.2 16-16 16zm0 384c-44.2 0-80-35.8-80-80V416H272v16c0 44.2-35.8 80-80 80z\"/></svg>`{=html} try `Ctrl/Cmd + Shift + R`)\n\n:::\n\n:::\n\n# Objects and data types in `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}{.inverse}\n\n\n## Variables\n\n- Store values under meaningful names **to reuse** them\n- A variable has a [name]{.highlight-grn} and [value]{.highlight-ylw} and is created using the [assignment operator]{.highlight-pink}\n\n. . .\n\n:::{.r-stack}\n\n<b>[[radius]{.col-green} &nbsp; [<-]{.col-pink} &nbsp; [5]{.col-yellow}]{.text-big}</b>\n\n:::\n\n. . .\n\n- Variables are available in the global environment\n- R is case sensitive: **r**adius != **R**adius\n- Variables can hold any R objects, e.g. numbers, tables with data, ...\n- Choose meaningful variable names\n  - Make your code easier to read\n\n## Variables\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-3_67ab6249e0c1b8eca695ef5ef21dc477'}\n\n```{.r .cell-code}\n# create a variable\nradius <- 5\n# use it in a calculation and save the result\n# pi is a built-in variable that comes with R\ncircumference <- 2 * pi * radius\n# change value of variable radius\nradius <- radius + 1\n```\n:::\n\n\n\n<br>\n\n. . .\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-4_64a2704b0e58cd39a3e9709ab5040df7'}\n\n```{.r .cell-code}\n# just use the name to print the value to the console\nradius \n```\n:::\n\n\n\n## Atomic data types\n\nThere are 6 so-called **atomic data types** in R. The 4 most important are:\n\n. . .\n\n**Numeric**: There are two numeric data types: \n\n- **Double:** can be specified in decimal (`1.243` or `-0.2134`), scientific notation (`2.32e4`) or hexadecimal (`0xd3f1`)\n\n- **Integer:** numbers that are not represented by fraction. Must be followed by an `L` (`1L`, `2038459L`, `-5L`)\n\n. . .\n\n**Logical:** only two possible values `TRUE` and `FALSE` (abbreviation: `T` or `F` - but better use non-abbreviated form)\n\n. . .\n\n**Character:** also called string. Sequence of characters surrounded by quotes (`\"hello\"` , `\"sample_1\"`)\n\n## Vectors\n\nVectors are data structures that are built on top of atomic data types.<br>\n\nImagine a vector as a **collection of values** that are all **of the same data type**.\n<br>\n<br>\n\n![Image from [Advanced R book](https://adv-r.hadley.nz/vectors-chap.html#atomic-vectors)](img/day1/vector_data_type.png){fig-align=\"center\"}\n\n## Creating vectors\n\nUse the function `c()` to *combine* values into a vector\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-5_b729c5436b651c2de8c268cccf4343a0'}\n\n```{.r .cell-code}\nlgl_var <- c(TRUE, TRUE, FALSE)\ndbl_var <- c(2.5, 3.4, 4.3)\nint_var <- c(1L, 45L, 234L)\nchr_var <- c(\"These are\", \"just\", \"some strings\")\n```\n:::\n\n\n\n. . .\n\nThe `:` operator creates a sequence between two numbers with an increment of (-)1\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-6_194d76b02568a7cfe19a9cb5fdb60642'}\n\n```{.r .cell-code}\n1:10 # instead of c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n\n\n. . .\n\nThere are many more options to create vectors\n\n- `seq()` to create a sequence of numbers\n- `rep()` ro repeat values\n- ...\n\n## Creating vectors: `c()` {.hidden}\n\nBe aware of implicit **type conversion** when combining vectors of different types\n\n<br>\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-7_284f0e93e2d8a54aeed54e463bc80366'}\n\n```{.r .cell-code}\n# integer + logical -> integer (same with double + logical)\nc(int_var, lgl_var)\n#> [1]   1  45 234   1   1   0\n\n# integer + character -> character (same with double + character)\nc(int_var, chr_var)\n#> [1] \"1\"            \"45\"           \"234\"          \"These are\"    \"just\"        \n#> [6] \"some strings\"\n\n# logical + character -> character\nc(lgl_var, chr_var)\n#> [1] \"TRUE\"         \"TRUE\"         \"FALSE\"        \"These are\"    \"just\"        \n#> [6] \"some strings\"\n```\n:::\n\n\n\n. . .\n\n## Creating vectors: `:` and `seq()` {visibility=\"hidden\"}\n\nThe `:` operator creates a sequence between two numbers with an increment of (-)1\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-8_3adc4b417d30af36422e1ea3f0c1c0b8'}\n\n```{.r .cell-code}\n1:10 # instead of c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n\n\n. . .\n\nThe `seq()` function creates a sequence of values\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-9_23a770d68acd87e47f09853b7f23b356'}\n\n```{.r .cell-code}\nseq(from = 1, to = 10, by = 1) # specify increment of sequence with by\n#>  [1]  1  2  3  4  5  6  7  8  9 10\nseq(from = 1, to = 10, length.out = 20) # specify desired length with length.out\n#>  [1]  1.000000  1.473684  1.947368  2.421053  2.894737  3.368421  3.842105\n#>  [8]  4.315789  4.789474  5.263158  5.736842  6.210526  6.684211  7.157895\n#> [15]  7.631579  8.105263  8.578947  9.052632  9.526316 10.000000\n```\n:::\n\n\n\n## Creating vectors: `rep()` {visibility=\"hidden\"}\n\nRepeat values multiple times with `rep()`\n\n<br>\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-10_015fc3d60c8de371d459caf3740358bf'}\n\n```{.r .cell-code}\nrep(\"hello\", times = 5)\n#> [1] \"hello\" \"hello\" \"hello\" \"hello\" \"hello\"\n```\n:::\n\n\n\n# Working with vectors {.inverse}\n\n## Working with vectors\n\nLet's create some vectors to work with.\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-11_cd98c1ba448988be2bb016319fe46d11'}\n\n```{.r .cell-code}\n# list of 10 biggest cities in Europe\ncities <- c(\"Istanbul\", \"Moscow\", \"London\", \"Saint Petersburg\", \"Berlin\", \n            \"Madrid\", \"Kyiv\", \"Rome\", \"Bucharest\", \"Paris\")\n\npopulation <- c(15.1e6, 12.5e6, 9e6, 5.4e6, 3.8e6, 3.2e6, 3e6, 2.8e6, 2.2e6, 2.1e6)\n\narea_km2 <- c(2576, 2561, 1572, 1439,891,604, 839, 1285, 228, 105 )\n```\n:::\n\n\n\n. . .\n\n<br>\nWe can check the length of a vector using the `length()` function:\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-12_f8488ddf2a9e955804132f8b8992f141'}\n\n```{.r .cell-code}\nlength(cities)\n#> [1] 10\n```\n:::\n\n\n\n::: {.aside}\n\nData from [Wikipedia](https://en.wikipedia.org/wiki/List_of_European_cities_by_population_within_city_limits)\n\n:::\n\n## Working with vectors\n\nDivide population and area vector to calculate population density in each city:\n<br>\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-13_f30d54c718246eb9b269b5aee69c6bbd'}\n\n```{.r .cell-code}\npopulation / area_km2\n#>  [1]  5861.801  4880.906  5725.191  3752.606  4264.871  5298.013  3575.685\n#>  [8]  2178.988  9649.123 20000.000\n```\n:::\n\n\n\n. . .\n\nThe operation is performed **separately for each element of the two vectors** and the result is a vector.<br>\n\n. . .\n\nSame, if a **vector is divided by vector of length 1** (i.e. a single number). Result is always a vector.\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-14_fb8fc8ddb0d4b251cc0a6a198bcd242b'}\n\n```{.r .cell-code}\nmean_population <- mean(population) # calculate the mean of population vector\nmean_population\n#> [1] 5910000\npopulation / mean_population # divide population vector by the mean\n#>  [1] 2.5549915 2.1150592 1.5228426 0.9137056 0.6429780 0.5414552 0.5076142\n#>  [8] 0.4737733 0.3722504 0.3553299\n```\n:::\n\n\n\n## Working with vectors\n\nWe can also work with relational and logical operators\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-15_fb37538ed49b575e2b1f7df32d5ffc7b'}\n\n```{.r .cell-code}\npopulation > mean_population\n#>  [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n\n\n\n. . .\n\nThe result is a vector containing `TRUE` and `FALSE`, depending on whether the city's population is larger than the mean population or not.\n\n. . .\n\n<br>\nLogical and relational operators can be combined\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-16_93411310471f782ffe582fae44b82ea7'}\n\n```{.r .cell-code}\n# population larger than mean population OR population larger than 3 million\npopulation > mean_population | population > 3e6\n#>  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n```\n:::\n\n\n\n## Working with vectors\n\nCheck whether elements occur in a vector:\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-17_aad42239dbe7623beee42c7e62fbdbbd'}\n\n```{.r .cell-code}\ncities == \"Istanbul\"\n#>  [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n\n\n\n. . .\n\n<br>\n\nThe `%in%` operator checks whether *multiple* elements occur in a vector.\n\n\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-18_6f022e0b6a374e6c199ca461f0abcb65'}\n\n```{.r .cell-code}\n# for each element of cities, checks whether that element is contained in to_check \nto_check <- c(\"Istanbul\", \"Berlin\", \"Madrid\")\ncities %in% to_check # same as cities %in% c(\"Istanbul\", \"Berlin\", \"Madrid\")\n#>  [1]  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE\n```\n:::\n\n\n\n. . .\n\n<br>\n\n`%in%` always returns a vector of the same length as the vector on the left side\n\n. . .\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-19_963d1d6f8d06d85a48e13f4126ffb6ae'}\n\n```{.r .cell-code}\n# for each element of to_check, check whether that element is contained in cities \nto_check %in% cities\n#> [1] TRUE TRUE TRUE\n```\n:::\n\n\n\n## Indexing vectors\n\nYou can use square brackets `[]` to access specific elements from a vector.\n\nThe basic structure is:\n\n:::{.r-stack}\n\n<b>vector [ vector of indexes to select ]</b>\n\n:::\n\n<br>\n\n. . .\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-20_a99d3b867f40a9774032de1d992785eb'}\n\n```{.r .cell-code}\ncities[5]\n#> [1] \"Berlin\"\n```\n:::\n\n\n<br>\n\n. . . \n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-21_4e753047c876ad4c82149f779887e783'}\n\n```{.r .cell-code}\n# the three most populated cities\ncities[1:3] # same as cities[c(1,2,3)]\n#> [1] \"Istanbul\" \"Moscow\"   \"London\"\n```\n:::\n\n\n<br>\n\n. . . \n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-22_6a6239e0d6a70797a95e471c80936e61'}\n\n```{.r .cell-code}\n# the last entry of the cities vector\ncities[length(cities)] # same as cities[10]\n#> [1] \"Paris\"\n```\n:::\n\n\n\n## Indexing vectors\n\nChange the values of a vector at specified indexes using the assignment operator `<-`\n\n. . .\n\nImagine for example, that the population of \n\n:::{.nonincremental}\n\n- Istanbul (index 1) increased to 20 Million\n- Rome (index 8) changed but is unknown\n- Paris (index 10) decreased by 200,000\n:::\n\n. . .\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-23_38fc52f90f879f69214e3049e88ad5b4'}\n\n```{.r .cell-code}\n# Update Istanbul (1) and Rome(8)\npopulation[c(1, 8)] <- c(20e6, NA) # NA means missing value\n# Update Paris (10)\npopulation[10] <- population[10] - 200000 \n\n# Look at the result\npopulation\n#>  [1] 20000000 12500000  9000000  5400000  3800000  3200000  3000000       NA\n#>  [9]  2200000  1900000\n```\n:::\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-24_5b8b15a359ce49f4f0a1462b65b5c8a4'}\n\n:::\n\n\n\n## Indexing vectors\n\nYou can also index a vector using logical tests. The basic structure is:\n\n:::{.r-stack}\n\n<b>vector [ logical vector of same length ]</b>\n\n:::\n\n<br>\n\n. . .\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-25_7b24a80628ddd323dcbc6abcf7ebe4f3'}\n\n```{.r .cell-code}\nmega_city <- population > mean_population\nmega_city\n#>  [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n\n\n\n. . .\n\nWhich are the mega cities?\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-26_0a7e44e1ee5d686a84a62fb83c6d34d8'}\n\n```{.r .cell-code}\ncities[mega_city] # or short: cities[population > mean_population]\n#> [1] \"Istanbul\" \"Moscow\"   \"London\"\n```\n:::\n\n\n\nReturn only the cities for which the comparison of their population against the mean population is `TRUE`\n\n## Indexing vectors {visibility=\"hidden\"}\n\nWe also use `%in%`for logical indexing.\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-27_5ec385b4d5d26094a097cee6798a1dbb'}\n\n```{.r .cell-code}\npopulation[ cities %in% c(\"Berlin\", \"Paris\", \"Stockholm\", \"Madrid\")]\n#> [1] 3800000 3200000 2100000\n```\n:::\n\n\n\n- Returns only 3 values for population, because Stockholm is not a city in our vector\n  - No city in `cities` returns `TRUE` for the comparison with `\"Stockholm\"`\n  \n. . .\n  \n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-28_6314d61645ecc9afe923f7c21e0a3479'}\n\n```{.r .cell-code}\ncities %in% c(\"Berlin\", \"Paris\", \"Stockholm\", \"Madrid\")\n#>  [1] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE\n```\n:::\n\n\n\n# Summary {.inverse}\n\n> Introduction to R\n\n## Summary I\n\n:::{.nonincremental}\n\n- Variables have a name and a value and are created using the assignment operator `<-`, e.g.\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-29_07a3146a8efe283da37bd05af73f82c7'}\n\n```{.r .cell-code}\nradius <- 5\n```\n:::\n\n\n\n- Vectors are a collection of values of the same data type:\n  - character (`\"hello\"`)\n  - numeric: integer (`23L`) and double (`2.23`)\n  - logical (`TRUE` and `FALSE`)\n  \n:::\n  \n## Summary II\n\n#### Create vectors\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-30_8cab106d5d4c2b4ff17ef06d09b5f5e2'}\n\n```{.r .cell-code}\n# combine objects into vector\nc(1,2,3)\n\n# create a sequence of values\nseq(from = 3, to = 6, by = 0.5)\nseq(from = 3, to = 6, length.out = 10)\n2:10\n\n# repeat values from a vector\nrep(c(1,2), times = 2)\nrep(c(\"a\", \"b\"), each = 2)\n```\n:::\n\n\n\n## Summary III\n\n#### Indexing and subsetting vectors\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-31_0a93f6c1146b2dc3a731a5037a1841c1'}\n\n```{.r .cell-code}\n# By index\nv[3]\nv[1:4]\nv[c(1,5,7)]\n\n# Logical indexing with 1 vector\nv[v > 5]\nv[v != \"bird\" | v == \"rabbit\"]\nv[v %in% c(1,2,3)] # same as v[v == 1 | v == 2 | v == 3]\n\n# Logical indexing with two vectors of same length\nv[y == \"bird\"] # return the value in v for which index y == \"bird\"\nv[y == max(y)] # return the value in v for which y is the maximum of y\n```\n:::\n\n\n\n## Summary IV\n\n#### Working with vectors\n\n\n\n::: {.cell hash='intro-r_cache/html/unnamed-chunk-32_6262cff297589d98b8bd04969ef331eb'}\n\n```{.r .cell-code}\n# length\nlength(v)\n# rounding numbers\nround(v, digits = 2)\n# sum\nsum(v)\n# mean\nmean(v)\n# median\nmedian(v)\n# standard deviation\nsd(v)\n# find the min value\nmin(v)\n# find the max value\n```\n:::\n\n\n\n# Now you {.inverse}\n\n[Task (35 min)]{.highlight-blue}<br>\n\n[Working with vectors]{.big-text}\n\n**Find the task description [here](https://selinazitrone.github.io/intro-r-data-analysis/sessions/02_intro-r.html)**\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}