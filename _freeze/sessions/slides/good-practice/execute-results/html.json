{
  "hash": "405fe26009006e5b82a484821dff0f7b",
  "result": {
    "markdown": "---\ntitle: \"Good practice R coding\"\nsubtitle: \"Day 1 - Introduction to Data Analysis with R\"\nauthor: \"Selina Baldauf\"\ninstitute: \"Freie Universit√§t Berlin - Theoretical Ecology\"\ndate: today\ndate-format: long\nformat: \n  revealjs:\n    footer: \"Selina Baldauf // Good practice R coding\"\n    highlight-style: breeze\n    mainfont: Cabinet Grotesk\n    slide-number: true\n    show-slide-number: all\n    incremental: true\n    self-contained: true\n    code-line-numbers: false\n    auto-stretch: false\n    scrollable: true\n    fig-align: center\n    theme: slides.scss\nexecute: \n  eval: false\n  echo: true\n  warning: false\n  message: false\nfrom: markdown+emoji\n---\n\n\n\n## Who am I?\n\n- Ecologist, PhD student for some years and now scientific programmer\n\n. . .\n\n::: {.columns}\n\n\n::: {.column width=\"50%\"}\n:::{.fragement}\n![Artwork by [Allison Horst](https://allisonhorst.com), CC BY 4.0](img/2023_04_20_what_they_forgot_to_teach_you/R_rain.gif){fig-alt=\"Animated gif of the R logo under a dark rain cloud, with pelting rain coming down.\"}\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: {.fragment}\n\n![](img/2023_04_20_what_they_forgot_to_teach_you/R_love.gif){fig-alt=\"Animated gif of the R logo with magenta and red hearts moving upward in a loop to the left of the \\\"R.\\\"\"}\n\n:::\n:::\n:::\n\n## What they forgot to teach you about R\n\n It's [a book](https://rstats.wtf/) by J. Bryan and J. Hesters\n\n![Artwork by [Allison Horst](https://allisonhorst.com), CC BY 4.0](img/2023_04_20_what_they_forgot_to_teach_you/18_course_content.png){fig-alt=\"An exasperated teacher holding a box that says \\\"Another important thing\\\" walks towards a box labeled \\\"course content\\\", where different unruly topics labeled \\\"essential\\\", \\\"core\\\" etc. are leaping out and running away.\" width=\"80%\"}\n\n## Chaotic projects and workflows ...\n\n... can make even small changes frustrating and difficult.\n  \n![Artwork by [Allison Horst](https://allisonhorst.com), CC BY 4.0](img/2023_04_20_what_they_forgot_to_teach_you/02_kitchen_chaos.png){fig-alt=\"A frustrated looking little monster in front of a very disorganized cooking area, with smoke and fire coming from a pot surrounded by a mess of bowls, utensils, and scattered ingredients.\"}\n\n## Background\n\n- **Reproducibility** :arrows_counterclockwise: \n  - Can someone else reproduce my results?\n- **Reliability** üèã \n  - Will my code work in the future?\n- **Reusability** :gear: \n  - Can someone else actually use my code?\n  \n. . .\n  \nToday: Talk **best practice** rules to write clean, clear and maintainable code.\n\nIn other words: How to clean the kitchen?\n\n\n\n# First things first\nProject setup and structure\n\n## Use R Studio projects\n\n**Always** make your project an R Studio Project (if possible)!\n\n. . .\n\n::: {.columns}\n\n::: {.column width=\"60%\"}\n\n- Keep your files together\n- An R Studio Project is just a normal directory with an `*.Rproj` file\n  - double-click this file to open your project in R Studio\n  \n- Advantages:\n\n  - Easy to navigate in R Studio\n  - Project root is the working directory\n  - Open multiple projects in separate R Studio instances\n:::\n\n::: {.column width=\"35%\"}\n\n![](img/2023_04_20_what_they_forgot_to_teach_you/04_folder_structures_rstudio.png)\n:::\n:::\n\n## Create an R Studio Project\n\n. . .\n\n::: {.fragment}\n\n### From scratch:\n\n::: {.nonincremental}\n\n1. `File -> New Project -> New Directory -> New Project`\n2. Enter a directory name (this will be the name of your project)\n3. Choose the directory where the project should be initiated\n4. `Create Project`\n\n:::\n:::\n\n::: {.fragment}\n\n### Associate an existing folder with an R Studio Project:\n\n::: {.nonincremental}\n\n\n1. `File -> New Project -> Existing Directory`\n2. Choose your project folder\n3. `Create Project`\n\n:::\n:::\n\n## Navigate an R Studio Project\n\nYou can use the `Files` pane in R Studio to interact with your project folder:\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n- Navigate and open files\n- Create files and folders\n- Rename and delete\n- ...\n\n:::\n\n::: {.column width=\"50%\"}\n\n![](img/2023_04_20_what_they_forgot_to_teach_you/06_RStudio_project_navigation.png)\n:::\n\n:::\n\n## Set up your project\n\n. . .\n\nR Studio offers a lot of settings and options. \n\nSo have a :coffee: and check out `Tools -> Global Options` and all the other buttons.\n\n- [R Studio cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/master/rstudio-ide.pdf) that explains all the buttons\n- Update R Studio from time to time to get new settings (`Help -> Check for Updates`)\n\n## Set up your project\n\nR Studio offers a lot of settings and options.\n\n::: {.columns}\n\n::: {.column width=\"60%\"}\n\nMost important setting for reproducibility:\n\n- Never save or restore your work space as `.Rdata` -> You always want to start working with a clean slate\n\n:::\n\n::: {.column width=\"35%\"}\n\n::: {.fragment}\n![](img/2023_04_20_what_they_forgot_to_teach_you/15_settings_workspace.png)\n:::\n:::\n:::\n\n## Name your files properly\n\nYour collaborators and your future self will love you for this.\n\n. . .\n\n### Principles [^1]\n\nFile names should be\n\n  1. Machine readable\n  2. Human readable\n  3. Working with default file ordering\n  \n[^1]: From [this talk](https://speakerdeck.com/jennybc/how-to-name-files) by J. Bryan\n\n## 1. Machine readable file names\n\nNames should allow for easy **searching**, **grouping** and **extracting information** \nfrom file names.\n\n. . .\n\n- No space & special characters\n\n. . .\n\n#### Bad examples :x:\n\n:page_facing_up: `2023-04-20 temperature g√∂ttingen.csv ` <br>\n:page_facing_up: `2023-04-20 rainfall g√∂ttingen.csv ` <br>\n\n::: {.fragment}\n\n#### Good examples :heavy_check_mark: \n\n:page_facing_up: `2023-04-20_temperature_goettingen.csv ` <br>\n:page_facing_up: `2023-04-20_rainfall_goettingen.csv ` <br>\n\n:::\n\n## 2. Human readable file names\n\nWhich file names would you like to read at 4 a.m. in the morning?\n\n- File names should reveal the file content\n- Use separators to make it readable\n\n. . .\n\n#### Bad examples :x:\n\n:page_facing_up: `01preparedataforanalysis.R` <br>\n:page_facing_up: `01firstscript.R` <br>\n\n::: {.fragment}\n\n#### Good examples :heavy_check_mark: \n\n:page_facing_up: `01_prepare-data-for-analysis.R` <br>\n:page_facing_up: `01_lm-temperature-trend.R` <br>\n\n:::\n\n## 3. Default ordering\n\nIf you order your files by name, the ordering should make sense:\n\n- (Almost) always put something numeric first\n  - Left-padded numbers (`01`, `02`, ...)\n  - Dates in `YYYY-MM-DD` format\n\n. . .\n\n#### Chronological order\n\n:page_facing_up: `2023-04-20_temperature_goettingen.csv ` <br>\n:page_facing_up: `2023-04-21_temperature_goettingen.csv ` <br>\n\n:::: {.fragment}\n\n#### Logical order\n\n:page_facing_up: `01_prepare-data.R` <br>\n:page_facing_up: `02_lm-temperature-trend.R` <br>\n\n:::\n\n# Let's start coding\n\n## Write beautiful code\n\n![Artwork by [Allison Horst](https://allisonhorst.com), CC BY 4.0](img/2023_04_20_what_they_forgot_to_teach_you/17_beatuiful_code.png)\n\n- Try to write code that others (i.e. future you) can understand\n- Follow standards for readable and maintainable code\n  - For R: [tidyverse style guide](https://style.tidyverse.org/index.html) defines code organization, syntax standards, ...\n\n## Standard code structure\n\n. . .\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.nonincremental}\n\n1. General comment with purpose of the script, author, ...\n2. `library()` calls on top\n3. Set default variables and global options\n4. Source additional code\n5. Write the actual code, starting with loading all data files\n:::\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell hash='good-practice_cache/html/example-structure-1_38531a241a30d681616ccd46a0bb60db'}\n\n```{.r .cell-code}\n# This code replicates figure 2 from the\n# Baldauf et al. 2022 Journal of Ecology paper.\n# Authors: Selina Baldauf, Jane Doe, Jon Doe\n\nlibrary(tidyverse)\nlibrary(vegan)\n\n# set defaults\ninput_file <- \"data/results.csv\"\n\n# source files\nsource(\"R/my_cool_function.R\")\n\n# read input\ninput_data <- read_csv(input_file)\n```\n:::\n\n\n\n:::\n:::\n\n## Mark sections\n\n- Use comments to break up your file into sections\n\n. . .\n\n\n\n::: {.cell hash='good-practice_cache/html/code-section_7756d2afb42096470ea353d3aafd91f4'}\n\n```{.r .cell-code}\n# Load data ---------------------------------------------------------------\n\ninput_data <- read_csv(input_file)\n\n# Plot data ---------------------------------------------------------------\n\nggplot(input_data, aes(x = x, y = y)) +\n  geom_point()\n```\n:::\n\n\n\n- Insert a section label with `Ctrl/Cmd + Shift`\n- Navigate sections in the file outline\n\n. . .\n\n![](img/2023_04_20_what_they_forgot_to_teach_you/07_document_outline.png){width=\"80%\"}\n\n\n## Modularize your Code\n\n- Don't put all your code into one long file (hard to maintain)\n  - Write multiple files that can be called sequentially\n    - E.g. `01_prepare-data.R`, `02_lm-temperature-trend.R`, `03_plot-temperture-trends.R`\n  - Write functions that can be called in other scripts\n    - Use the `source()` function to source these files\n    - Have one main workflow script that calls these functions sequentially\n\n## Use save paths\n\nTo read and write files, you need to tell R where to find them. \n\n. . .\n\nCommon workflow: set **working directory** with `setwd()`, then read files from there. But to this [Jenny Bryan said](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/):\n\n. . .\n\n> If the first line of your R script is <br>\n  `setwd(\"C:\\Users\\jenny\\path\\that\\only\\I\\have\")` <br>\n  I will come into your office and SET YOUR COMPUTER ON FIRE :fire:.\n  \n. . .\n\n#### Why?\n\nThis is **100% not reproducible**: Your computer at exactly this time is (probably) the only one in the world that has this working directory\n\n. . .\n\nAvoid `setwd()` if it is possible in any way!\n\n## Avoid `setwd()`\n\n. . .\n\nUse R Studio projects\n\n  - Project root is automatically the working directory\n  - Give your project to a friend at it will work on their machine as well\n\n. . .\n\nInstead of\n\n\n\n::: {.cell hash='good-practice_cache/html/unnamed-chunk-1_00082ad5838d5e0f7861348bfb905061'}\n\n```{.r .cell-code}\n# my unique path from hell with white space and special characters \nsetwd(\"C:/Users/Selina's PC/My Projects/G√∂ttingen Temperatures/temperatures\")\n\nread_csv(\"data/2023-04-20_temperature_goettingen.csv\")\n```\n:::\n\n\n\n. . .\n\nYou just need\n  \n\n\n::: {.cell hash='good-practice_cache/html/unnamed-chunk-2_8e47b79b717db5b1488b27491af8fc21'}\n\n```{.r .cell-code}\nread_csv(\"data/2023-04-20_temperature_goettingen.csv\")\n```\n:::\n\n\n\n. . .\n\nIf you don't use R Studio Projects, have a look at the [`{here}` package](https://here.r-lib.org/) for reproducible paths\n\n## Coding style - Object names\n\n. . .\n\n- Variables and function names should only have lowercase letters, numbers, and `_`\n- Use `snake_case` for longer variable names\n- Try to use concise but meaningful names\n\n. . .\n\n\n\n::: {.cell hash='good-practice_cache/html/object-names-snake_234cb1f6ed5c51b51dd1e6ee61243ba2'}\n\n```{.r .cell-code}\n# Good\nday_one\nday_1\n\n# Bad\nDayOne\ndayone\nfirst_day_of_the_month\ndm1\n```\n:::\n\n\n\n## Coding style - Spacing\n\n. . .\n\n::: {.nonincremental}\n\n- Always put spaces after a comma\n\n:::\n\n\n\n::: {.cell hash='good-practice_cache/html/spaces-comma_8b09acfa222228bf9d61ef7e3a806754'}\n\n```{.r .cell-code}\n# Good\nx[, 1]\n\n# Bad\nx[ , 1]\nx[,1]\nx[ ,1]\n```\n:::\n\n\n\n## Coding style - Spacing\n\n::: {.nonincremental}\n\n- Always put spaces after a comma\n- No spaces around parentheses for normal function calls\n\n:::\n\n\n\n::: {.cell hash='good-practice_cache/html/spaces-parenthesis_4dbc9f8da60bad86e0f69bcac7ec0e22'}\n\n```{.r .cell-code}\n# Good\nmean(x, na.rm = TRUE)\n\n# Bad\nmean (x, na.rm = TRUE)\nmean ( x, na.rm = TRUE )\n```\n:::\n\n\n\n## Coding style - Spacing\n\n::: {.nonincremental}\n\n- Always put spaces after a comma\n- No spaces around parentheses for normal function calls\n- Spaces around most operators (`<-`, `==`, `+`, etc.)\n\n:::\n\n\n\n::: {.cell hash='good-practice_cache/html/spaces-operators_01b74ba24fb739fd66cb72b6a19314b3'}\n\n```{.r .cell-code}\n# Good\nheight <- (feet * 12) + inches\nmean(x, na.rm = TRUE)\n\n# Bad\nheight<-feet*12+inches\nmean(x, na.rm=TRUE)\n```\n:::\n\n\n\n\n## Coding style - Spacing\n\n::: {.nonincremental}\n\n- Always put spaces after a comma\n- No spaces around parentheses for normal function calls\n- Spaces around most operators (`<-`, `==`, `+`, etc.)\n- Spaces before pipes (`%>%`, `|>`) followed by new line\n\n:::\n\n\n\n::: {.cell hash='good-practice_cache/html/spaces-pipes_488717ebd9bb58dd18a7a01ebfe61556'}\n\n```{.r .cell-code}\n# Good\niris %>%\n  group_by(Species) %>%\n  summarize_if(is.numeric, mean) %>%\n  ungroup()\n\n# Bad\niris %>% group_by(Species) %>% summarize_all(mean) %>% ungroup() \n```\n:::\n\n\n\n## Coding style - Spacing\n\n::: {.nonincremental}\n\n- Always put spaces after a comma\n- No spaces around parentheses for normal function calls\n- Spaces around most operators (`<-`, `==`, `+`, etc.)\n- Spaces before pipes (`%>%`, `|>`) followed by new line\n- Spaces before `+` in ggplot followed by new line\n\n:::\n\n\n\n::: {.cell hash='good-practice_cache/html/spaces-gglot_c17aa1c2eef0ba92e66d86e0684bb9c0'}\n\n```{.r .cell-code}\n# Good\nggplot(aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +\n  geom_point()\n\n# Bad\nggplot(aes(x = Sepal.Width, y = Sepal.Length, color = Species))+geom_point()\n```\n:::\n\n\n\n## Coding style - Line width\n\nTry to limit your line width to 80 characters.\n\n- You don't want to scroll to the right to read all code\n- 80 characters can be displayed on most displays and programs\n- Split your code into multiple lines if it is too long\n  - See this grey vertical line in R Studio?\n\n. . .\n\n\n\n::: {.cell hash='good-practice_cache/html/linewidth-ggplot_ab32fff1d34e295febcd8bec18c210af'}\n\n```{.r .cell-code}\n# Bad\niris %>%\n  group_by(Species) %>%\n  summarise(Sepal.Length = mean(Sepal.Length), Sepal.Width = mean(Sepal.Width), Species = n_distinct(Species))\n\n# Good\niris %>%\n  group_by(Species) %>%\n  summarise(\n    Sepal.Length = mean(Sepal.Length),\n    Sepal.Width = mean(Sepal.Width),\n    Species = n_distinct(Species)\n  )\n```\n:::\n\n\n\n## Coding style\n\nDo I really have to remember all of this?\n\n. . .\n\nLuckily, no! R and R Studio provide some nice helpers\n\n## Coding style helpers - R Studio\n\nR Studio has style diagnostics that tell you where something is wrong\n\n- `Tools -> Gloabl Options -> Code -> Diagnostics`\n\n. . .\n\n::: {.columns}\n\n::: {.column width=\"65%\"}\n\n![](img/2023_04_20_what_they_forgot_to_teach_you/08_global_options_style.png)\n\n:::\n\n::: {.column width=\"35%\"}\n![](img/2023_04_20_what_they_forgot_to_teach_you/09_style_warning.png)\n:::\n\n:::\n\n## Coding style helpers - `{lintr}`\n\nThe [`lintr` package](https://github.com/jimhester/lintr) analyses your code files or entire project and tells you what to fix.\n\n. . .\n\n\n\n::: {.cell hash='good-practice_cache/html/unnamed-chunk-3_5e6038a33290edf04d5b82ba29d2c20e'}\n\n```{.r .cell-code}\n# install the package before you can use it\ninstall.packages(\"lintr\")\n# lint specific file\nlintr::lint(filename = \"analysis/01_prepare_data.R\")\n# lint a directory (by default the whole project)\nlintr::lint_dir()\n```\n:::\n\n\n\n## Coding style helpers - `{lintr}`\n\n![](img/2023_04_20_what_they_forgot_to_teach_you/16_lintr_output.png){fig-align=\"center\"}\n\n## Coding style helpers - `{styler}`\n\nThe [styler package](http://styler.r-lib.org/) package automatically styles your files and projects\naccording to the tidyverse style guide.\n\n. . .\n\n\n\n::: {.cell hash='good-practice_cache/html/unnamed-chunk-4_eecf772ad9fb60f1b5739edf9e38add9'}\n\n```{.r .cell-code}\n# install from CRAN\ninstall.packages(\"styler\")\n```\n:::\n\n\n\n- Use the R Studio `Addins` for styler:\n\n. . .\n\n![](img/2023_04_20_what_they_forgot_to_teach_you/12_styler_options.png)\n\n## Coding style helpers - `{styler}`\n\n- Pro-Tip: Add a custom keyboard short cut to style your files\n  - `Tools -> Modify Keyboard Shortcuts`\n  \n. . .\n  \n![](img/2023_04_20_what_they_forgot_to_teach_you/13_styler_shortcut.png)\n\n# Summary\n\n## Clean projects and workflows ...\n\n... allow you and others to work productively.\n\n![Artwork by [Allison Horst](https://allisonhorst.com), CC BY 4.0](img/2023_04_20_what_they_forgot_to_teach_you/03_kitchen_clean.png){fig-alt=\"An organized kitchen with sections labeled \\\"tools\\\", \\\"report\\\" and \\\"files\\\", while a monster in a chef's hat stirs in a bowl labeled \\\"code.\\\"\"}\n\n## Take aways\n\nThere are a lot of things that require minimal effort and that you can start to implement into your workflow NOW\n\n1. Use R Studio projects -> Avoid `setwd()`!\n2. Keep your projects clean\n  - Sort your files into folders\n  - Give your files meaningful names\n3. Use `styler` to style your code automatically \n4. Use `lintr` and let R analyse your project\n5. Consider `renv` for project local environments\n\n## Outlook\n\nOf course there is much more:\n\n- Version control with Git\n- Using R packages to build a research compendium\n- Docker containers for full reproducibility\n- ...\n\n. . . \n\nBut this is for another time\n\n# Thank you for your attention :) \nQuestions?\n\n# References\n\n:::{.nonincremental}\n\n- [What they forgot to teach you about R book](https://rstats.wtf/) by Jenny Bryan and Jim Hester\n- [Blogpost](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/) by Jenny Bryan on good project-oriented workflows\n- [R best practice blogpost](https://kdestasio.github.io/post/r_best_practices/) by Krista L. DeStasio\n- [Book about coding style for R](https://style.tidyverse.org/): The tidyverse style guide\n- [The Turing way book](https://the-turing-way.netlify.app/index.html) General concepts and things to think about regarding reproducible research\n\n- [renv package website](https://rstudio.github.io/renv/articles/renv.html)\n- [styler package website](https://styler.r-lib.org/)\n- [lintr package website](https://lintr.r-lib.org/)\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}