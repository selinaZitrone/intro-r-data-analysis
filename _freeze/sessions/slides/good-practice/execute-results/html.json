{
  "hash": "c28e7ddb11065d64bb116a52285950db",
  "result": {
    "markdown": "---\ntitle: \"Good practice R coding\"\nsubtitle: \"Day 1 - Introduction to Data Analysis with R\"\nauthor: \"Selina Baldauf\"\ninstitute: \"Freie Universit√§t Berlin - Theoretical Ecology\"\ndate: today\ndate-format: long\nformat: \n  revealjs:\n    footer: \"Selina Baldauf // Good practice R coding\"\n    highlight-style: breeze\n    mainfont: Cabinet Grotesk\n    slide-number: true\n    show-slide-number: all\n    incremental: true\n    self-contained: true\n    code-line-numbers: false\n    auto-stretch: false\n    scrollable: true\n    fig-align: center\n    theme: slides.scss\nexecute: \n  eval: false\n  echo: true\n  warning: false\n  message: false\nfrom: markdown+emoji\n---\n\n\n## Chaotic projects and workflows ...\n\n... can make even small changes frustrating and difficult.\n  \n![Artwork by [Allison Horst](https://allisonhorst.com), CC BY 4.0](img/2023_04_20_what_they_forgot_to_teach_you/02_kitchen_chaos.png){fig-alt=\"A frustrated looking little monster in front of a very disorganized cooking area, with smoke and fire coming from a pot surrounded by a mess of bowls, utensils, and scattered ingredients.\" width=90%}\n\n## Background\n\n- **Reproducibility** :arrows_counterclockwise: \n  - Can someone else reproduce my results?\n- **Reliability** üèã \n  - Will my code work in the future?\n- **Reusability** :gear: \n  - Can someone else actually use my code?\n  \n# First things first {.inverse}\nProject setup and structure\n\n## Use R Studio projects\n\n**Always** make your project an R Studio Project (if possible)!\n\n. . .\n\n:white_check_mark: You already did that.\n\n## Set up your project\n\n. . .\n\nR Studio offers a lot of settings and options. \n\nSo have a :coffee: and check out **Tools -> Global Options** and all the other buttons.\n\n- [R Studio cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/master/rstudio-ide.pdf) that explains all the buttons\n- Update R Studio from time to time to get new settings (**Help -> Check for Updates**)\n\n## Set up your project\n\nR Studio offers a lot of settings and options.\n\n::: {.columns}\n\n::: {.column width=\"60%\"}\n\nMost important setting for reproducibility:\n\n:::{.nonincremental}\n\n- Never save or restore your work space as `.Rdata` -> You always want to start working with a clean slate\n\n:::\n\n:::\n\n::: {.column width=\"35%\"}\n\n![](img/2023_04_20_what_they_forgot_to_teach_you/15_settings_workspace.png)\n:::\n:::\n\n:white_check_mark: You already know how to do that.\n\n## Name your files properly\n\nYour collaborators and your future self will love you for this.\n\n. . .\n\n### Principles [^1]\n\nFile names should be\n\n:::{.nonincremental}\n\n  1. Machine readable\n  2. Human readable\n  3. Working with default file ordering\n\n:::\n\n[^1]: From [this talk](https://speakerdeck.com/jennybc/how-to-name-files) by J. Bryan\n\n## 1. Machine readable file names\n\nNames should allow for easy **searching**, **grouping** and **extracting information** \nfrom file names.\n\n. . .\n\n- No space & special characters\n\n. . .\n\n#### Bad examples :x:\n\n:page_facing_up: `2023-04-20 temperature g√∂ttingen.csv ` <br>\n:page_facing_up: `2023-04-20 rainfall g√∂ttingen.csv ` <br>\n\n::: {.fragment}\n\n#### Good examples :heavy_check_mark: \n\n:page_facing_up: `2023-04-20_temperature_goettingen.csv ` <br>\n:page_facing_up: `2023-04-20_rainfall_goettingen.csv ` <br>\n\n:::\n\n## 2. Human readable file names\n\nWhich file names would you like to read at 4 a.m. in the morning?\n\n- File names should reveal the file content\n- Use separators to make it readable\n\n. . .\n\n#### Bad examples :x:\n\n:page_facing_up: `01preparedata.R` <br>\n:page_facing_up: `01firstscript.R` <br>\n\n::: {.fragment}\n\n#### Good examples :heavy_check_mark: \n\n:page_facing_up: `01_prepare-data.R` <br>\n:page_facing_up: `01_temperature-trend-analysis.R` <br>\n\n:::\n\n## 3. Default ordering\n\nIf you order your files by name, the ordering should make sense:\n\n- (Almost) always put something numeric first\n  - Left-padded numbers (`01`, `02`, ...)\n  - Dates in `YYYY-MM-DD` format\n\n. . .\n\n#### Chronological order\n\n:page_facing_up: `2023-04-20_temperature_goettingen.csv ` <br>\n:page_facing_up: `2023-04-21_temperature_goettingen.csv ` <br>\n\n:::: {.fragment}\n\n#### Logical order\n\n:page_facing_up: `01_prepare-data.R` <br>\n:page_facing_up: `02_lm-temperature-trend.R` <br>\n\n:::\n\n# Let's start coding {.inverse}\n\n> Good practice R coding\n\n## Write beautiful code\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n- Try to write code that others (i.e. future you) can understand\n- Follow standards for readable and maintainable code\n  - For R: [tidyverse style guide](https://style.tidyverse.org/index.html) defines code organization, syntax standards, ...\n\n:::\n\n:::{.column width=\"50%\"}\n\n![Artwork by [Allison Horst](https://allisonhorst.com), CC BY 4.0](img/2023_04_20_what_they_forgot_to_teach_you/17_beatuiful_code.png)\n\n:::\n\n:::\n\n## Standard code structure\n\n. . .\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.nonincremental}\n\n1. General comment with purpose of the script, author, ...\n2. `library()` calls on top\n3. Set default variables and global options\n4. Source additional code\n5. Write the actual code, starting with loading all data files\n:::\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n::: {.cell hash='good-practice_cache/revealjs/example-structure-1_2159b57754d5a1962566cae1862c4343'}\n\n```{.r .cell-code}\n# This code replicates figure 2 from the\n# Baldauf et al. 2022 Journal of Ecology paper.\n# Authors: Selina Baldauf, Jane Doe, Jon Doe\n\nlibrary(tidyverse)\nlibrary(vegan)\n\n# set defaults\ninput_file <- \"data/results.csv\"\n\n# source files\nsource(\"R/my_cool_function.R\")\n\n# read input\ninput_data <- read_csv(input_file)\n```\n:::\n\n\n:::\n:::\n\n## Mark sections\n\n:::{.nonincremental}\n- Use comments to break up your file into sections\n:::\n\n. . .\n\n\n::: {.cell hash='good-practice_cache/revealjs/code-section_4f21ac7e49b21740669968c1f14c258d'}\n\n```{.r .cell-code}\n# Load data ---------------------------------------------------------------\n\ninput_data <- read_csv(input_file)\n\n# Plot data ---------------------------------------------------------------\n\nggplot(input_data, aes(x = x, y = y)) +\n  geom_point()\n```\n:::\n\n\n- Insert a section label with `Ctrl/Cmd + Shift`\n- Navigate sections in the file outline\n\n. . .\n\n![](img/2023_04_20_what_they_forgot_to_teach_you/07_document_outline.png){width=\"80%\"}\n\n## Coding style - Object names\n\n. . .\n\n- Variables should only have *lowercase letters*, *numbers*, and *_*\n- Use `snake_case` for longer variable names\n- Try to use concise but meaningful names\n\n. . .\n\n\n::: {.cell hash='good-practice_cache/revealjs/object-names-snake_314047123c30155dfca7017ee5a48cf3'}\n\n```{.r .cell-code}\n# Good\nday_one\nday_1\n\n# Bad\nDayOne\ndayone\nfirst_day_of_the_month\ndm1\n```\n:::\n\n\n## Coding style - Spacing\n\n. . .\n\n::: {.nonincremental}\n\n- Always put spaces after a comma\n\n:::\n\n\n::: {.cell hash='good-practice_cache/revealjs/spaces-comma_51b914b6223b036cd68320c5e28f0164'}\n\n```{.r .cell-code}\n# Good\nx[, 1]\n\n# Bad\nx[ , 1]\nx[,1]\nx[ ,1]\n```\n:::\n\n\n## Coding style - Spacing\n\n::: {.nonincremental}\n\n- Always put spaces after a comma\n- No spaces around parentheses for normal function calls\n\n:::\n\n\n::: {.cell hash='good-practice_cache/revealjs/spaces-parenthesis_016ad9e03d2165c6d8f483899e696abf'}\n\n```{.r .cell-code}\n# Good\nmean(x, na.rm = TRUE)\n\n# Bad\nmean (x, na.rm = TRUE)\nmean ( x, na.rm = TRUE )\n```\n:::\n\n\n## Coding style - Spacing\n\n::: {.nonincremental}\n\n- Always put spaces after a comma\n- No spaces around parentheses for normal function calls\n- Spaces around most operators (`<-`, `==`, `+`, etc.)\n\n:::\n\n\n::: {.cell hash='good-practice_cache/revealjs/spaces-operators_51c7f28d2c50822444c610392193ad6c'}\n\n```{.r .cell-code}\n# Good\nheight <- (feet * 12) + inches\nmean(x, na.rm = TRUE)\n\n# Bad\nheight<-feet*12+inches\nmean(x, na.rm=TRUE)\n```\n:::\n\n\n\n## Coding style - Spacing\n\n::: {.nonincremental}\n\n- Always put spaces after a comma\n- No spaces around parentheses for normal function calls\n- Spaces around most operators (`<-`, `==`, `+`, etc.)\n- Spaces before pipe (`|>`) followed by new line\n\n:::\n\n\n::: {.cell hash='good-practice_cache/revealjs/spaces-pipes_d7a37ac3e63fc5a39d23d8882ec313d6'}\n\n```{.r .cell-code}\n# Good\niris |> \n  group_by(Species)  |> \n  summarize_if(is.numeric, mean)  |> \n  ungroup()\n\n# Bad\niris |> group_by(Species) |> summarize_all(mean) |> ungroup() \n```\n:::\n\n\n## Coding style - Spacing\n\n::: {.nonincremental}\n\n- Always put spaces after a comma\n- No spaces around parentheses for normal function calls\n- Spaces around most operators (`<-`, `==`, `+`, etc.)\n- Spaces before pipes (`|>`, `|>`) followed by new line\n- Spaces before `+` in ggplot followed by new line\n\n:::\n\n\n::: {.cell hash='good-practice_cache/revealjs/spaces-gglot_b10eed5bc4160a691a212778285f744b'}\n\n```{.r .cell-code}\n# Good\nggplot(aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +\n  geom_point()\n\n# Bad\nggplot(aes(x = Sepal.Width, y = Sepal.Length, color = Species))+geom_point()\n```\n:::\n\n\n## Coding style - Line width\n\nTry to limit your line width to 80 characters.\n\n- You don't want to scroll to the right to read all code\n- 80 characters can be displayed on most displays and programs\n- Split your code into multiple lines if it is too long\n  - See this grey vertical line in R Studio?\n\n. . .\n\n\n::: {.cell hash='good-practice_cache/revealjs/linewidth-ggplot_670ab9511f2059345879cbdd4daff32b'}\n\n```{.r .cell-code}\n# Bad\niris  |> \n  group_by(Species) |>\n  summarise(Sepal.Length = mean(Sepal.Length), Sepal.Width = mean(Sepal.Width), Species = n_distinct(Species))\n\n# Good\niris |>\n  group_by(Species) |>\n  summarise(\n    Sepal.Length = mean(Sepal.Length),\n    Sepal.Width = mean(Sepal.Width),\n    Species = n_distinct(Species)\n  )\n```\n:::\n\n\n## Coding style\n\nDo I really have to remember all of this?\n\n. . .\n\nLuckily, no! R and R Studio provide some nice helpers\n\n## Coding style helpers - R Studio\n\nR Studio has style diagnostics that tell you where something is wrong\n\n. . .\n\n- **Tools -> Gloabl Options -> Code -> Diagnostics**\n\n::: {.columns}\n\n::: {.column width=\"65%\"}\n\n![](img/2023_04_20_what_they_forgot_to_teach_you/08_global_options_style.png)\n\n:::\n\n::: {.column width=\"35%\"}\n![](img/2023_04_20_what_they_forgot_to_teach_you/09_style_warning.png)\n:::\n\n:::\n\n## Coding style helpers - `{styler}`\n\nThe [styler package](http://styler.r-lib.org/) package automatically styles your files and projects\naccording to the tidyverse style guide.\n\n. . .\n\n\n::: {.cell hash='good-practice_cache/revealjs/unnamed-chunk-1_fc58bcf0209b8248017ae0b05637a6bc'}\n\n```{.r .cell-code}\n# install from CRAN\ninstall.packages(\"styler\")\n```\n:::\n\n\n- Use the R Studio **Addins** for styler:\n\n. . .\n\n![](img/2023_04_20_what_they_forgot_to_teach_you/12_styler_options.png)\n\n## Coding style helpers - `{styler}`\n\n- Pro-Tip: Add a custom keyboard short cut to style your files\n  - **Tools -> Modify Keyboard Shortcuts**\n  \n. . .\n  \n![](img/2023_04_20_what_they_forgot_to_teach_you/13_styler_shortcut.png)\n\n## Clean projects and workflows ...\n\n... allow you and others to work productively.\n\n![Artwork by [Allison Horst](https://allisonhorst.com), CC BY 4.0](img/2023_04_20_what_they_forgot_to_teach_you/03_kitchen_clean.png){fig-alt=\"An organized kitchen with sections labeled \\\"tools\\\", \\\"report\\\" and \\\"files\\\", while a monster in a chef's hat stirs in a bowl labeled \\\"code.\\\"\" width=90%}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}