{
  "hash": "2c0e44995852c8b79b3a7680165d8a5e",
  "result": {
    "markdown": "---\ntitle: \"Tables in R - Data frames and Tibbles\"\nsubtitle: \"Day 1 - Introduction to Data Analysis with R\"\nauthor: \"Selina Baldauf\"\ninstitute: \"Freie Universität Berlin - Theoretical Ecology\"\ndate: today\ndate-format: long\nformat: \n  revealjs:\n    footer: \"Selina Baldauf // Data frames and tibbles\"\n    highlight-style: breeze\n    mainfont: Cabinet Grotesk\n    slide-number: true\n    show-slide-number: all\n    incremental: true\n    self-contained: true\n    code-line-numbers: false\n    auto-stretch: false\n    scrollable: true\n    fig-align: center\n    theme: slides.scss\nexecute: \n  echo: true\n  warning: false\n  message: false\nfrom: markdown+emoji\n---\n\n\n## Data frames\n\nThe built-in data structure for tables in R is a `data frame`.\n\n. . .\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\nVectors in R can't represent a table with data that is connected via rows\n\n> Data frames are one of the **biggest and most important ideas** in R, and one of the things that make R different from other programming languages.<br>[(Wickham, [Advanced R](https://adv-r.hadley.nz/vectors-chap.html#tibble))]{.text-small}\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-1_8d9fc956fd74535a9cf4591e54d06ec5'}\n::: {.cell-output-display}\n|cities           | population| area_km2|\n|:----------------|----------:|--------:|\n|Istanbul         |   15100000|     2576|\n|Moscow           |   12500000|     2561|\n|London           |    9000000|     1572|\n|Saint Petersburg |    5400000|     1439|\n|Berlin           |    3800000|      891|\n|Madrid           |    3200000|      604|\n|Kyiv             |    3000000|      839|\n|Rome             |    2800000|     1285|\n|Bucharest        |    2200000|      228|\n|Paris            |    2100000|      105|\n:::\n:::\n\n\n:::\n\n:::\n\n## Data frames\n\nA data frame is a **named list of vectors** of the same length.<br>\n\n. . .\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n<br>\n\n#### Basic properties of a data frame\n\n- every [column is a vector]{.highlight-grn}\n- columns have a [header]{.highlight-ylw}\n  - this is the name of the vector in the list\n- within one column, all values are of the [same data type]{.highlight-pink}\n- every column has the same length\n\n:::\n\n:::{.column width=\"50%\"}\n\n![](img/day1/data_frame_specs_all.png){width=85%}\n\n:::\n\n:::\n\n## Data frames\n\nData frames are created with the function `data.frame()`:\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-2_aa1d45f0d63b170703fde8e66fc8d09d'}\n\n```{.r .cell-code}\ncities <- c(\n  \"Istanbul\", \"Moscow\", \"London\", \n  \"Saint Petersburg\", \"Berlin\",\"Madrid\",\n  \"Kyiv\", \"Rome\", \"Bucharest\",\"Paris\")\n\npopulation <- c(\n  15.1e6, 12.5e6, 9e6, 5.4e6, 3.8e6,\n  3.2e6, 3e6, 2.8e6, 2.2e6, 2.1e6)\n\narea_km2 <- c(2576, 2561, 1572, 1439, \n  891, 604, 839, 1285, 228, 105)\n```\n:::\n\n<br>\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-3_8f7ef0df967cc1bffd84db6ea1e9f618'}\n\n```{.r .cell-code}\ndata.frame(\n  cities = cities,\n  population = population,\n  area_km2 = area_km2\n  )\n```\n:::\n\n\n:::\n\n:::{.column width=\"50%\"}\n\n:::{.fragment}\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-4_fe2c5135961ab52643011164450a8543'}\n::: {.cell-output .cell-output-stdout}\n```\n             cities population area_km2\n1          Istanbul   15100000     2576\n2            Moscow   12500000     2561\n3            London    9000000     1572\n4  Saint Petersburg    5400000     1439\n5            Berlin    3800000      891\n6            Madrid    3200000      604\n7              Kyiv    3000000      839\n8              Rome    2800000     1285\n9         Bucharest    2200000      228\n10            Paris    2100000      105\n```\n:::\n:::\n\n\n:::\n\n:::\n\n:::\n\n## Tibbles\n\nTibbles are \n\n> a **modern reimagining of the data frame**. Tibbles are designed to be (as much as possible) **drop-in replacements** for data frames. \n<br>[(Wickham, [Advanced R](https://adv-r.hadley.nz/vectors-chap.html#tibble))]{.text-small}\n\n. . .\n\nHave a look at [this book chapter](https://adv-r.hadley.nz/vectors-chap.html#tibble) for a full list of the differences between data frames and tibbles and the advantages of using tibbles.\n\n. . .\n\n:::{.columns}\n\n:::{.column width=\"70%\"}\n\n:::{.nonincremental}\n\n- Tibbles have the same basic properties as data frames (named list of vectors)\n\n- Everything that you can do with data frames, you can do with tibbles\n\n:::\n\n:::\n\n:::{.column width=\"30%\"}\n\n![](img/day1/data_frame_tibble.png)\n\n:::\n\n:::\n\n## Tibbles\n\n![](img/hex-stickers/tibble.png){style=\"float:right;padding: 0 0 0 10px;\" fig-alt=\"Tibble Hex Logo\" width=\"185\"}\n<br><br>\nTibbles are a available from the `tibble` package.\n\n. . .\n\n<br><br>\n\nBefore we use tibbles, we need to install the package once using the function `install.packages`:\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-5_4059adfa0a09a1488e00af3c80d643c4'}\n\n```{.r .cell-code}\n# This has do be done only once (in the console, not in the script)\ninstall.packages(\"tibble\")\n```\n:::\n\n\nThen, we need to load and attach the package to our current R session using `library`:\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-6_516f78152e1f0dd45a76ab27e0a7922a'}\n\n```{.r .cell-code}\n# This has to be done every time R restarts\n# Put it at the top of a script\nlibrary(tibble)\n```\n:::\n\n\n\n\n## Tibbles\n\nCreate a tibble using the `tibble()` function:\n\n. . .\n\n:::{.columns}\n\n:::{.column width=\"50%\"}\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-7_7fce2b4612f94f4d3f9ed79fcbfdef1c'}\n\n```{.r .cell-code}\nlibrary(tibble) \n\ntibble(\n  cities = cities,\n  population = population,\n  area_km2 = area_km2\n)\n```\n:::\n\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-8_6bef9387c89b7b7c6768155caf2d18ef'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n   cities           population area_km2\n   <chr>                 <dbl>    <dbl>\n 1 Istanbul           15100000     2576\n 2 Moscow             12500000     2561\n 3 London              9000000     1572\n 4 Saint Petersburg    5400000     1439\n 5 Berlin              3800000      891\n 6 Madrid              3200000      604\n 7 Kyiv                3000000      839\n 8 Rome                2800000     1285\n 9 Bucharest           2200000      228\n10 Paris               2100000      105\n```\n:::\n:::\n\n\n:::\n\n:::\n\n## Exploring tibbles\n\nLook at the structure of an object using `str()`:\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-9_b66fc1cc489f686e94889e6608805b8c'}\n\n```{.r .cell-code}\nstr(cities_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [10 × 3] (S3: tbl_df/tbl/data.frame)\n $ cities    : chr [1:10] \"Istanbul\" \"Moscow\" \"London\" \"Saint Petersburg\" ...\n $ population: num [1:10] 15100000 12500000 9000000 5400000 3800000 3200000 3000000 2800000 2200000 2100000\n $ area_km2  : num [1:10] 2576 2561 1572 1439 891 ...\n```\n:::\n:::\n\n\n. . .\n\nOr do it in the environment pane of RStudio (click little blue arrow next to the object):\n\n![](img/day1/str_RStudio.png)\n\n. . .\n\n`str()` works for every R object and is very useful if code doesn't work and you don't know why\n\n## Exploring tibbles\n\nHow many rows?\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-10_d39bb12d7866e0c80dbac1a600eba554'}\n\n```{.r .cell-code}\nnrow(cities_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\n. . .\n\nHow many columns?\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-11_ba72edf3811fbf86ec6556f650488f08'}\n\n```{.r .cell-code}\nncol(cities_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n. . .\n\nWhat are the column headers?\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-12_9e17e64fccb4dbc978e46cb31404d8f6'}\n\n```{.r .cell-code}\nnames(cities_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"cities\"     \"population\" \"area_km2\"  \n```\n:::\n:::\n\n\n## Exploring tibbles\n\nLook at the entire table in a separate window with `view()`:\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-13_9d64b261cb9418065b68654eeb890d37'}\n\n```{.r .cell-code}\nview(cities_tbl)\n```\n:::\n\n\n. . .\n\nOr click on the little table sign in the Environment pane:\n\n![](img/day1/view_RStudio.png)\n\n## Exploring tibbles\n\nGet a quick summary of all columns:\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-14_5f6de56d1c3782c02a5858733d28031b'}\n\n```{.r .cell-code}\nsummary(cities_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    cities            population          area_km2     \n Length:10          Min.   : 2100000   Min.   : 105.0  \n Class :character   1st Qu.: 2850000   1st Qu.: 662.8  \n Mode  :character   Median : 3500000   Median :1088.0  \n                    Mean   : 5910000   Mean   :1210.0  \n                    3rd Qu.: 8100000   3rd Qu.:1538.8  \n                    Max.   :15100000   Max.   :2576.0  \n```\n:::\n:::\n\n\n## Indexing tibbles\n\nIndexing tibbles works similar to indexing vectors but with 2 dimensions instead of 1:<br>\n\n:::{.r-stack}\n\n<b>tibble [ [row_index]{.col-green}, [col_index or col_name]{.col-pink} ]</b>\n\n:::\n\n- Missing row_index or col_index means *all rows* or *all columns* respectively.\n- Indexing a tibble using `[]` always returns another tibble.\n\n## Indexing tibbles\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-15_f06b6670feff1aa54e09acb6d81ff761'}\n\n```{.r .cell-code}\n# First row and first column\ncities_tbl[1, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  cities  \n  <chr>   \n1 Istanbul\n```\n:::\n:::\n\n\n. . .\n\nThis is the same as \n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-16_b838467973b83c6792405202a85eb3ed'}\n\n```{.r .cell-code}\ncities_tbl[1, \"cities\"]\n```\n:::\n\n\n## Indexing tibbles: rows\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-17_2e43ca6a3d7841e8f57f3492fc6cd6a4'}\n\n```{.r .cell-code}\n# rows 1 & 5, all columns:\ncities_tbl[c(1, 5), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  cities   population area_km2\n  <chr>         <dbl>    <dbl>\n1 Istanbul   15100000     2576\n2 Berlin      3800000      891\n```\n:::\n:::\n\n\n## Indexing tibbles: columns \n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-18_e25c3f304063362f5d4c63f7a64c572f'}\n\n```{.r .cell-code}\n# All rows, first 2 columns\ncities_tbl[ ,1:2] # same as cities_tbl[ , c(1, 2)]\n# same as\ncities_tbl[ ,c(\"cities\", \"population\")]\n```\n:::\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-19_7b69997a9cd883349d6fa42ac9b2a3f2'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n  cities   population\n  <chr>         <dbl>\n1 Istanbul   15100000\n2 Moscow     12500000\n3 London      9000000\n# ℹ 7 more rows\n```\n:::\n:::\n\n\n## Indexing tibbles: columns\n\nIndexing columns by name is usually preferred to indexing by position\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-20_48e1fe002ddf4a2d72729f294c6a9a3f'}\n\n```{.r .cell-code}\ncities_tbl[ ,1:2] # okay\ncities_tbl[ ,c(\"cities\", \"population\")] # better\n```\n:::\n\n\n#### Why?\n\n- Code is much easier to read\n\n- Code is more robust against\n  - changes in column order\n  - mistakes in the code (e.g. typos)\n\n:::{.fragment}\n  \n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-21_4403b1a3ee932b5927aa5eb140e3ff6f'}\n\n```{.r .cell-code}\ncities_tbl[ ,c(1,3)] # 3 instead of 2 -> wrong but no error\ncities_tbl[ ,c(\"cities\", \"popluation\")] # typo -> wrong and error\n```\n:::\n\n\n:::\n\n:::{.fragment}\n\n:::{.callout-tip}\n\n## General rule\n\nGood code produces errors when something unintended or wrong happens\n\n:::\n\n:::\n\n## Tibbles: Select columns with `$`\n\nSelect an entire column from a tibble using `$` (this returns a vector instead of a tibble):\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-22_b8aee294072afa6755557cc5fab95565'}\n\n```{.r .cell-code}\ncities_tbl$cities\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Istanbul\"         \"Moscow\"           \"London\"           \"Saint Petersburg\"\n [5] \"Berlin\"           \"Madrid\"           \"Kyiv\"             \"Rome\"            \n [9] \"Bucharest\"        \"Paris\"           \n```\n:::\n:::\n\n\n## Adding new columns\n\nNew columns can be added as vectors using the `$` operator. The vectors need to have the same length as the tibble has rows.\n\n. . .\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-23_d789c688144a62928da205f627e169ee'}\n\n```{.r .cell-code}\n# add a country column\ncities_tbl$country <- c(\n  \"Turkey\", \"Russia\", \"UK\", \"Russia\", \"Germany\", \"Spain\",\n  \"Ukraine\", \"Italy\", \"Romania\", \"France\"\n)\n```\n:::\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-24_1bae104eb70f7a61ae196b793eec4df2'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 4\n   cities           population area_km2 country\n   <chr>                 <dbl>    <dbl> <chr>  \n 1 Istanbul           15100000     2576 Turkey \n 2 Moscow             12500000     2561 Russia \n 3 London              9000000     1572 UK     \n 4 Saint Petersburg    5400000     1439 Russia \n 5 Berlin              3800000      891 Germany\n 6 Madrid              3200000      604 Spain  \n 7 Kyiv                3000000      839 Ukraine\n 8 Rome                2800000     1285 Italy  \n 9 Bucharest           2200000      228 Romania\n10 Paris               2100000      105 France \n```\n:::\n:::\n\n\n# Summary{.inverse}\n\n> Tables in R: Data frames and tibbles\n\n## Summary I\n\n#### data frames and tibbles\n\n:::{.nonincremental}\n\n- can be used to represent tables in R\n- are pretty similar, however tibbles are slightly conventient and modern\n- are **named lists of vectors of the same length**\n  - every column is a vector\n  - columns have a header which is the name of the vector in the list\n  - within one column, values are of same data type\n  - every column has the same length\n  \n#### tibbles\n\n- to use tibbles, install the package once with `install.packages(\"tibble\")`\n- put `library(tibble)` at the beginning of your script to load package\n\n:::\n\n## Summary II\n\n#### Creating tibbles and data frames\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-25_5907c807fc4b28c5b10ddef50a24c668'}\n\n```{.r .cell-code}\n# data frame\ndata.frame(\n  a = 1:3,\n  b = c(\"a\", \"b\", \"c\"),\n  c = c(TRUE, FALSE, FALSE) \n)\n# tibble\ntibble(\n  a = 1:3,\n  b = c(\"a\", \"b\", \"c\"),\n  c = c(TRUE, FALSE, FALSE) \n)\n# convert data frame to tibble\nas_tibble(df)\n```\n:::\n\n\n## Summary III\n\n#### Looking at tibble structure\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-26_0ce3e2853a121559048d3e9fb71d0772'}\n\n```{.r .cell-code}\n# structure of tibble and data types of columns\nstr(tbl)\n# number of rows\nnrow(tbl)\n# number of columns\nncol(tbl)\n# column headers\nnames(tbl)\n# look at the data in a new window\ntibble::view(tbl)\n# summary of values from each column\nsummary(tbl)\n```\n:::\n\n\n## Summary IV\n\n#### Indexing tibbles and selecting columns\n\nReturn result as tibble:\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-27_d37d9d46a3087899cb235ad9a8ccdb5f'}\n\n```{.r .cell-code}\n# rows and columns by position\ntbl[1:3, c(1, 3)]\ntbl[1:3, ] # all columns\ntbl[, 3] # column 3, all rows\ntbl[3] # same as above\n\n# columns by name\ntbl[, c(\"colA\", \"colB\")]\ntbl[c(\"colA\", \"colB\")]\n```\n:::\n\n\nReturn result as vector:\n\n\n::: {.cell hash='data-tibbles_cache/revealjs/unnamed-chunk-28_aea21b6ab43abf7ea902bf5c31b0670d'}\n\n```{.r .cell-code}\ntbl$colA # select colA  \n```\n:::\n\n\n# Now you{.inverse}\n\n[Task 3 (20 min)]{.highlight-blue}<br>\n\n[Tibbles]{.big-text}\n\n**Find the task description [here](https://selinazitrone.github.io/intro-r-data-analysis/01_tasks_controller.html#tibbles)**\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}